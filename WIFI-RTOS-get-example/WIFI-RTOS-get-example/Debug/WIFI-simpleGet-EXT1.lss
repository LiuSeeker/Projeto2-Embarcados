
WIFI-simpleGet-EXT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009cfc  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409cfc  00409cfc  00019cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d8  20400000  00409d04  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000c0fc  204009d8  0040a6dc  000209d8  2**2
                  ALLOC
  4 .stack        00002004  2040cad4  004167d8  000209d8  2**0
                  ALLOC
  5 .heap         00000200  2040ead8  004187dc  000209d8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a06  2**0
                  CONTENTS, READONLY
  8 .debug_info   000331bf  00000000  00000000  00020a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006831  00000000  00000000  00053c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001229f  00000000  00000000  0005a44f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000014c0  00000000  00000000  0006c6ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001800  00000000  00000000  0006dbae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000fa2c  00000000  00000000  0006f3ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001b650  00000000  00000000  0007edda  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009a2cc  00000000  00000000  0009a42a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000043d0  00000000  00000000  001346f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 ea 40 20 e1 53 40 00 df 53 40 00 df 53 40 00     ..@ .S@..S@..S@.
  400010:	df 53 40 00 df 53 40 00 df 53 40 00 00 00 00 00     .S@..S@..S@.....
	...
  40002c:	d5 02 40 00 df 53 40 00 00 00 00 00 75 03 40 00     ..@..S@.....u.@.
  40003c:	dd 03 40 00 df 53 40 00 df 53 40 00 df 53 40 00     ..@..S@..S@..S@.
  40004c:	df 53 40 00 df 53 40 00 df 53 40 00 df 53 40 00     .S@..S@..S@..S@.
  40005c:	df 53 40 00 df 53 40 00 00 00 00 00 f9 4e 40 00     .S@..S@......N@.
  40006c:	0d 4f 40 00 21 4f 40 00 df 53 40 00 df 53 40 00     .O@.!O@..S@..S@.
  40007c:	df 53 40 00 35 4f 40 00 49 4f 40 00 df 53 40 00     .S@.5O@.IO@..S@.
  40008c:	df 53 40 00 df 53 40 00 df 53 40 00 df 53 40 00     .S@..S@..S@..S@.
  40009c:	df 53 40 00 df 53 40 00 df 53 40 00 df 53 40 00     .S@..S@..S@..S@.
  4000ac:	df 53 40 00 df 53 40 00 df 53 40 00 df 53 40 00     .S@..S@..S@..S@.
  4000bc:	df 53 40 00 df 53 40 00 df 53 40 00 df 53 40 00     .S@..S@..S@..S@.
  4000cc:	df 53 40 00 00 00 00 00 df 53 40 00 00 00 00 00     .S@......S@.....
  4000dc:	df 53 40 00 df 53 40 00 df 53 40 00 df 53 40 00     .S@..S@..S@..S@.
  4000ec:	df 53 40 00 df 53 40 00 df 53 40 00 df 53 40 00     .S@..S@..S@..S@.
  4000fc:	df 53 40 00 df 53 40 00 df 53 40 00 df 53 40 00     .S@..S@..S@..S@.
  40010c:	df 53 40 00 df 53 40 00 00 00 00 00 00 00 00 00     .S@..S@.........
  40011c:	00 00 00 00 df 53 40 00 df 53 40 00 df 53 40 00     .....S@..S@..S@.
  40012c:	df 53 40 00 df 53 40 00 00 00 00 00 df 53 40 00     .S@..S@......S@.
  40013c:	df 53 40 00                                         .S@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d8 	.word	0x204009d8
  40015c:	00000000 	.word	0x00000000
  400160:	00409d04 	.word	0x00409d04

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00409d04 	.word	0x00409d04
  4001a0:	204009dc 	.word	0x204009dc
  4001a4:	00409d04 	.word	0x00409d04
  4001a8:	00000000 	.word	0x00000000

004001ac <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4001ac:	f100 0308 	add.w	r3, r0, #8
  4001b0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  4001b2:	f04f 32ff 	mov.w	r2, #4294967295
  4001b6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4001b8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4001ba:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  4001bc:	2300      	movs	r3, #0
  4001be:	6003      	str	r3, [r0, #0]
  4001c0:	4770      	bx	lr

004001c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4001c2:	2300      	movs	r3, #0
  4001c4:	6103      	str	r3, [r0, #16]
  4001c6:	4770      	bx	lr

004001c8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  4001c8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  4001ca:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  4001cc:	689a      	ldr	r2, [r3, #8]
  4001ce:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  4001d0:	689a      	ldr	r2, [r3, #8]
  4001d2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  4001d4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4001d6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4001d8:	6803      	ldr	r3, [r0, #0]
  4001da:	3301      	adds	r3, #1
  4001dc:	6003      	str	r3, [r0, #0]
  4001de:	4770      	bx	lr

004001e0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4001e0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4001e2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4001e4:	f1b5 3fff 	cmp.w	r5, #4294967295
  4001e8:	d002      	beq.n	4001f0 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4001ea:	f100 0208 	add.w	r2, r0, #8
  4001ee:	e002      	b.n	4001f6 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4001f0:	6902      	ldr	r2, [r0, #16]
  4001f2:	e004      	b.n	4001fe <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4001f4:	461a      	mov	r2, r3
  4001f6:	6853      	ldr	r3, [r2, #4]
  4001f8:	681c      	ldr	r4, [r3, #0]
  4001fa:	42a5      	cmp	r5, r4
  4001fc:	d2fa      	bcs.n	4001f4 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4001fe:	6853      	ldr	r3, [r2, #4]
  400200:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400202:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400204:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400206:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400208:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40020a:	6803      	ldr	r3, [r0, #0]
  40020c:	3301      	adds	r3, #1
  40020e:	6003      	str	r3, [r0, #0]
}
  400210:	bc30      	pop	{r4, r5}
  400212:	4770      	bx	lr

00400214 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400214:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400216:	6842      	ldr	r2, [r0, #4]
  400218:	6881      	ldr	r1, [r0, #8]
  40021a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  40021c:	6882      	ldr	r2, [r0, #8]
  40021e:	6841      	ldr	r1, [r0, #4]
  400220:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400222:	685a      	ldr	r2, [r3, #4]
  400224:	4290      	cmp	r0, r2
  400226:	d005      	beq.n	400234 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400228:	2200      	movs	r2, #0
  40022a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  40022c:	6818      	ldr	r0, [r3, #0]
  40022e:	3801      	subs	r0, #1
  400230:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  400232:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400234:	6882      	ldr	r2, [r0, #8]
  400236:	605a      	str	r2, [r3, #4]
  400238:	e7f6      	b.n	400228 <uxListRemove+0x14>
	...

0040023c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  40023c:	4b0d      	ldr	r3, [pc, #52]	; (400274 <prvTaskExitError+0x38>)
  40023e:	681b      	ldr	r3, [r3, #0]
  400240:	f1b3 3fff 	cmp.w	r3, #4294967295
  400244:	d00a      	beq.n	40025c <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400246:	f04f 0380 	mov.w	r3, #128	; 0x80
  40024a:	b672      	cpsid	i
  40024c:	f383 8811 	msr	BASEPRI, r3
  400250:	f3bf 8f6f 	isb	sy
  400254:	f3bf 8f4f 	dsb	sy
  400258:	b662      	cpsie	i
  40025a:	e7fe      	b.n	40025a <prvTaskExitError+0x1e>
  40025c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400260:	b672      	cpsid	i
  400262:	f383 8811 	msr	BASEPRI, r3
  400266:	f3bf 8f6f 	isb	sy
  40026a:	f3bf 8f4f 	dsb	sy
  40026e:	b662      	cpsie	i
  400270:	e7fe      	b.n	400270 <prvTaskExitError+0x34>
  400272:	bf00      	nop
  400274:	2040000c 	.word	0x2040000c

00400278 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400278:	4806      	ldr	r0, [pc, #24]	; (400294 <prvPortStartFirstTask+0x1c>)
  40027a:	6800      	ldr	r0, [r0, #0]
  40027c:	6800      	ldr	r0, [r0, #0]
  40027e:	f380 8808 	msr	MSP, r0
  400282:	b662      	cpsie	i
  400284:	b661      	cpsie	f
  400286:	f3bf 8f4f 	dsb	sy
  40028a:	f3bf 8f6f 	isb	sy
  40028e:	df00      	svc	0
  400290:	bf00      	nop
  400292:	0000      	.short	0x0000
  400294:	e000ed08 	.word	0xe000ed08

00400298 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400298:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4002a8 <vPortEnableVFP+0x10>
  40029c:	6801      	ldr	r1, [r0, #0]
  40029e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4002a2:	6001      	str	r1, [r0, #0]
  4002a4:	4770      	bx	lr
  4002a6:	0000      	.short	0x0000
  4002a8:	e000ed88 	.word	0xe000ed88

004002ac <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4002ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4002b0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  4002b4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  4002b8:	4b05      	ldr	r3, [pc, #20]	; (4002d0 <pxPortInitialiseStack+0x24>)
  4002ba:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  4002be:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4002c2:	f06f 0302 	mvn.w	r3, #2
  4002c6:	f840 3c24 	str.w	r3, [r0, #-36]
}
  4002ca:	3844      	subs	r0, #68	; 0x44
  4002cc:	4770      	bx	lr
  4002ce:	bf00      	nop
  4002d0:	0040023d 	.word	0x0040023d

004002d4 <SVC_Handler>:
	__asm volatile (
  4002d4:	4b06      	ldr	r3, [pc, #24]	; (4002f0 <pxCurrentTCBConst2>)
  4002d6:	6819      	ldr	r1, [r3, #0]
  4002d8:	6808      	ldr	r0, [r1, #0]
  4002da:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4002de:	f380 8809 	msr	PSP, r0
  4002e2:	f3bf 8f6f 	isb	sy
  4002e6:	f04f 0000 	mov.w	r0, #0
  4002ea:	f380 8811 	msr	BASEPRI, r0
  4002ee:	4770      	bx	lr

004002f0 <pxCurrentTCBConst2>:
  4002f0:	2040c204 	.word	0x2040c204
  4002f4:	4770      	bx	lr
  4002f6:	bf00      	nop

004002f8 <vPortEnterCritical>:
  4002f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4002fc:	b672      	cpsid	i
  4002fe:	f383 8811 	msr	BASEPRI, r3
  400302:	f3bf 8f6f 	isb	sy
  400306:	f3bf 8f4f 	dsb	sy
  40030a:	b662      	cpsie	i
	uxCriticalNesting++;
  40030c:	4a0b      	ldr	r2, [pc, #44]	; (40033c <vPortEnterCritical+0x44>)
  40030e:	6813      	ldr	r3, [r2, #0]
  400310:	3301      	adds	r3, #1
  400312:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  400314:	2b01      	cmp	r3, #1
  400316:	d10f      	bne.n	400338 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400318:	4b09      	ldr	r3, [pc, #36]	; (400340 <vPortEnterCritical+0x48>)
  40031a:	681b      	ldr	r3, [r3, #0]
  40031c:	f013 0fff 	tst.w	r3, #255	; 0xff
  400320:	d00a      	beq.n	400338 <vPortEnterCritical+0x40>
  400322:	f04f 0380 	mov.w	r3, #128	; 0x80
  400326:	b672      	cpsid	i
  400328:	f383 8811 	msr	BASEPRI, r3
  40032c:	f3bf 8f6f 	isb	sy
  400330:	f3bf 8f4f 	dsb	sy
  400334:	b662      	cpsie	i
  400336:	e7fe      	b.n	400336 <vPortEnterCritical+0x3e>
  400338:	4770      	bx	lr
  40033a:	bf00      	nop
  40033c:	2040000c 	.word	0x2040000c
  400340:	e000ed04 	.word	0xe000ed04

00400344 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  400344:	4b0a      	ldr	r3, [pc, #40]	; (400370 <vPortExitCritical+0x2c>)
  400346:	681b      	ldr	r3, [r3, #0]
  400348:	b953      	cbnz	r3, 400360 <vPortExitCritical+0x1c>
  40034a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40034e:	b672      	cpsid	i
  400350:	f383 8811 	msr	BASEPRI, r3
  400354:	f3bf 8f6f 	isb	sy
  400358:	f3bf 8f4f 	dsb	sy
  40035c:	b662      	cpsie	i
  40035e:	e7fe      	b.n	40035e <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400360:	3b01      	subs	r3, #1
  400362:	4a03      	ldr	r2, [pc, #12]	; (400370 <vPortExitCritical+0x2c>)
  400364:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400366:	b90b      	cbnz	r3, 40036c <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400368:	f383 8811 	msr	BASEPRI, r3
  40036c:	4770      	bx	lr
  40036e:	bf00      	nop
  400370:	2040000c 	.word	0x2040000c

00400374 <PendSV_Handler>:
	__asm volatile
  400374:	f3ef 8009 	mrs	r0, PSP
  400378:	f3bf 8f6f 	isb	sy
  40037c:	4b15      	ldr	r3, [pc, #84]	; (4003d4 <pxCurrentTCBConst>)
  40037e:	681a      	ldr	r2, [r3, #0]
  400380:	f01e 0f10 	tst.w	lr, #16
  400384:	bf08      	it	eq
  400386:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40038a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40038e:	6010      	str	r0, [r2, #0]
  400390:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400394:	f04f 0080 	mov.w	r0, #128	; 0x80
  400398:	b672      	cpsid	i
  40039a:	f380 8811 	msr	BASEPRI, r0
  40039e:	f3bf 8f4f 	dsb	sy
  4003a2:	f3bf 8f6f 	isb	sy
  4003a6:	b662      	cpsie	i
  4003a8:	f001 f8aa 	bl	401500 <vTaskSwitchContext>
  4003ac:	f04f 0000 	mov.w	r0, #0
  4003b0:	f380 8811 	msr	BASEPRI, r0
  4003b4:	bc08      	pop	{r3}
  4003b6:	6819      	ldr	r1, [r3, #0]
  4003b8:	6808      	ldr	r0, [r1, #0]
  4003ba:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4003be:	f01e 0f10 	tst.w	lr, #16
  4003c2:	bf08      	it	eq
  4003c4:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4003c8:	f380 8809 	msr	PSP, r0
  4003cc:	f3bf 8f6f 	isb	sy
  4003d0:	4770      	bx	lr
  4003d2:	bf00      	nop

004003d4 <pxCurrentTCBConst>:
  4003d4:	2040c204 	.word	0x2040c204
  4003d8:	4770      	bx	lr
  4003da:	bf00      	nop

004003dc <SysTick_Handler>:
{
  4003dc:	b508      	push	{r3, lr}
	__asm volatile
  4003de:	f3ef 8311 	mrs	r3, BASEPRI
  4003e2:	f04f 0280 	mov.w	r2, #128	; 0x80
  4003e6:	b672      	cpsid	i
  4003e8:	f382 8811 	msr	BASEPRI, r2
  4003ec:	f3bf 8f6f 	isb	sy
  4003f0:	f3bf 8f4f 	dsb	sy
  4003f4:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4003f6:	4b05      	ldr	r3, [pc, #20]	; (40040c <SysTick_Handler+0x30>)
  4003f8:	4798      	blx	r3
  4003fa:	b118      	cbz	r0, 400404 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4003fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400400:	4b03      	ldr	r3, [pc, #12]	; (400410 <SysTick_Handler+0x34>)
  400402:	601a      	str	r2, [r3, #0]
	__asm volatile
  400404:	2300      	movs	r3, #0
  400406:	f383 8811 	msr	BASEPRI, r3
  40040a:	bd08      	pop	{r3, pc}
  40040c:	0040116d 	.word	0x0040116d
  400410:	e000ed04 	.word	0xe000ed04

00400414 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400414:	4a03      	ldr	r2, [pc, #12]	; (400424 <vPortSetupTimerInterrupt+0x10>)
  400416:	4b04      	ldr	r3, [pc, #16]	; (400428 <vPortSetupTimerInterrupt+0x14>)
  400418:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40041a:	2207      	movs	r2, #7
  40041c:	3b04      	subs	r3, #4
  40041e:	601a      	str	r2, [r3, #0]
  400420:	4770      	bx	lr
  400422:	bf00      	nop
  400424:	000927bf 	.word	0x000927bf
  400428:	e000e014 	.word	0xe000e014

0040042c <xPortStartScheduler>:
{
  40042c:	b500      	push	{lr}
  40042e:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400430:	4b25      	ldr	r3, [pc, #148]	; (4004c8 <xPortStartScheduler+0x9c>)
  400432:	781a      	ldrb	r2, [r3, #0]
  400434:	b2d2      	uxtb	r2, r2
  400436:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400438:	22ff      	movs	r2, #255	; 0xff
  40043a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  40043c:	781b      	ldrb	r3, [r3, #0]
  40043e:	b2db      	uxtb	r3, r3
  400440:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400444:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400448:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40044c:	4a1f      	ldr	r2, [pc, #124]	; (4004cc <xPortStartScheduler+0xa0>)
  40044e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400450:	2207      	movs	r2, #7
  400452:	4b1f      	ldr	r3, [pc, #124]	; (4004d0 <xPortStartScheduler+0xa4>)
  400454:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400456:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40045a:	f013 0f80 	tst.w	r3, #128	; 0x80
  40045e:	d010      	beq.n	400482 <xPortStartScheduler+0x56>
  400460:	2206      	movs	r2, #6
  400462:	e000      	b.n	400466 <xPortStartScheduler+0x3a>
  400464:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400466:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40046a:	005b      	lsls	r3, r3, #1
  40046c:	b2db      	uxtb	r3, r3
  40046e:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400472:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400476:	1e51      	subs	r1, r2, #1
  400478:	f013 0f80 	tst.w	r3, #128	; 0x80
  40047c:	d1f2      	bne.n	400464 <xPortStartScheduler+0x38>
  40047e:	4b14      	ldr	r3, [pc, #80]	; (4004d0 <xPortStartScheduler+0xa4>)
  400480:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400482:	4a13      	ldr	r2, [pc, #76]	; (4004d0 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400484:	6813      	ldr	r3, [r2, #0]
  400486:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400488:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40048c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40048e:	9b01      	ldr	r3, [sp, #4]
  400490:	b2db      	uxtb	r3, r3
  400492:	4a0d      	ldr	r2, [pc, #52]	; (4004c8 <xPortStartScheduler+0x9c>)
  400494:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400496:	4b0f      	ldr	r3, [pc, #60]	; (4004d4 <xPortStartScheduler+0xa8>)
  400498:	681a      	ldr	r2, [r3, #0]
  40049a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  40049e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4004a0:	681a      	ldr	r2, [r3, #0]
  4004a2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4004a6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4004a8:	4b0b      	ldr	r3, [pc, #44]	; (4004d8 <xPortStartScheduler+0xac>)
  4004aa:	4798      	blx	r3
	uxCriticalNesting = 0;
  4004ac:	2200      	movs	r2, #0
  4004ae:	4b0b      	ldr	r3, [pc, #44]	; (4004dc <xPortStartScheduler+0xb0>)
  4004b0:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  4004b2:	4b0b      	ldr	r3, [pc, #44]	; (4004e0 <xPortStartScheduler+0xb4>)
  4004b4:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4004b6:	4a0b      	ldr	r2, [pc, #44]	; (4004e4 <xPortStartScheduler+0xb8>)
  4004b8:	6813      	ldr	r3, [r2, #0]
  4004ba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4004be:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4004c0:	4b09      	ldr	r3, [pc, #36]	; (4004e8 <xPortStartScheduler+0xbc>)
  4004c2:	4798      	blx	r3
	prvTaskExitError();
  4004c4:	4b09      	ldr	r3, [pc, #36]	; (4004ec <xPortStartScheduler+0xc0>)
  4004c6:	4798      	blx	r3
  4004c8:	e000e400 	.word	0xe000e400
  4004cc:	204009f4 	.word	0x204009f4
  4004d0:	204009f8 	.word	0x204009f8
  4004d4:	e000ed20 	.word	0xe000ed20
  4004d8:	00400415 	.word	0x00400415
  4004dc:	2040000c 	.word	0x2040000c
  4004e0:	00400299 	.word	0x00400299
  4004e4:	e000ef34 	.word	0xe000ef34
  4004e8:	00400279 	.word	0x00400279
  4004ec:	0040023d 	.word	0x0040023d

004004f0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  4004f0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4004f4:	2b0f      	cmp	r3, #15
  4004f6:	d911      	bls.n	40051c <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4004f8:	4a12      	ldr	r2, [pc, #72]	; (400544 <vPortValidateInterruptPriority+0x54>)
  4004fa:	5c9b      	ldrb	r3, [r3, r2]
  4004fc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4004fe:	4a12      	ldr	r2, [pc, #72]	; (400548 <vPortValidateInterruptPriority+0x58>)
  400500:	7812      	ldrb	r2, [r2, #0]
  400502:	429a      	cmp	r2, r3
  400504:	d90a      	bls.n	40051c <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  400506:	f04f 0380 	mov.w	r3, #128	; 0x80
  40050a:	b672      	cpsid	i
  40050c:	f383 8811 	msr	BASEPRI, r3
  400510:	f3bf 8f6f 	isb	sy
  400514:	f3bf 8f4f 	dsb	sy
  400518:	b662      	cpsie	i
  40051a:	e7fe      	b.n	40051a <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  40051c:	4b0b      	ldr	r3, [pc, #44]	; (40054c <vPortValidateInterruptPriority+0x5c>)
  40051e:	681b      	ldr	r3, [r3, #0]
  400520:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400524:	4a0a      	ldr	r2, [pc, #40]	; (400550 <vPortValidateInterruptPriority+0x60>)
  400526:	6812      	ldr	r2, [r2, #0]
  400528:	4293      	cmp	r3, r2
  40052a:	d90a      	bls.n	400542 <vPortValidateInterruptPriority+0x52>
  40052c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400530:	b672      	cpsid	i
  400532:	f383 8811 	msr	BASEPRI, r3
  400536:	f3bf 8f6f 	isb	sy
  40053a:	f3bf 8f4f 	dsb	sy
  40053e:	b662      	cpsie	i
  400540:	e7fe      	b.n	400540 <vPortValidateInterruptPriority+0x50>
  400542:	4770      	bx	lr
  400544:	e000e3f0 	.word	0xe000e3f0
  400548:	204009f4 	.word	0x204009f4
  40054c:	e000ed0c 	.word	0xe000ed0c
  400550:	204009f8 	.word	0x204009f8

00400554 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400554:	b538      	push	{r3, r4, r5, lr}
  400556:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  400558:	f010 0f07 	tst.w	r0, #7
  40055c:	d002      	beq.n	400564 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40055e:	f020 0407 	bic.w	r4, r0, #7
  400562:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  400564:	4b11      	ldr	r3, [pc, #68]	; (4005ac <pvPortMalloc+0x58>)
  400566:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  400568:	4b11      	ldr	r3, [pc, #68]	; (4005b0 <pvPortMalloc+0x5c>)
  40056a:	681b      	ldr	r3, [r3, #0]
  40056c:	b193      	cbz	r3, 400594 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  40056e:	4b11      	ldr	r3, [pc, #68]	; (4005b4 <pvPortMalloc+0x60>)
  400570:	681b      	ldr	r3, [r3, #0]
  400572:	441c      	add	r4, r3
  400574:	42a3      	cmp	r3, r4
  400576:	d213      	bcs.n	4005a0 <pvPortMalloc+0x4c>
  400578:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  40057c:	4294      	cmp	r4, r2
  40057e:	d80f      	bhi.n	4005a0 <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  400580:	4a0b      	ldr	r2, [pc, #44]	; (4005b0 <pvPortMalloc+0x5c>)
  400582:	6815      	ldr	r5, [r2, #0]
  400584:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  400586:	4b0b      	ldr	r3, [pc, #44]	; (4005b4 <pvPortMalloc+0x60>)
  400588:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  40058a:	4b0b      	ldr	r3, [pc, #44]	; (4005b8 <pvPortMalloc+0x64>)
  40058c:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40058e:	b14d      	cbz	r5, 4005a4 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  400590:	4628      	mov	r0, r5
  400592:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  400594:	4b09      	ldr	r3, [pc, #36]	; (4005bc <pvPortMalloc+0x68>)
  400596:	f023 0307 	bic.w	r3, r3, #7
  40059a:	4a05      	ldr	r2, [pc, #20]	; (4005b0 <pvPortMalloc+0x5c>)
  40059c:	6013      	str	r3, [r2, #0]
  40059e:	e7e6      	b.n	40056e <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  4005a0:	4b05      	ldr	r3, [pc, #20]	; (4005b8 <pvPortMalloc+0x64>)
  4005a2:	4798      	blx	r3
			vApplicationMallocFailedHook();
  4005a4:	4b06      	ldr	r3, [pc, #24]	; (4005c0 <pvPortMalloc+0x6c>)
  4005a6:	4798      	blx	r3
  4005a8:	2500      	movs	r5, #0
	return pvReturn;
  4005aa:	e7f1      	b.n	400590 <pvPortMalloc+0x3c>
  4005ac:	00401151 	.word	0x00401151
  4005b0:	204009fc 	.word	0x204009fc
  4005b4:	2040c200 	.word	0x2040c200
  4005b8:	004012b9 	.word	0x004012b9
  4005bc:	20400a08 	.word	0x20400a08
  4005c0:	00405a0b 	.word	0x00405a0b

004005c4 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  4005c4:	b150      	cbz	r0, 4005dc <vPortFree+0x18>
  4005c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4005ca:	b672      	cpsid	i
  4005cc:	f383 8811 	msr	BASEPRI, r3
  4005d0:	f3bf 8f6f 	isb	sy
  4005d4:	f3bf 8f4f 	dsb	sy
  4005d8:	b662      	cpsie	i
  4005da:	e7fe      	b.n	4005da <vPortFree+0x16>
  4005dc:	4770      	bx	lr
	...

004005e0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  4005e0:	b538      	push	{r3, r4, r5, lr}
  4005e2:	4604      	mov	r4, r0
  4005e4:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4005e6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4005e8:	b95a      	cbnz	r2, 400602 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4005ea:	6803      	ldr	r3, [r0, #0]
  4005ec:	2b00      	cmp	r3, #0
  4005ee:	d12e      	bne.n	40064e <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4005f0:	6840      	ldr	r0, [r0, #4]
  4005f2:	4b1b      	ldr	r3, [pc, #108]	; (400660 <prvCopyDataToQueue+0x80>)
  4005f4:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4005f6:	2300      	movs	r3, #0
  4005f8:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4005fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4005fc:	3301      	adds	r3, #1
  4005fe:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  400600:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  400602:	b96d      	cbnz	r5, 400620 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  400604:	6880      	ldr	r0, [r0, #8]
  400606:	4b17      	ldr	r3, [pc, #92]	; (400664 <prvCopyDataToQueue+0x84>)
  400608:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40060a:	68a3      	ldr	r3, [r4, #8]
  40060c:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40060e:	4413      	add	r3, r2
  400610:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400612:	6862      	ldr	r2, [r4, #4]
  400614:	4293      	cmp	r3, r2
  400616:	d31c      	bcc.n	400652 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400618:	6823      	ldr	r3, [r4, #0]
  40061a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  40061c:	2000      	movs	r0, #0
  40061e:	e7ec      	b.n	4005fa <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400620:	68c0      	ldr	r0, [r0, #12]
  400622:	4b10      	ldr	r3, [pc, #64]	; (400664 <prvCopyDataToQueue+0x84>)
  400624:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  400626:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400628:	425b      	negs	r3, r3
  40062a:	68e2      	ldr	r2, [r4, #12]
  40062c:	441a      	add	r2, r3
  40062e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400630:	6821      	ldr	r1, [r4, #0]
  400632:	428a      	cmp	r2, r1
  400634:	d202      	bcs.n	40063c <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400636:	6862      	ldr	r2, [r4, #4]
  400638:	4413      	add	r3, r2
  40063a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  40063c:	2d02      	cmp	r5, #2
  40063e:	d10a      	bne.n	400656 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400640:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400642:	b153      	cbz	r3, 40065a <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  400644:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400646:	3b01      	subs	r3, #1
  400648:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  40064a:	2000      	movs	r0, #0
  40064c:	e7d5      	b.n	4005fa <prvCopyDataToQueue+0x1a>
  40064e:	2000      	movs	r0, #0
  400650:	e7d3      	b.n	4005fa <prvCopyDataToQueue+0x1a>
  400652:	2000      	movs	r0, #0
  400654:	e7d1      	b.n	4005fa <prvCopyDataToQueue+0x1a>
  400656:	2000      	movs	r0, #0
  400658:	e7cf      	b.n	4005fa <prvCopyDataToQueue+0x1a>
  40065a:	2000      	movs	r0, #0
  40065c:	e7cd      	b.n	4005fa <prvCopyDataToQueue+0x1a>
  40065e:	bf00      	nop
  400660:	00401901 	.word	0x00401901
  400664:	00405d61 	.word	0x00405d61

00400668 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400668:	b530      	push	{r4, r5, lr}
  40066a:	b083      	sub	sp, #12
  40066c:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  40066e:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400670:	b174      	cbz	r4, 400690 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400672:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400674:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400676:	429a      	cmp	r2, r3
  400678:	d315      	bcc.n	4006a6 <prvNotifyQueueSetContainer+0x3e>
  40067a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40067e:	b672      	cpsid	i
  400680:	f383 8811 	msr	BASEPRI, r3
  400684:	f3bf 8f6f 	isb	sy
  400688:	f3bf 8f4f 	dsb	sy
  40068c:	b662      	cpsie	i
  40068e:	e7fe      	b.n	40068e <prvNotifyQueueSetContainer+0x26>
  400690:	f04f 0380 	mov.w	r3, #128	; 0x80
  400694:	b672      	cpsid	i
  400696:	f383 8811 	msr	BASEPRI, r3
  40069a:	f3bf 8f6f 	isb	sy
  40069e:	f3bf 8f4f 	dsb	sy
  4006a2:	b662      	cpsie	i
  4006a4:	e7fe      	b.n	4006a4 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  4006a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4006a8:	4293      	cmp	r3, r2
  4006aa:	d803      	bhi.n	4006b4 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  4006ac:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4006ae:	4628      	mov	r0, r5
  4006b0:	b003      	add	sp, #12
  4006b2:	bd30      	pop	{r4, r5, pc}
  4006b4:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  4006b6:	a901      	add	r1, sp, #4
  4006b8:	4620      	mov	r0, r4
  4006ba:	4b0b      	ldr	r3, [pc, #44]	; (4006e8 <prvNotifyQueueSetContainer+0x80>)
  4006bc:	4798      	blx	r3
  4006be:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  4006c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4006c2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4006c6:	d10a      	bne.n	4006de <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  4006c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4006ca:	2b00      	cmp	r3, #0
  4006cc:	d0ef      	beq.n	4006ae <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  4006ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4006d2:	4b06      	ldr	r3, [pc, #24]	; (4006ec <prvNotifyQueueSetContainer+0x84>)
  4006d4:	4798      	blx	r3
  4006d6:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  4006d8:	bf18      	it	ne
  4006da:	2501      	movne	r5, #1
  4006dc:	e7e7      	b.n	4006ae <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  4006de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4006e0:	3301      	adds	r3, #1
  4006e2:	64a3      	str	r3, [r4, #72]	; 0x48
  4006e4:	e7e3      	b.n	4006ae <prvNotifyQueueSetContainer+0x46>
  4006e6:	bf00      	nop
  4006e8:	004005e1 	.word	0x004005e1
  4006ec:	004016d5 	.word	0x004016d5

004006f0 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4006f0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4006f2:	b172      	cbz	r2, 400712 <prvCopyDataFromQueue+0x22>
{
  4006f4:	b510      	push	{r4, lr}
  4006f6:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4006f8:	68c4      	ldr	r4, [r0, #12]
  4006fa:	4414      	add	r4, r2
  4006fc:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4006fe:	6840      	ldr	r0, [r0, #4]
  400700:	4284      	cmp	r4, r0
  400702:	d301      	bcc.n	400708 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  400704:	6818      	ldr	r0, [r3, #0]
  400706:	60d8      	str	r0, [r3, #12]
  400708:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  40070a:	68d9      	ldr	r1, [r3, #12]
  40070c:	4b01      	ldr	r3, [pc, #4]	; (400714 <prvCopyDataFromQueue+0x24>)
  40070e:	4798      	blx	r3
  400710:	bd10      	pop	{r4, pc}
  400712:	4770      	bx	lr
  400714:	00405d61 	.word	0x00405d61

00400718 <prvUnlockQueue>:
{
  400718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40071a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  40071c:	4b22      	ldr	r3, [pc, #136]	; (4007a8 <prvUnlockQueue+0x90>)
  40071e:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400720:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400722:	2b00      	cmp	r3, #0
  400724:	dd1b      	ble.n	40075e <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400726:	4d21      	ldr	r5, [pc, #132]	; (4007ac <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  400728:	4f21      	ldr	r7, [pc, #132]	; (4007b0 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40072a:	4e22      	ldr	r6, [pc, #136]	; (4007b4 <prvUnlockQueue+0x9c>)
  40072c:	e00b      	b.n	400746 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40072e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400730:	b1ab      	cbz	r3, 40075e <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400732:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400736:	47b0      	blx	r6
  400738:	b978      	cbnz	r0, 40075a <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  40073a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40073c:	3b01      	subs	r3, #1
  40073e:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400740:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400742:	2b00      	cmp	r3, #0
  400744:	dd0b      	ble.n	40075e <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  400746:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400748:	2b00      	cmp	r3, #0
  40074a:	d0f0      	beq.n	40072e <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40074c:	2100      	movs	r1, #0
  40074e:	4620      	mov	r0, r4
  400750:	47a8      	blx	r5
  400752:	2801      	cmp	r0, #1
  400754:	d1f1      	bne.n	40073a <prvUnlockQueue+0x22>
						vTaskMissedYield();
  400756:	47b8      	blx	r7
  400758:	e7ef      	b.n	40073a <prvUnlockQueue+0x22>
							vTaskMissedYield();
  40075a:	47b8      	blx	r7
  40075c:	e7ed      	b.n	40073a <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  40075e:	f04f 33ff 	mov.w	r3, #4294967295
  400762:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  400764:	4b14      	ldr	r3, [pc, #80]	; (4007b8 <prvUnlockQueue+0xa0>)
  400766:	4798      	blx	r3
	taskENTER_CRITICAL();
  400768:	4b0f      	ldr	r3, [pc, #60]	; (4007a8 <prvUnlockQueue+0x90>)
  40076a:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40076c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40076e:	2b00      	cmp	r3, #0
  400770:	dd14      	ble.n	40079c <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400772:	6923      	ldr	r3, [r4, #16]
  400774:	b193      	cbz	r3, 40079c <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400776:	f104 0610 	add.w	r6, r4, #16
  40077a:	4d0e      	ldr	r5, [pc, #56]	; (4007b4 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  40077c:	4f0c      	ldr	r7, [pc, #48]	; (4007b0 <prvUnlockQueue+0x98>)
  40077e:	e007      	b.n	400790 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  400780:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400782:	3b01      	subs	r3, #1
  400784:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400786:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400788:	2b00      	cmp	r3, #0
  40078a:	dd07      	ble.n	40079c <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40078c:	6923      	ldr	r3, [r4, #16]
  40078e:	b12b      	cbz	r3, 40079c <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400790:	4630      	mov	r0, r6
  400792:	47a8      	blx	r5
  400794:	2800      	cmp	r0, #0
  400796:	d0f3      	beq.n	400780 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  400798:	47b8      	blx	r7
  40079a:	e7f1      	b.n	400780 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  40079c:	f04f 33ff 	mov.w	r3, #4294967295
  4007a0:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  4007a2:	4b05      	ldr	r3, [pc, #20]	; (4007b8 <prvUnlockQueue+0xa0>)
  4007a4:	4798      	blx	r3
  4007a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4007a8:	004002f9 	.word	0x004002f9
  4007ac:	00400669 	.word	0x00400669
  4007b0:	00401831 	.word	0x00401831
  4007b4:	004016d5 	.word	0x004016d5
  4007b8:	00400345 	.word	0x00400345

004007bc <xQueueGenericReset>:
{
  4007bc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  4007be:	b308      	cbz	r0, 400804 <xQueueGenericReset+0x48>
  4007c0:	4604      	mov	r4, r0
  4007c2:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4007c4:	4b1d      	ldr	r3, [pc, #116]	; (40083c <xQueueGenericReset+0x80>)
  4007c6:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4007c8:	6822      	ldr	r2, [r4, #0]
  4007ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4007cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4007ce:	fb03 f301 	mul.w	r3, r3, r1
  4007d2:	18d0      	adds	r0, r2, r3
  4007d4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4007d6:	2000      	movs	r0, #0
  4007d8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4007da:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4007dc:	1a5b      	subs	r3, r3, r1
  4007de:	4413      	add	r3, r2
  4007e0:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4007e2:	f04f 33ff 	mov.w	r3, #4294967295
  4007e6:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4007e8:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  4007ea:	b9fd      	cbnz	r5, 40082c <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4007ec:	6923      	ldr	r3, [r4, #16]
  4007ee:	b12b      	cbz	r3, 4007fc <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4007f0:	f104 0010 	add.w	r0, r4, #16
  4007f4:	4b12      	ldr	r3, [pc, #72]	; (400840 <xQueueGenericReset+0x84>)
  4007f6:	4798      	blx	r3
  4007f8:	2801      	cmp	r0, #1
  4007fa:	d00e      	beq.n	40081a <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  4007fc:	4b11      	ldr	r3, [pc, #68]	; (400844 <xQueueGenericReset+0x88>)
  4007fe:	4798      	blx	r3
}
  400800:	2001      	movs	r0, #1
  400802:	bd38      	pop	{r3, r4, r5, pc}
  400804:	f04f 0380 	mov.w	r3, #128	; 0x80
  400808:	b672      	cpsid	i
  40080a:	f383 8811 	msr	BASEPRI, r3
  40080e:	f3bf 8f6f 	isb	sy
  400812:	f3bf 8f4f 	dsb	sy
  400816:	b662      	cpsie	i
  400818:	e7fe      	b.n	400818 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  40081a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40081e:	4b0a      	ldr	r3, [pc, #40]	; (400848 <xQueueGenericReset+0x8c>)
  400820:	601a      	str	r2, [r3, #0]
  400822:	f3bf 8f4f 	dsb	sy
  400826:	f3bf 8f6f 	isb	sy
  40082a:	e7e7      	b.n	4007fc <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  40082c:	f104 0010 	add.w	r0, r4, #16
  400830:	4d06      	ldr	r5, [pc, #24]	; (40084c <xQueueGenericReset+0x90>)
  400832:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400834:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400838:	47a8      	blx	r5
  40083a:	e7df      	b.n	4007fc <xQueueGenericReset+0x40>
  40083c:	004002f9 	.word	0x004002f9
  400840:	004016d5 	.word	0x004016d5
  400844:	00400345 	.word	0x00400345
  400848:	e000ed04 	.word	0xe000ed04
  40084c:	004001ad 	.word	0x004001ad

00400850 <xQueueGenericCreate>:
{
  400850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400852:	b950      	cbnz	r0, 40086a <xQueueGenericCreate+0x1a>
  400854:	f04f 0380 	mov.w	r3, #128	; 0x80
  400858:	b672      	cpsid	i
  40085a:	f383 8811 	msr	BASEPRI, r3
  40085e:	f3bf 8f6f 	isb	sy
  400862:	f3bf 8f4f 	dsb	sy
  400866:	b662      	cpsie	i
  400868:	e7fe      	b.n	400868 <xQueueGenericCreate+0x18>
  40086a:	4606      	mov	r6, r0
  40086c:	4617      	mov	r7, r2
  40086e:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  400870:	b189      	cbz	r1, 400896 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400872:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400876:	3059      	adds	r0, #89	; 0x59
  400878:	4b12      	ldr	r3, [pc, #72]	; (4008c4 <xQueueGenericCreate+0x74>)
  40087a:	4798      	blx	r3
	if( pxNewQueue != NULL )
  40087c:	4604      	mov	r4, r0
  40087e:	b9e8      	cbnz	r0, 4008bc <xQueueGenericCreate+0x6c>
  400880:	f04f 0380 	mov.w	r3, #128	; 0x80
  400884:	b672      	cpsid	i
  400886:	f383 8811 	msr	BASEPRI, r3
  40088a:	f3bf 8f6f 	isb	sy
  40088e:	f3bf 8f4f 	dsb	sy
  400892:	b662      	cpsie	i
  400894:	e7fe      	b.n	400894 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400896:	2058      	movs	r0, #88	; 0x58
  400898:	4b0a      	ldr	r3, [pc, #40]	; (4008c4 <xQueueGenericCreate+0x74>)
  40089a:	4798      	blx	r3
	if( pxNewQueue != NULL )
  40089c:	4604      	mov	r4, r0
  40089e:	2800      	cmp	r0, #0
  4008a0:	d0ee      	beq.n	400880 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4008a2:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  4008a4:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  4008a6:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  4008a8:	2101      	movs	r1, #1
  4008aa:	4620      	mov	r0, r4
  4008ac:	4b06      	ldr	r3, [pc, #24]	; (4008c8 <xQueueGenericCreate+0x78>)
  4008ae:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  4008b0:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  4008b4:	2300      	movs	r3, #0
  4008b6:	6563      	str	r3, [r4, #84]	; 0x54
}
  4008b8:	4620      	mov	r0, r4
  4008ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  4008bc:	f100 0358 	add.w	r3, r0, #88	; 0x58
  4008c0:	6003      	str	r3, [r0, #0]
  4008c2:	e7ef      	b.n	4008a4 <xQueueGenericCreate+0x54>
  4008c4:	00400555 	.word	0x00400555
  4008c8:	004007bd 	.word	0x004007bd

004008cc <xQueueGenericSend>:
{
  4008cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4008d0:	b085      	sub	sp, #20
  4008d2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4008d4:	b1b8      	cbz	r0, 400906 <xQueueGenericSend+0x3a>
  4008d6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4008d8:	b301      	cbz	r1, 40091c <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4008da:	2b02      	cmp	r3, #2
  4008dc:	d02c      	beq.n	400938 <xQueueGenericSend+0x6c>
  4008de:	461d      	mov	r5, r3
  4008e0:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4008e2:	4b66      	ldr	r3, [pc, #408]	; (400a7c <xQueueGenericSend+0x1b0>)
  4008e4:	4798      	blx	r3
  4008e6:	2800      	cmp	r0, #0
  4008e8:	d134      	bne.n	400954 <xQueueGenericSend+0x88>
  4008ea:	9b01      	ldr	r3, [sp, #4]
  4008ec:	2b00      	cmp	r3, #0
  4008ee:	d038      	beq.n	400962 <xQueueGenericSend+0x96>
  4008f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4008f4:	b672      	cpsid	i
  4008f6:	f383 8811 	msr	BASEPRI, r3
  4008fa:	f3bf 8f6f 	isb	sy
  4008fe:	f3bf 8f4f 	dsb	sy
  400902:	b662      	cpsie	i
  400904:	e7fe      	b.n	400904 <xQueueGenericSend+0x38>
  400906:	f04f 0380 	mov.w	r3, #128	; 0x80
  40090a:	b672      	cpsid	i
  40090c:	f383 8811 	msr	BASEPRI, r3
  400910:	f3bf 8f6f 	isb	sy
  400914:	f3bf 8f4f 	dsb	sy
  400918:	b662      	cpsie	i
  40091a:	e7fe      	b.n	40091a <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40091c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40091e:	2a00      	cmp	r2, #0
  400920:	d0db      	beq.n	4008da <xQueueGenericSend+0xe>
  400922:	f04f 0380 	mov.w	r3, #128	; 0x80
  400926:	b672      	cpsid	i
  400928:	f383 8811 	msr	BASEPRI, r3
  40092c:	f3bf 8f6f 	isb	sy
  400930:	f3bf 8f4f 	dsb	sy
  400934:	b662      	cpsie	i
  400936:	e7fe      	b.n	400936 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400938:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  40093a:	2a01      	cmp	r2, #1
  40093c:	d0cf      	beq.n	4008de <xQueueGenericSend+0x12>
  40093e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400942:	b672      	cpsid	i
  400944:	f383 8811 	msr	BASEPRI, r3
  400948:	f3bf 8f6f 	isb	sy
  40094c:	f3bf 8f4f 	dsb	sy
  400950:	b662      	cpsie	i
  400952:	e7fe      	b.n	400952 <xQueueGenericSend+0x86>
  400954:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  400956:	4e4a      	ldr	r6, [pc, #296]	; (400a80 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  400958:	f8df a150 	ldr.w	sl, [pc, #336]	; 400aac <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  40095c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 400a8c <xQueueGenericSend+0x1c0>
  400960:	e042      	b.n	4009e8 <xQueueGenericSend+0x11c>
  400962:	2700      	movs	r7, #0
  400964:	e7f7      	b.n	400956 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400966:	462a      	mov	r2, r5
  400968:	4641      	mov	r1, r8
  40096a:	4620      	mov	r0, r4
  40096c:	4b45      	ldr	r3, [pc, #276]	; (400a84 <xQueueGenericSend+0x1b8>)
  40096e:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  400970:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400972:	b19b      	cbz	r3, 40099c <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400974:	4629      	mov	r1, r5
  400976:	4620      	mov	r0, r4
  400978:	4b43      	ldr	r3, [pc, #268]	; (400a88 <xQueueGenericSend+0x1bc>)
  40097a:	4798      	blx	r3
  40097c:	2801      	cmp	r0, #1
  40097e:	d107      	bne.n	400990 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  400980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400984:	4b41      	ldr	r3, [pc, #260]	; (400a8c <xQueueGenericSend+0x1c0>)
  400986:	601a      	str	r2, [r3, #0]
  400988:	f3bf 8f4f 	dsb	sy
  40098c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  400990:	4b3f      	ldr	r3, [pc, #252]	; (400a90 <xQueueGenericSend+0x1c4>)
  400992:	4798      	blx	r3
				return pdPASS;
  400994:	2001      	movs	r0, #1
}
  400996:	b005      	add	sp, #20
  400998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40099c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40099e:	b173      	cbz	r3, 4009be <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4009a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4009a4:	4b3b      	ldr	r3, [pc, #236]	; (400a94 <xQueueGenericSend+0x1c8>)
  4009a6:	4798      	blx	r3
  4009a8:	2801      	cmp	r0, #1
  4009aa:	d1f1      	bne.n	400990 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  4009ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4009b0:	4b36      	ldr	r3, [pc, #216]	; (400a8c <xQueueGenericSend+0x1c0>)
  4009b2:	601a      	str	r2, [r3, #0]
  4009b4:	f3bf 8f4f 	dsb	sy
  4009b8:	f3bf 8f6f 	isb	sy
  4009bc:	e7e8      	b.n	400990 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  4009be:	2800      	cmp	r0, #0
  4009c0:	d0e6      	beq.n	400990 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4009c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4009c6:	4b31      	ldr	r3, [pc, #196]	; (400a8c <xQueueGenericSend+0x1c0>)
  4009c8:	601a      	str	r2, [r3, #0]
  4009ca:	f3bf 8f4f 	dsb	sy
  4009ce:	f3bf 8f6f 	isb	sy
  4009d2:	e7dd      	b.n	400990 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  4009d4:	4b2e      	ldr	r3, [pc, #184]	; (400a90 <xQueueGenericSend+0x1c4>)
  4009d6:	4798      	blx	r3
					return errQUEUE_FULL;
  4009d8:	2000      	movs	r0, #0
  4009da:	e7dc      	b.n	400996 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  4009dc:	4620      	mov	r0, r4
  4009de:	4b2e      	ldr	r3, [pc, #184]	; (400a98 <xQueueGenericSend+0x1cc>)
  4009e0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4009e2:	4b2e      	ldr	r3, [pc, #184]	; (400a9c <xQueueGenericSend+0x1d0>)
  4009e4:	4798      	blx	r3
  4009e6:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  4009e8:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4009ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4009ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4009ee:	429a      	cmp	r2, r3
  4009f0:	d3b9      	bcc.n	400966 <xQueueGenericSend+0x9a>
  4009f2:	2d02      	cmp	r5, #2
  4009f4:	d0b7      	beq.n	400966 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  4009f6:	9b01      	ldr	r3, [sp, #4]
  4009f8:	2b00      	cmp	r3, #0
  4009fa:	d0eb      	beq.n	4009d4 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  4009fc:	b90f      	cbnz	r7, 400a02 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  4009fe:	a802      	add	r0, sp, #8
  400a00:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  400a02:	4b23      	ldr	r3, [pc, #140]	; (400a90 <xQueueGenericSend+0x1c4>)
  400a04:	4798      	blx	r3
		vTaskSuspendAll();
  400a06:	4b26      	ldr	r3, [pc, #152]	; (400aa0 <xQueueGenericSend+0x1d4>)
  400a08:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400a0a:	47b0      	blx	r6
  400a0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400a12:	d101      	bne.n	400a18 <xQueueGenericSend+0x14c>
  400a14:	2300      	movs	r3, #0
  400a16:	6463      	str	r3, [r4, #68]	; 0x44
  400a18:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
  400a1e:	d101      	bne.n	400a24 <xQueueGenericSend+0x158>
  400a20:	2300      	movs	r3, #0
  400a22:	64a3      	str	r3, [r4, #72]	; 0x48
  400a24:	4b1a      	ldr	r3, [pc, #104]	; (400a90 <xQueueGenericSend+0x1c4>)
  400a26:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400a28:	a901      	add	r1, sp, #4
  400a2a:	a802      	add	r0, sp, #8
  400a2c:	4b1d      	ldr	r3, [pc, #116]	; (400aa4 <xQueueGenericSend+0x1d8>)
  400a2e:	4798      	blx	r3
  400a30:	b9e0      	cbnz	r0, 400a6c <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  400a32:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400a34:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400a38:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  400a3a:	4b15      	ldr	r3, [pc, #84]	; (400a90 <xQueueGenericSend+0x1c4>)
  400a3c:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400a3e:	45bb      	cmp	fp, r7
  400a40:	d1cc      	bne.n	4009dc <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400a42:	9901      	ldr	r1, [sp, #4]
  400a44:	f104 0010 	add.w	r0, r4, #16
  400a48:	4b17      	ldr	r3, [pc, #92]	; (400aa8 <xQueueGenericSend+0x1dc>)
  400a4a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400a4c:	4620      	mov	r0, r4
  400a4e:	4b12      	ldr	r3, [pc, #72]	; (400a98 <xQueueGenericSend+0x1cc>)
  400a50:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400a52:	4b12      	ldr	r3, [pc, #72]	; (400a9c <xQueueGenericSend+0x1d0>)
  400a54:	4798      	blx	r3
  400a56:	2800      	cmp	r0, #0
  400a58:	d1c5      	bne.n	4009e6 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  400a5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400a5e:	f8c9 3000 	str.w	r3, [r9]
  400a62:	f3bf 8f4f 	dsb	sy
  400a66:	f3bf 8f6f 	isb	sy
  400a6a:	e7bc      	b.n	4009e6 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  400a6c:	4620      	mov	r0, r4
  400a6e:	4b0a      	ldr	r3, [pc, #40]	; (400a98 <xQueueGenericSend+0x1cc>)
  400a70:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400a72:	4b0a      	ldr	r3, [pc, #40]	; (400a9c <xQueueGenericSend+0x1d0>)
  400a74:	4798      	blx	r3
			return errQUEUE_FULL;
  400a76:	2000      	movs	r0, #0
  400a78:	e78d      	b.n	400996 <xQueueGenericSend+0xca>
  400a7a:	bf00      	nop
  400a7c:	0040183d 	.word	0x0040183d
  400a80:	004002f9 	.word	0x004002f9
  400a84:	004005e1 	.word	0x004005e1
  400a88:	00400669 	.word	0x00400669
  400a8c:	e000ed04 	.word	0xe000ed04
  400a90:	00400345 	.word	0x00400345
  400a94:	004016d5 	.word	0x004016d5
  400a98:	00400719 	.word	0x00400719
  400a9c:	004012b9 	.word	0x004012b9
  400aa0:	00401151 	.word	0x00401151
  400aa4:	0040179d 	.word	0x0040179d
  400aa8:	004015d1 	.word	0x004015d1
  400aac:	0040176d 	.word	0x0040176d

00400ab0 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  400ab0:	2800      	cmp	r0, #0
  400ab2:	d036      	beq.n	400b22 <xQueueGenericSendFromISR+0x72>
{
  400ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400ab8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400aba:	2900      	cmp	r1, #0
  400abc:	d03c      	beq.n	400b38 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400abe:	2b02      	cmp	r3, #2
  400ac0:	d048      	beq.n	400b54 <xQueueGenericSendFromISR+0xa4>
  400ac2:	461e      	mov	r6, r3
  400ac4:	4615      	mov	r5, r2
  400ac6:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400ac8:	4b35      	ldr	r3, [pc, #212]	; (400ba0 <xQueueGenericSendFromISR+0xf0>)
  400aca:	4798      	blx	r3
	__asm volatile
  400acc:	f3ef 8711 	mrs	r7, BASEPRI
  400ad0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ad4:	b672      	cpsid	i
  400ad6:	f383 8811 	msr	BASEPRI, r3
  400ada:	f3bf 8f6f 	isb	sy
  400ade:	f3bf 8f4f 	dsb	sy
  400ae2:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400ae4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400ae6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400ae8:	429a      	cmp	r2, r3
  400aea:	d301      	bcc.n	400af0 <xQueueGenericSendFromISR+0x40>
  400aec:	2e02      	cmp	r6, #2
  400aee:	d14f      	bne.n	400b90 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400af0:	4632      	mov	r2, r6
  400af2:	4641      	mov	r1, r8
  400af4:	4620      	mov	r0, r4
  400af6:	4b2b      	ldr	r3, [pc, #172]	; (400ba4 <xQueueGenericSendFromISR+0xf4>)
  400af8:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  400afa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400afc:	f1b3 3fff 	cmp.w	r3, #4294967295
  400b00:	d141      	bne.n	400b86 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  400b02:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400b04:	2b00      	cmp	r3, #0
  400b06:	d033      	beq.n	400b70 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400b08:	4631      	mov	r1, r6
  400b0a:	4620      	mov	r0, r4
  400b0c:	4b26      	ldr	r3, [pc, #152]	; (400ba8 <xQueueGenericSendFromISR+0xf8>)
  400b0e:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  400b10:	2d00      	cmp	r5, #0
  400b12:	d03f      	beq.n	400b94 <xQueueGenericSendFromISR+0xe4>
  400b14:	2801      	cmp	r0, #1
  400b16:	d13d      	bne.n	400b94 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  400b18:	6028      	str	r0, [r5, #0]
	__asm volatile
  400b1a:	f387 8811 	msr	BASEPRI, r7
}
  400b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  400b22:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b26:	b672      	cpsid	i
  400b28:	f383 8811 	msr	BASEPRI, r3
  400b2c:	f3bf 8f6f 	isb	sy
  400b30:	f3bf 8f4f 	dsb	sy
  400b34:	b662      	cpsie	i
  400b36:	e7fe      	b.n	400b36 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400b38:	6c00      	ldr	r0, [r0, #64]	; 0x40
  400b3a:	2800      	cmp	r0, #0
  400b3c:	d0bf      	beq.n	400abe <xQueueGenericSendFromISR+0xe>
  400b3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b42:	b672      	cpsid	i
  400b44:	f383 8811 	msr	BASEPRI, r3
  400b48:	f3bf 8f6f 	isb	sy
  400b4c:	f3bf 8f4f 	dsb	sy
  400b50:	b662      	cpsie	i
  400b52:	e7fe      	b.n	400b52 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400b54:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  400b56:	2801      	cmp	r0, #1
  400b58:	d0b3      	beq.n	400ac2 <xQueueGenericSendFromISR+0x12>
  400b5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b5e:	b672      	cpsid	i
  400b60:	f383 8811 	msr	BASEPRI, r3
  400b64:	f3bf 8f6f 	isb	sy
  400b68:	f3bf 8f4f 	dsb	sy
  400b6c:	b662      	cpsie	i
  400b6e:	e7fe      	b.n	400b6e <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400b72:	b18b      	cbz	r3, 400b98 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400b74:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400b78:	4b0c      	ldr	r3, [pc, #48]	; (400bac <xQueueGenericSendFromISR+0xfc>)
  400b7a:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  400b7c:	b175      	cbz	r5, 400b9c <xQueueGenericSendFromISR+0xec>
  400b7e:	b168      	cbz	r0, 400b9c <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  400b80:	2001      	movs	r0, #1
  400b82:	6028      	str	r0, [r5, #0]
  400b84:	e7c9      	b.n	400b1a <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  400b86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400b88:	3301      	adds	r3, #1
  400b8a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  400b8c:	2001      	movs	r0, #1
  400b8e:	e7c4      	b.n	400b1a <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  400b90:	2000      	movs	r0, #0
  400b92:	e7c2      	b.n	400b1a <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  400b94:	2001      	movs	r0, #1
  400b96:	e7c0      	b.n	400b1a <xQueueGenericSendFromISR+0x6a>
  400b98:	2001      	movs	r0, #1
  400b9a:	e7be      	b.n	400b1a <xQueueGenericSendFromISR+0x6a>
  400b9c:	2001      	movs	r0, #1
  400b9e:	e7bc      	b.n	400b1a <xQueueGenericSendFromISR+0x6a>
  400ba0:	004004f1 	.word	0x004004f1
  400ba4:	004005e1 	.word	0x004005e1
  400ba8:	00400669 	.word	0x00400669
  400bac:	004016d5 	.word	0x004016d5

00400bb0 <xQueueGenericReceive>:
{
  400bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400bb4:	b084      	sub	sp, #16
  400bb6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  400bb8:	b198      	cbz	r0, 400be2 <xQueueGenericReceive+0x32>
  400bba:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400bbc:	b1e1      	cbz	r1, 400bf8 <xQueueGenericReceive+0x48>
  400bbe:	4698      	mov	r8, r3
  400bc0:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400bc2:	4b61      	ldr	r3, [pc, #388]	; (400d48 <xQueueGenericReceive+0x198>)
  400bc4:	4798      	blx	r3
  400bc6:	bb28      	cbnz	r0, 400c14 <xQueueGenericReceive+0x64>
  400bc8:	9b01      	ldr	r3, [sp, #4]
  400bca:	b353      	cbz	r3, 400c22 <xQueueGenericReceive+0x72>
  400bcc:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bd0:	b672      	cpsid	i
  400bd2:	f383 8811 	msr	BASEPRI, r3
  400bd6:	f3bf 8f6f 	isb	sy
  400bda:	f3bf 8f4f 	dsb	sy
  400bde:	b662      	cpsie	i
  400be0:	e7fe      	b.n	400be0 <xQueueGenericReceive+0x30>
  400be2:	f04f 0380 	mov.w	r3, #128	; 0x80
  400be6:	b672      	cpsid	i
  400be8:	f383 8811 	msr	BASEPRI, r3
  400bec:	f3bf 8f6f 	isb	sy
  400bf0:	f3bf 8f4f 	dsb	sy
  400bf4:	b662      	cpsie	i
  400bf6:	e7fe      	b.n	400bf6 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400bf8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400bfa:	2a00      	cmp	r2, #0
  400bfc:	d0df      	beq.n	400bbe <xQueueGenericReceive+0xe>
  400bfe:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c02:	b672      	cpsid	i
  400c04:	f383 8811 	msr	BASEPRI, r3
  400c08:	f3bf 8f6f 	isb	sy
  400c0c:	f3bf 8f4f 	dsb	sy
  400c10:	b662      	cpsie	i
  400c12:	e7fe      	b.n	400c12 <xQueueGenericReceive+0x62>
  400c14:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  400c16:	4d4d      	ldr	r5, [pc, #308]	; (400d4c <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  400c18:	f8df a160 	ldr.w	sl, [pc, #352]	; 400d7c <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  400c1c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 400d5c <xQueueGenericReceive+0x1ac>
  400c20:	e04b      	b.n	400cba <xQueueGenericReceive+0x10a>
  400c22:	2600      	movs	r6, #0
  400c24:	e7f7      	b.n	400c16 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  400c26:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  400c28:	4639      	mov	r1, r7
  400c2a:	4620      	mov	r0, r4
  400c2c:	4b48      	ldr	r3, [pc, #288]	; (400d50 <xQueueGenericReceive+0x1a0>)
  400c2e:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  400c30:	f1b8 0f00 	cmp.w	r8, #0
  400c34:	d11d      	bne.n	400c72 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  400c36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400c38:	3b01      	subs	r3, #1
  400c3a:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400c3c:	6823      	ldr	r3, [r4, #0]
  400c3e:	b913      	cbnz	r3, 400c46 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  400c40:	4b44      	ldr	r3, [pc, #272]	; (400d54 <xQueueGenericReceive+0x1a4>)
  400c42:	4798      	blx	r3
  400c44:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400c46:	6923      	ldr	r3, [r4, #16]
  400c48:	b16b      	cbz	r3, 400c66 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400c4a:	f104 0010 	add.w	r0, r4, #16
  400c4e:	4b42      	ldr	r3, [pc, #264]	; (400d58 <xQueueGenericReceive+0x1a8>)
  400c50:	4798      	blx	r3
  400c52:	2801      	cmp	r0, #1
  400c54:	d107      	bne.n	400c66 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  400c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c5a:	4b40      	ldr	r3, [pc, #256]	; (400d5c <xQueueGenericReceive+0x1ac>)
  400c5c:	601a      	str	r2, [r3, #0]
  400c5e:	f3bf 8f4f 	dsb	sy
  400c62:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  400c66:	4b3e      	ldr	r3, [pc, #248]	; (400d60 <xQueueGenericReceive+0x1b0>)
  400c68:	4798      	blx	r3
				return pdPASS;
  400c6a:	2001      	movs	r0, #1
}
  400c6c:	b004      	add	sp, #16
  400c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  400c72:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400c74:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400c76:	2b00      	cmp	r3, #0
  400c78:	d0f5      	beq.n	400c66 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400c7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400c7e:	4b36      	ldr	r3, [pc, #216]	; (400d58 <xQueueGenericReceive+0x1a8>)
  400c80:	4798      	blx	r3
  400c82:	2800      	cmp	r0, #0
  400c84:	d0ef      	beq.n	400c66 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  400c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c8a:	4b34      	ldr	r3, [pc, #208]	; (400d5c <xQueueGenericReceive+0x1ac>)
  400c8c:	601a      	str	r2, [r3, #0]
  400c8e:	f3bf 8f4f 	dsb	sy
  400c92:	f3bf 8f6f 	isb	sy
  400c96:	e7e6      	b.n	400c66 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  400c98:	4b31      	ldr	r3, [pc, #196]	; (400d60 <xQueueGenericReceive+0x1b0>)
  400c9a:	4798      	blx	r3
					return errQUEUE_EMPTY;
  400c9c:	2000      	movs	r0, #0
  400c9e:	e7e5      	b.n	400c6c <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  400ca0:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  400ca2:	6860      	ldr	r0, [r4, #4]
  400ca4:	4b2f      	ldr	r3, [pc, #188]	; (400d64 <xQueueGenericReceive+0x1b4>)
  400ca6:	4798      	blx	r3
						taskEXIT_CRITICAL();
  400ca8:	4b2d      	ldr	r3, [pc, #180]	; (400d60 <xQueueGenericReceive+0x1b0>)
  400caa:	4798      	blx	r3
  400cac:	e030      	b.n	400d10 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  400cae:	4620      	mov	r0, r4
  400cb0:	4b2d      	ldr	r3, [pc, #180]	; (400d68 <xQueueGenericReceive+0x1b8>)
  400cb2:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400cb4:	4b2d      	ldr	r3, [pc, #180]	; (400d6c <xQueueGenericReceive+0x1bc>)
  400cb6:	4798      	blx	r3
  400cb8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  400cba:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400cbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400cbe:	2b00      	cmp	r3, #0
  400cc0:	d1b1      	bne.n	400c26 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  400cc2:	9b01      	ldr	r3, [sp, #4]
  400cc4:	2b00      	cmp	r3, #0
  400cc6:	d0e7      	beq.n	400c98 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  400cc8:	b90e      	cbnz	r6, 400cce <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  400cca:	a802      	add	r0, sp, #8
  400ccc:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  400cce:	4b24      	ldr	r3, [pc, #144]	; (400d60 <xQueueGenericReceive+0x1b0>)
  400cd0:	4798      	blx	r3
		vTaskSuspendAll();
  400cd2:	4b27      	ldr	r3, [pc, #156]	; (400d70 <xQueueGenericReceive+0x1c0>)
  400cd4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400cd6:	47a8      	blx	r5
  400cd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400cda:	f1b3 3fff 	cmp.w	r3, #4294967295
  400cde:	d101      	bne.n	400ce4 <xQueueGenericReceive+0x134>
  400ce0:	2300      	movs	r3, #0
  400ce2:	6463      	str	r3, [r4, #68]	; 0x44
  400ce4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
  400cea:	d101      	bne.n	400cf0 <xQueueGenericReceive+0x140>
  400cec:	2300      	movs	r3, #0
  400cee:	64a3      	str	r3, [r4, #72]	; 0x48
  400cf0:	4b1b      	ldr	r3, [pc, #108]	; (400d60 <xQueueGenericReceive+0x1b0>)
  400cf2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400cf4:	a901      	add	r1, sp, #4
  400cf6:	a802      	add	r0, sp, #8
  400cf8:	4b1e      	ldr	r3, [pc, #120]	; (400d74 <xQueueGenericReceive+0x1c4>)
  400cfa:	4798      	blx	r3
  400cfc:	b9e8      	cbnz	r0, 400d3a <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  400cfe:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  400d00:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  400d02:	4b17      	ldr	r3, [pc, #92]	; (400d60 <xQueueGenericReceive+0x1b0>)
  400d04:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400d06:	2e00      	cmp	r6, #0
  400d08:	d1d1      	bne.n	400cae <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400d0a:	6823      	ldr	r3, [r4, #0]
  400d0c:	2b00      	cmp	r3, #0
  400d0e:	d0c7      	beq.n	400ca0 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400d10:	9901      	ldr	r1, [sp, #4]
  400d12:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400d16:	4b18      	ldr	r3, [pc, #96]	; (400d78 <xQueueGenericReceive+0x1c8>)
  400d18:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400d1a:	4620      	mov	r0, r4
  400d1c:	4b12      	ldr	r3, [pc, #72]	; (400d68 <xQueueGenericReceive+0x1b8>)
  400d1e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400d20:	4b12      	ldr	r3, [pc, #72]	; (400d6c <xQueueGenericReceive+0x1bc>)
  400d22:	4798      	blx	r3
  400d24:	2800      	cmp	r0, #0
  400d26:	d1c7      	bne.n	400cb8 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  400d28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400d2c:	f8c9 3000 	str.w	r3, [r9]
  400d30:	f3bf 8f4f 	dsb	sy
  400d34:	f3bf 8f6f 	isb	sy
  400d38:	e7be      	b.n	400cb8 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  400d3a:	4620      	mov	r0, r4
  400d3c:	4b0a      	ldr	r3, [pc, #40]	; (400d68 <xQueueGenericReceive+0x1b8>)
  400d3e:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400d40:	4b0a      	ldr	r3, [pc, #40]	; (400d6c <xQueueGenericReceive+0x1bc>)
  400d42:	4798      	blx	r3
			return errQUEUE_EMPTY;
  400d44:	2000      	movs	r0, #0
  400d46:	e791      	b.n	400c6c <xQueueGenericReceive+0xbc>
  400d48:	0040183d 	.word	0x0040183d
  400d4c:	004002f9 	.word	0x004002f9
  400d50:	004006f1 	.word	0x004006f1
  400d54:	004019bd 	.word	0x004019bd
  400d58:	004016d5 	.word	0x004016d5
  400d5c:	e000ed04 	.word	0xe000ed04
  400d60:	00400345 	.word	0x00400345
  400d64:	0040185d 	.word	0x0040185d
  400d68:	00400719 	.word	0x00400719
  400d6c:	004012b9 	.word	0x004012b9
  400d70:	00401151 	.word	0x00401151
  400d74:	0040179d 	.word	0x0040179d
  400d78:	004015d1 	.word	0x004015d1
  400d7c:	0040176d 	.word	0x0040176d

00400d80 <vQueueAddToRegistry>:
	{
  400d80:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  400d82:	4b0b      	ldr	r3, [pc, #44]	; (400db0 <vQueueAddToRegistry+0x30>)
  400d84:	681b      	ldr	r3, [r3, #0]
  400d86:	b153      	cbz	r3, 400d9e <vQueueAddToRegistry+0x1e>
  400d88:	2301      	movs	r3, #1
  400d8a:	4c09      	ldr	r4, [pc, #36]	; (400db0 <vQueueAddToRegistry+0x30>)
  400d8c:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  400d90:	b132      	cbz	r2, 400da0 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  400d92:	3301      	adds	r3, #1
  400d94:	2b08      	cmp	r3, #8
  400d96:	d1f9      	bne.n	400d8c <vQueueAddToRegistry+0xc>
	}
  400d98:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d9c:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  400d9e:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  400da0:	4a03      	ldr	r2, [pc, #12]	; (400db0 <vQueueAddToRegistry+0x30>)
  400da2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  400da6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  400daa:	6058      	str	r0, [r3, #4]
				break;
  400dac:	e7f4      	b.n	400d98 <vQueueAddToRegistry+0x18>
  400dae:	bf00      	nop
  400db0:	2040c9a0 	.word	0x2040c9a0

00400db4 <vQueueWaitForMessageRestricted>:
	{
  400db4:	b570      	push	{r4, r5, r6, lr}
  400db6:	4604      	mov	r4, r0
  400db8:	460d      	mov	r5, r1
  400dba:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  400dbc:	4b0f      	ldr	r3, [pc, #60]	; (400dfc <vQueueWaitForMessageRestricted+0x48>)
  400dbe:	4798      	blx	r3
  400dc0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400dc6:	d00b      	beq.n	400de0 <vQueueWaitForMessageRestricted+0x2c>
  400dc8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400dca:	f1b3 3fff 	cmp.w	r3, #4294967295
  400dce:	d00a      	beq.n	400de6 <vQueueWaitForMessageRestricted+0x32>
  400dd0:	4b0b      	ldr	r3, [pc, #44]	; (400e00 <vQueueWaitForMessageRestricted+0x4c>)
  400dd2:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  400dd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400dd6:	b14b      	cbz	r3, 400dec <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  400dd8:	4620      	mov	r0, r4
  400dda:	4b0a      	ldr	r3, [pc, #40]	; (400e04 <vQueueWaitForMessageRestricted+0x50>)
  400ddc:	4798      	blx	r3
  400dde:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  400de0:	2300      	movs	r3, #0
  400de2:	6463      	str	r3, [r4, #68]	; 0x44
  400de4:	e7f0      	b.n	400dc8 <vQueueWaitForMessageRestricted+0x14>
  400de6:	2300      	movs	r3, #0
  400de8:	64a3      	str	r3, [r4, #72]	; 0x48
  400dea:	e7f1      	b.n	400dd0 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  400dec:	4632      	mov	r2, r6
  400dee:	4629      	mov	r1, r5
  400df0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400df4:	4b04      	ldr	r3, [pc, #16]	; (400e08 <vQueueWaitForMessageRestricted+0x54>)
  400df6:	4798      	blx	r3
  400df8:	e7ee      	b.n	400dd8 <vQueueWaitForMessageRestricted+0x24>
  400dfa:	bf00      	nop
  400dfc:	004002f9 	.word	0x004002f9
  400e00:	00400345 	.word	0x00400345
  400e04:	00400719 	.word	0x00400719
  400e08:	00401655 	.word	0x00401655

00400e0c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  400e0c:	4b08      	ldr	r3, [pc, #32]	; (400e30 <prvResetNextTaskUnblockTime+0x24>)
  400e0e:	681b      	ldr	r3, [r3, #0]
  400e10:	681b      	ldr	r3, [r3, #0]
  400e12:	b13b      	cbz	r3, 400e24 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  400e14:	4b06      	ldr	r3, [pc, #24]	; (400e30 <prvResetNextTaskUnblockTime+0x24>)
  400e16:	681b      	ldr	r3, [r3, #0]
  400e18:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  400e1a:	68db      	ldr	r3, [r3, #12]
  400e1c:	685a      	ldr	r2, [r3, #4]
  400e1e:	4b05      	ldr	r3, [pc, #20]	; (400e34 <prvResetNextTaskUnblockTime+0x28>)
  400e20:	601a      	str	r2, [r3, #0]
  400e22:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  400e24:	f04f 32ff 	mov.w	r2, #4294967295
  400e28:	4b02      	ldr	r3, [pc, #8]	; (400e34 <prvResetNextTaskUnblockTime+0x28>)
  400e2a:	601a      	str	r2, [r3, #0]
  400e2c:	4770      	bx	lr
  400e2e:	bf00      	nop
  400e30:	2040c208 	.word	0x2040c208
  400e34:	2040c2b4 	.word	0x2040c2b4

00400e38 <prvAddCurrentTaskToDelayedList>:
{
  400e38:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  400e3a:	4b0f      	ldr	r3, [pc, #60]	; (400e78 <prvAddCurrentTaskToDelayedList+0x40>)
  400e3c:	681b      	ldr	r3, [r3, #0]
  400e3e:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  400e40:	4b0e      	ldr	r3, [pc, #56]	; (400e7c <prvAddCurrentTaskToDelayedList+0x44>)
  400e42:	681b      	ldr	r3, [r3, #0]
  400e44:	4298      	cmp	r0, r3
  400e46:	d30e      	bcc.n	400e66 <prvAddCurrentTaskToDelayedList+0x2e>
  400e48:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  400e4a:	4b0d      	ldr	r3, [pc, #52]	; (400e80 <prvAddCurrentTaskToDelayedList+0x48>)
  400e4c:	6818      	ldr	r0, [r3, #0]
  400e4e:	4b0a      	ldr	r3, [pc, #40]	; (400e78 <prvAddCurrentTaskToDelayedList+0x40>)
  400e50:	6819      	ldr	r1, [r3, #0]
  400e52:	3104      	adds	r1, #4
  400e54:	4b0b      	ldr	r3, [pc, #44]	; (400e84 <prvAddCurrentTaskToDelayedList+0x4c>)
  400e56:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  400e58:	4b0b      	ldr	r3, [pc, #44]	; (400e88 <prvAddCurrentTaskToDelayedList+0x50>)
  400e5a:	681b      	ldr	r3, [r3, #0]
  400e5c:	429c      	cmp	r4, r3
  400e5e:	d201      	bcs.n	400e64 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  400e60:	4b09      	ldr	r3, [pc, #36]	; (400e88 <prvAddCurrentTaskToDelayedList+0x50>)
  400e62:	601c      	str	r4, [r3, #0]
  400e64:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  400e66:	4b09      	ldr	r3, [pc, #36]	; (400e8c <prvAddCurrentTaskToDelayedList+0x54>)
  400e68:	6818      	ldr	r0, [r3, #0]
  400e6a:	4b03      	ldr	r3, [pc, #12]	; (400e78 <prvAddCurrentTaskToDelayedList+0x40>)
  400e6c:	6819      	ldr	r1, [r3, #0]
  400e6e:	3104      	adds	r1, #4
  400e70:	4b04      	ldr	r3, [pc, #16]	; (400e84 <prvAddCurrentTaskToDelayedList+0x4c>)
  400e72:	4798      	blx	r3
  400e74:	bd10      	pop	{r4, pc}
  400e76:	bf00      	nop
  400e78:	2040c204 	.word	0x2040c204
  400e7c:	2040c2fc 	.word	0x2040c2fc
  400e80:	2040c208 	.word	0x2040c208
  400e84:	004001e1 	.word	0x004001e1
  400e88:	2040c2b4 	.word	0x2040c2b4
  400e8c:	2040c20c 	.word	0x2040c20c

00400e90 <xTaskGenericCreate>:
{
  400e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400e94:	b083      	sub	sp, #12
  400e96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  400e98:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  400e9c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  400e9e:	b160      	cbz	r0, 400eba <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  400ea0:	2d04      	cmp	r5, #4
  400ea2:	d915      	bls.n	400ed0 <xTaskGenericCreate+0x40>
  400ea4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ea8:	b672      	cpsid	i
  400eaa:	f383 8811 	msr	BASEPRI, r3
  400eae:	f3bf 8f6f 	isb	sy
  400eb2:	f3bf 8f4f 	dsb	sy
  400eb6:	b662      	cpsie	i
  400eb8:	e7fe      	b.n	400eb8 <xTaskGenericCreate+0x28>
  400eba:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ebe:	b672      	cpsid	i
  400ec0:	f383 8811 	msr	BASEPRI, r3
  400ec4:	f3bf 8f6f 	isb	sy
  400ec8:	f3bf 8f4f 	dsb	sy
  400ecc:	b662      	cpsie	i
  400ece:	e7fe      	b.n	400ece <xTaskGenericCreate+0x3e>
  400ed0:	9001      	str	r0, [sp, #4]
  400ed2:	4698      	mov	r8, r3
  400ed4:	4691      	mov	r9, r2
  400ed6:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400ed8:	b936      	cbnz	r6, 400ee8 <xTaskGenericCreate+0x58>
  400eda:	0090      	lsls	r0, r2, #2
  400edc:	4b62      	ldr	r3, [pc, #392]	; (401068 <xTaskGenericCreate+0x1d8>)
  400ede:	4798      	blx	r3
		if( pxStack != NULL )
  400ee0:	4606      	mov	r6, r0
  400ee2:	2800      	cmp	r0, #0
  400ee4:	f000 809e 	beq.w	401024 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  400ee8:	2058      	movs	r0, #88	; 0x58
  400eea:	4b5f      	ldr	r3, [pc, #380]	; (401068 <xTaskGenericCreate+0x1d8>)
  400eec:	4798      	blx	r3
			if( pxNewTCB != NULL )
  400eee:	4604      	mov	r4, r0
  400ef0:	2800      	cmp	r0, #0
  400ef2:	f000 8094 	beq.w	40101e <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  400ef6:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  400ef8:	ea4f 0289 	mov.w	r2, r9, lsl #2
  400efc:	21a5      	movs	r1, #165	; 0xa5
  400efe:	4630      	mov	r0, r6
  400f00:	4b5a      	ldr	r3, [pc, #360]	; (40106c <xTaskGenericCreate+0x1dc>)
  400f02:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  400f04:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  400f08:	444e      	add	r6, r9
  400f0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  400f0c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  400f10:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  400f14:	783b      	ldrb	r3, [r7, #0]
  400f16:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  400f1a:	783b      	ldrb	r3, [r7, #0]
  400f1c:	2b00      	cmp	r3, #0
  400f1e:	f040 8084 	bne.w	40102a <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  400f22:	2700      	movs	r7, #0
  400f24:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  400f28:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  400f2a:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  400f2c:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  400f2e:	f104 0904 	add.w	r9, r4, #4
  400f32:	4648      	mov	r0, r9
  400f34:	f8df b184 	ldr.w	fp, [pc, #388]	; 4010bc <xTaskGenericCreate+0x22c>
  400f38:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  400f3a:	f104 0018 	add.w	r0, r4, #24
  400f3e:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  400f40:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400f42:	f1c5 0305 	rsb	r3, r5, #5
  400f46:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  400f48:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  400f4a:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  400f4c:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  400f50:	4642      	mov	r2, r8
  400f52:	9901      	ldr	r1, [sp, #4]
  400f54:	4630      	mov	r0, r6
  400f56:	4b46      	ldr	r3, [pc, #280]	; (401070 <xTaskGenericCreate+0x1e0>)
  400f58:	4798      	blx	r3
  400f5a:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  400f5c:	f1ba 0f00 	cmp.w	sl, #0
  400f60:	d001      	beq.n	400f66 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  400f62:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  400f66:	4b43      	ldr	r3, [pc, #268]	; (401074 <xTaskGenericCreate+0x1e4>)
  400f68:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  400f6a:	4a43      	ldr	r2, [pc, #268]	; (401078 <xTaskGenericCreate+0x1e8>)
  400f6c:	6813      	ldr	r3, [r2, #0]
  400f6e:	3301      	adds	r3, #1
  400f70:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  400f72:	4b42      	ldr	r3, [pc, #264]	; (40107c <xTaskGenericCreate+0x1ec>)
  400f74:	681b      	ldr	r3, [r3, #0]
  400f76:	2b00      	cmp	r3, #0
  400f78:	d166      	bne.n	401048 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  400f7a:	4b40      	ldr	r3, [pc, #256]	; (40107c <xTaskGenericCreate+0x1ec>)
  400f7c:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  400f7e:	6813      	ldr	r3, [r2, #0]
  400f80:	2b01      	cmp	r3, #1
  400f82:	d121      	bne.n	400fc8 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  400f84:	4f3e      	ldr	r7, [pc, #248]	; (401080 <xTaskGenericCreate+0x1f0>)
  400f86:	4638      	mov	r0, r7
  400f88:	4e3e      	ldr	r6, [pc, #248]	; (401084 <xTaskGenericCreate+0x1f4>)
  400f8a:	47b0      	blx	r6
  400f8c:	f107 0014 	add.w	r0, r7, #20
  400f90:	47b0      	blx	r6
  400f92:	f107 0028 	add.w	r0, r7, #40	; 0x28
  400f96:	47b0      	blx	r6
  400f98:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  400f9c:	47b0      	blx	r6
  400f9e:	f107 0050 	add.w	r0, r7, #80	; 0x50
  400fa2:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  400fa4:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4010c0 <xTaskGenericCreate+0x230>
  400fa8:	4640      	mov	r0, r8
  400faa:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  400fac:	4f36      	ldr	r7, [pc, #216]	; (401088 <xTaskGenericCreate+0x1f8>)
  400fae:	4638      	mov	r0, r7
  400fb0:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  400fb2:	4836      	ldr	r0, [pc, #216]	; (40108c <xTaskGenericCreate+0x1fc>)
  400fb4:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  400fb6:	4836      	ldr	r0, [pc, #216]	; (401090 <xTaskGenericCreate+0x200>)
  400fb8:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  400fba:	4836      	ldr	r0, [pc, #216]	; (401094 <xTaskGenericCreate+0x204>)
  400fbc:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  400fbe:	4b36      	ldr	r3, [pc, #216]	; (401098 <xTaskGenericCreate+0x208>)
  400fc0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  400fc4:	4b35      	ldr	r3, [pc, #212]	; (40109c <xTaskGenericCreate+0x20c>)
  400fc6:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  400fc8:	4a35      	ldr	r2, [pc, #212]	; (4010a0 <xTaskGenericCreate+0x210>)
  400fca:	6813      	ldr	r3, [r2, #0]
  400fcc:	3301      	adds	r3, #1
  400fce:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  400fd0:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  400fd2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  400fd4:	4a33      	ldr	r2, [pc, #204]	; (4010a4 <xTaskGenericCreate+0x214>)
  400fd6:	6811      	ldr	r1, [r2, #0]
  400fd8:	2301      	movs	r3, #1
  400fda:	4083      	lsls	r3, r0
  400fdc:	430b      	orrs	r3, r1
  400fde:	6013      	str	r3, [r2, #0]
  400fe0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400fe4:	4649      	mov	r1, r9
  400fe6:	4b26      	ldr	r3, [pc, #152]	; (401080 <xTaskGenericCreate+0x1f0>)
  400fe8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  400fec:	4b2e      	ldr	r3, [pc, #184]	; (4010a8 <xTaskGenericCreate+0x218>)
  400fee:	4798      	blx	r3
		taskEXIT_CRITICAL();
  400ff0:	4b2e      	ldr	r3, [pc, #184]	; (4010ac <xTaskGenericCreate+0x21c>)
  400ff2:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  400ff4:	4b2e      	ldr	r3, [pc, #184]	; (4010b0 <xTaskGenericCreate+0x220>)
  400ff6:	681b      	ldr	r3, [r3, #0]
  400ff8:	2b00      	cmp	r3, #0
  400ffa:	d031      	beq.n	401060 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  400ffc:	4b1f      	ldr	r3, [pc, #124]	; (40107c <xTaskGenericCreate+0x1ec>)
  400ffe:	681b      	ldr	r3, [r3, #0]
  401000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401002:	429d      	cmp	r5, r3
  401004:	d92e      	bls.n	401064 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  401006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40100a:	4b2a      	ldr	r3, [pc, #168]	; (4010b4 <xTaskGenericCreate+0x224>)
  40100c:	601a      	str	r2, [r3, #0]
  40100e:	f3bf 8f4f 	dsb	sy
  401012:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  401016:	2001      	movs	r0, #1
}
  401018:	b003      	add	sp, #12
  40101a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  40101e:	4630      	mov	r0, r6
  401020:	4b25      	ldr	r3, [pc, #148]	; (4010b8 <xTaskGenericCreate+0x228>)
  401022:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401024:	f04f 30ff 	mov.w	r0, #4294967295
  401028:	e7f6      	b.n	401018 <xTaskGenericCreate+0x188>
  40102a:	463b      	mov	r3, r7
  40102c:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401030:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401032:	7859      	ldrb	r1, [r3, #1]
  401034:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401038:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  40103c:	2900      	cmp	r1, #0
  40103e:	f43f af70 	beq.w	400f22 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401042:	42bb      	cmp	r3, r7
  401044:	d1f5      	bne.n	401032 <xTaskGenericCreate+0x1a2>
  401046:	e76c      	b.n	400f22 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  401048:	4b19      	ldr	r3, [pc, #100]	; (4010b0 <xTaskGenericCreate+0x220>)
  40104a:	681b      	ldr	r3, [r3, #0]
  40104c:	2b00      	cmp	r3, #0
  40104e:	d1bb      	bne.n	400fc8 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401050:	4b0a      	ldr	r3, [pc, #40]	; (40107c <xTaskGenericCreate+0x1ec>)
  401052:	681b      	ldr	r3, [r3, #0]
  401054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401056:	429d      	cmp	r5, r3
  401058:	d3b6      	bcc.n	400fc8 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  40105a:	4b08      	ldr	r3, [pc, #32]	; (40107c <xTaskGenericCreate+0x1ec>)
  40105c:	601c      	str	r4, [r3, #0]
  40105e:	e7b3      	b.n	400fc8 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  401060:	2001      	movs	r0, #1
  401062:	e7d9      	b.n	401018 <xTaskGenericCreate+0x188>
  401064:	2001      	movs	r0, #1
	return xReturn;
  401066:	e7d7      	b.n	401018 <xTaskGenericCreate+0x188>
  401068:	00400555 	.word	0x00400555
  40106c:	00405e95 	.word	0x00405e95
  401070:	004002ad 	.word	0x004002ad
  401074:	004002f9 	.word	0x004002f9
  401078:	2040c274 	.word	0x2040c274
  40107c:	2040c204 	.word	0x2040c204
  401080:	2040c210 	.word	0x2040c210
  401084:	004001ad 	.word	0x004001ad
  401088:	2040c2a0 	.word	0x2040c2a0
  40108c:	2040c2bc 	.word	0x2040c2bc
  401090:	2040c2e8 	.word	0x2040c2e8
  401094:	2040c2d4 	.word	0x2040c2d4
  401098:	2040c208 	.word	0x2040c208
  40109c:	2040c20c 	.word	0x2040c20c
  4010a0:	2040c280 	.word	0x2040c280
  4010a4:	2040c288 	.word	0x2040c288
  4010a8:	004001c9 	.word	0x004001c9
  4010ac:	00400345 	.word	0x00400345
  4010b0:	2040c2d0 	.word	0x2040c2d0
  4010b4:	e000ed04 	.word	0xe000ed04
  4010b8:	004005c5 	.word	0x004005c5
  4010bc:	004001c3 	.word	0x004001c3
  4010c0:	2040c28c 	.word	0x2040c28c

004010c4 <vTaskStartScheduler>:
{
  4010c4:	b510      	push	{r4, lr}
  4010c6:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  4010c8:	2300      	movs	r3, #0
  4010ca:	9303      	str	r3, [sp, #12]
  4010cc:	9302      	str	r3, [sp, #8]
  4010ce:	9301      	str	r3, [sp, #4]
  4010d0:	9300      	str	r3, [sp, #0]
  4010d2:	2282      	movs	r2, #130	; 0x82
  4010d4:	4916      	ldr	r1, [pc, #88]	; (401130 <vTaskStartScheduler+0x6c>)
  4010d6:	4817      	ldr	r0, [pc, #92]	; (401134 <vTaskStartScheduler+0x70>)
  4010d8:	4c17      	ldr	r4, [pc, #92]	; (401138 <vTaskStartScheduler+0x74>)
  4010da:	47a0      	blx	r4
		if( xReturn == pdPASS )
  4010dc:	2801      	cmp	r0, #1
  4010de:	d00b      	beq.n	4010f8 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  4010e0:	bb20      	cbnz	r0, 40112c <vTaskStartScheduler+0x68>
  4010e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010e6:	b672      	cpsid	i
  4010e8:	f383 8811 	msr	BASEPRI, r3
  4010ec:	f3bf 8f6f 	isb	sy
  4010f0:	f3bf 8f4f 	dsb	sy
  4010f4:	b662      	cpsie	i
  4010f6:	e7fe      	b.n	4010f6 <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  4010f8:	4b10      	ldr	r3, [pc, #64]	; (40113c <vTaskStartScheduler+0x78>)
  4010fa:	4798      	blx	r3
	if( xReturn == pdPASS )
  4010fc:	2801      	cmp	r0, #1
  4010fe:	d1ef      	bne.n	4010e0 <vTaskStartScheduler+0x1c>
  401100:	f04f 0380 	mov.w	r3, #128	; 0x80
  401104:	b672      	cpsid	i
  401106:	f383 8811 	msr	BASEPRI, r3
  40110a:	f3bf 8f6f 	isb	sy
  40110e:	f3bf 8f4f 	dsb	sy
  401112:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  401114:	f04f 32ff 	mov.w	r2, #4294967295
  401118:	4b09      	ldr	r3, [pc, #36]	; (401140 <vTaskStartScheduler+0x7c>)
  40111a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  40111c:	2201      	movs	r2, #1
  40111e:	4b09      	ldr	r3, [pc, #36]	; (401144 <vTaskStartScheduler+0x80>)
  401120:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401122:	2200      	movs	r2, #0
  401124:	4b08      	ldr	r3, [pc, #32]	; (401148 <vTaskStartScheduler+0x84>)
  401126:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  401128:	4b08      	ldr	r3, [pc, #32]	; (40114c <vTaskStartScheduler+0x88>)
  40112a:	4798      	blx	r3
}
  40112c:	b004      	add	sp, #16
  40112e:	bd10      	pop	{r4, pc}
  401130:	00408c84 	.word	0x00408c84
  401134:	00401469 	.word	0x00401469
  401138:	00400e91 	.word	0x00400e91
  40113c:	00401aa9 	.word	0x00401aa9
  401140:	2040c2b4 	.word	0x2040c2b4
  401144:	2040c2d0 	.word	0x2040c2d0
  401148:	2040c2fc 	.word	0x2040c2fc
  40114c:	0040042d 	.word	0x0040042d

00401150 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401150:	4a02      	ldr	r2, [pc, #8]	; (40115c <vTaskSuspendAll+0xc>)
  401152:	6813      	ldr	r3, [r2, #0]
  401154:	3301      	adds	r3, #1
  401156:	6013      	str	r3, [r2, #0]
  401158:	4770      	bx	lr
  40115a:	bf00      	nop
  40115c:	2040c27c 	.word	0x2040c27c

00401160 <xTaskGetTickCount>:
		xTicks = xTickCount;
  401160:	4b01      	ldr	r3, [pc, #4]	; (401168 <xTaskGetTickCount+0x8>)
  401162:	6818      	ldr	r0, [r3, #0]
}
  401164:	4770      	bx	lr
  401166:	bf00      	nop
  401168:	2040c2fc 	.word	0x2040c2fc

0040116c <xTaskIncrementTick>:
{
  40116c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401170:	4b42      	ldr	r3, [pc, #264]	; (40127c <xTaskIncrementTick+0x110>)
  401172:	681b      	ldr	r3, [r3, #0]
  401174:	2b00      	cmp	r3, #0
  401176:	d178      	bne.n	40126a <xTaskIncrementTick+0xfe>
		++xTickCount;
  401178:	4b41      	ldr	r3, [pc, #260]	; (401280 <xTaskIncrementTick+0x114>)
  40117a:	681a      	ldr	r2, [r3, #0]
  40117c:	3201      	adds	r2, #1
  40117e:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  401180:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  401182:	b9d6      	cbnz	r6, 4011ba <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  401184:	4b3f      	ldr	r3, [pc, #252]	; (401284 <xTaskIncrementTick+0x118>)
  401186:	681b      	ldr	r3, [r3, #0]
  401188:	681b      	ldr	r3, [r3, #0]
  40118a:	b153      	cbz	r3, 4011a2 <xTaskIncrementTick+0x36>
  40118c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401190:	b672      	cpsid	i
  401192:	f383 8811 	msr	BASEPRI, r3
  401196:	f3bf 8f6f 	isb	sy
  40119a:	f3bf 8f4f 	dsb	sy
  40119e:	b662      	cpsie	i
  4011a0:	e7fe      	b.n	4011a0 <xTaskIncrementTick+0x34>
  4011a2:	4a38      	ldr	r2, [pc, #224]	; (401284 <xTaskIncrementTick+0x118>)
  4011a4:	6811      	ldr	r1, [r2, #0]
  4011a6:	4b38      	ldr	r3, [pc, #224]	; (401288 <xTaskIncrementTick+0x11c>)
  4011a8:	6818      	ldr	r0, [r3, #0]
  4011aa:	6010      	str	r0, [r2, #0]
  4011ac:	6019      	str	r1, [r3, #0]
  4011ae:	4a37      	ldr	r2, [pc, #220]	; (40128c <xTaskIncrementTick+0x120>)
  4011b0:	6813      	ldr	r3, [r2, #0]
  4011b2:	3301      	adds	r3, #1
  4011b4:	6013      	str	r3, [r2, #0]
  4011b6:	4b36      	ldr	r3, [pc, #216]	; (401290 <xTaskIncrementTick+0x124>)
  4011b8:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  4011ba:	4b36      	ldr	r3, [pc, #216]	; (401294 <xTaskIncrementTick+0x128>)
  4011bc:	681b      	ldr	r3, [r3, #0]
  4011be:	429e      	cmp	r6, r3
  4011c0:	d218      	bcs.n	4011f4 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  4011c2:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4011c4:	4b34      	ldr	r3, [pc, #208]	; (401298 <xTaskIncrementTick+0x12c>)
  4011c6:	681b      	ldr	r3, [r3, #0]
  4011c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4011ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4011ce:	4a33      	ldr	r2, [pc, #204]	; (40129c <xTaskIncrementTick+0x130>)
  4011d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  4011d4:	2b02      	cmp	r3, #2
  4011d6:	bf28      	it	cs
  4011d8:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  4011da:	4b31      	ldr	r3, [pc, #196]	; (4012a0 <xTaskIncrementTick+0x134>)
  4011dc:	681b      	ldr	r3, [r3, #0]
  4011de:	b90b      	cbnz	r3, 4011e4 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  4011e0:	4b30      	ldr	r3, [pc, #192]	; (4012a4 <xTaskIncrementTick+0x138>)
  4011e2:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  4011e4:	4b30      	ldr	r3, [pc, #192]	; (4012a8 <xTaskIncrementTick+0x13c>)
  4011e6:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  4011e8:	2b00      	cmp	r3, #0
}
  4011ea:	bf0c      	ite	eq
  4011ec:	4620      	moveq	r0, r4
  4011ee:	2001      	movne	r0, #1
  4011f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4011f4:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4011f6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 401284 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4011fa:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4012b4 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  4011fe:	4f2b      	ldr	r7, [pc, #172]	; (4012ac <xTaskIncrementTick+0x140>)
  401200:	e01f      	b.n	401242 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  401202:	f04f 32ff 	mov.w	r2, #4294967295
  401206:	4b23      	ldr	r3, [pc, #140]	; (401294 <xTaskIncrementTick+0x128>)
  401208:	601a      	str	r2, [r3, #0]
						break;
  40120a:	e7db      	b.n	4011c4 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  40120c:	4a21      	ldr	r2, [pc, #132]	; (401294 <xTaskIncrementTick+0x128>)
  40120e:	6013      	str	r3, [r2, #0]
							break;
  401210:	e7d8      	b.n	4011c4 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401212:	f105 0018 	add.w	r0, r5, #24
  401216:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  401218:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  40121a:	683a      	ldr	r2, [r7, #0]
  40121c:	2301      	movs	r3, #1
  40121e:	4083      	lsls	r3, r0
  401220:	4313      	orrs	r3, r2
  401222:	603b      	str	r3, [r7, #0]
  401224:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401228:	4651      	mov	r1, sl
  40122a:	4b1c      	ldr	r3, [pc, #112]	; (40129c <xTaskIncrementTick+0x130>)
  40122c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401230:	4b1f      	ldr	r3, [pc, #124]	; (4012b0 <xTaskIncrementTick+0x144>)
  401232:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401234:	4b18      	ldr	r3, [pc, #96]	; (401298 <xTaskIncrementTick+0x12c>)
  401236:	681b      	ldr	r3, [r3, #0]
  401238:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40123a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  40123c:	429a      	cmp	r2, r3
  40123e:	bf28      	it	cs
  401240:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401242:	f8d9 3000 	ldr.w	r3, [r9]
  401246:	681b      	ldr	r3, [r3, #0]
  401248:	2b00      	cmp	r3, #0
  40124a:	d0da      	beq.n	401202 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  40124c:	f8d9 3000 	ldr.w	r3, [r9]
  401250:	68db      	ldr	r3, [r3, #12]
  401252:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401254:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  401256:	429e      	cmp	r6, r3
  401258:	d3d8      	bcc.n	40120c <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40125a:	f105 0a04 	add.w	sl, r5, #4
  40125e:	4650      	mov	r0, sl
  401260:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401262:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401264:	2b00      	cmp	r3, #0
  401266:	d1d4      	bne.n	401212 <xTaskIncrementTick+0xa6>
  401268:	e7d6      	b.n	401218 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  40126a:	4a0d      	ldr	r2, [pc, #52]	; (4012a0 <xTaskIncrementTick+0x134>)
  40126c:	6813      	ldr	r3, [r2, #0]
  40126e:	3301      	adds	r3, #1
  401270:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  401272:	4b0c      	ldr	r3, [pc, #48]	; (4012a4 <xTaskIncrementTick+0x138>)
  401274:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  401276:	2400      	movs	r4, #0
  401278:	e7b4      	b.n	4011e4 <xTaskIncrementTick+0x78>
  40127a:	bf00      	nop
  40127c:	2040c27c 	.word	0x2040c27c
  401280:	2040c2fc 	.word	0x2040c2fc
  401284:	2040c208 	.word	0x2040c208
  401288:	2040c20c 	.word	0x2040c20c
  40128c:	2040c2b8 	.word	0x2040c2b8
  401290:	00400e0d 	.word	0x00400e0d
  401294:	2040c2b4 	.word	0x2040c2b4
  401298:	2040c204 	.word	0x2040c204
  40129c:	2040c210 	.word	0x2040c210
  4012a0:	2040c278 	.word	0x2040c278
  4012a4:	00405a09 	.word	0x00405a09
  4012a8:	2040c300 	.word	0x2040c300
  4012ac:	2040c288 	.word	0x2040c288
  4012b0:	004001c9 	.word	0x004001c9
  4012b4:	00400215 	.word	0x00400215

004012b8 <xTaskResumeAll>:
{
  4012b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  4012bc:	4b38      	ldr	r3, [pc, #224]	; (4013a0 <xTaskResumeAll+0xe8>)
  4012be:	681b      	ldr	r3, [r3, #0]
  4012c0:	b953      	cbnz	r3, 4012d8 <xTaskResumeAll+0x20>
  4012c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012c6:	b672      	cpsid	i
  4012c8:	f383 8811 	msr	BASEPRI, r3
  4012cc:	f3bf 8f6f 	isb	sy
  4012d0:	f3bf 8f4f 	dsb	sy
  4012d4:	b662      	cpsie	i
  4012d6:	e7fe      	b.n	4012d6 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  4012d8:	4b32      	ldr	r3, [pc, #200]	; (4013a4 <xTaskResumeAll+0xec>)
  4012da:	4798      	blx	r3
		--uxSchedulerSuspended;
  4012dc:	4b30      	ldr	r3, [pc, #192]	; (4013a0 <xTaskResumeAll+0xe8>)
  4012de:	681a      	ldr	r2, [r3, #0]
  4012e0:	3a01      	subs	r2, #1
  4012e2:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4012e4:	681b      	ldr	r3, [r3, #0]
  4012e6:	2b00      	cmp	r3, #0
  4012e8:	d155      	bne.n	401396 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4012ea:	4b2f      	ldr	r3, [pc, #188]	; (4013a8 <xTaskResumeAll+0xf0>)
  4012ec:	681b      	ldr	r3, [r3, #0]
  4012ee:	2b00      	cmp	r3, #0
  4012f0:	d132      	bne.n	401358 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  4012f2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4012f4:	4b2d      	ldr	r3, [pc, #180]	; (4013ac <xTaskResumeAll+0xf4>)
  4012f6:	4798      	blx	r3
}
  4012f8:	4620      	mov	r0, r4
  4012fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4012fe:	68fb      	ldr	r3, [r7, #12]
  401300:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401302:	f104 0018 	add.w	r0, r4, #24
  401306:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401308:	f104 0804 	add.w	r8, r4, #4
  40130c:	4640      	mov	r0, r8
  40130e:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401310:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401312:	682a      	ldr	r2, [r5, #0]
  401314:	2301      	movs	r3, #1
  401316:	4083      	lsls	r3, r0
  401318:	4313      	orrs	r3, r2
  40131a:	602b      	str	r3, [r5, #0]
  40131c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401320:	4641      	mov	r1, r8
  401322:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401326:	4b22      	ldr	r3, [pc, #136]	; (4013b0 <xTaskResumeAll+0xf8>)
  401328:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40132a:	4b22      	ldr	r3, [pc, #136]	; (4013b4 <xTaskResumeAll+0xfc>)
  40132c:	681b      	ldr	r3, [r3, #0]
  40132e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401332:	429a      	cmp	r2, r3
  401334:	d20c      	bcs.n	401350 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401336:	683b      	ldr	r3, [r7, #0]
  401338:	2b00      	cmp	r3, #0
  40133a:	d1e0      	bne.n	4012fe <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  40133c:	4b1e      	ldr	r3, [pc, #120]	; (4013b8 <xTaskResumeAll+0x100>)
  40133e:	681b      	ldr	r3, [r3, #0]
  401340:	b1db      	cbz	r3, 40137a <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401342:	4b1d      	ldr	r3, [pc, #116]	; (4013b8 <xTaskResumeAll+0x100>)
  401344:	681b      	ldr	r3, [r3, #0]
  401346:	b1c3      	cbz	r3, 40137a <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  401348:	4e1c      	ldr	r6, [pc, #112]	; (4013bc <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  40134a:	4d1d      	ldr	r5, [pc, #116]	; (4013c0 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  40134c:	4c1a      	ldr	r4, [pc, #104]	; (4013b8 <xTaskResumeAll+0x100>)
  40134e:	e00e      	b.n	40136e <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  401350:	2201      	movs	r2, #1
  401352:	4b1b      	ldr	r3, [pc, #108]	; (4013c0 <xTaskResumeAll+0x108>)
  401354:	601a      	str	r2, [r3, #0]
  401356:	e7ee      	b.n	401336 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401358:	4f1a      	ldr	r7, [pc, #104]	; (4013c4 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40135a:	4e1b      	ldr	r6, [pc, #108]	; (4013c8 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  40135c:	4d1b      	ldr	r5, [pc, #108]	; (4013cc <xTaskResumeAll+0x114>)
  40135e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4013d4 <xTaskResumeAll+0x11c>
  401362:	e7e8      	b.n	401336 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  401364:	6823      	ldr	r3, [r4, #0]
  401366:	3b01      	subs	r3, #1
  401368:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40136a:	6823      	ldr	r3, [r4, #0]
  40136c:	b12b      	cbz	r3, 40137a <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  40136e:	47b0      	blx	r6
  401370:	2800      	cmp	r0, #0
  401372:	d0f7      	beq.n	401364 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  401374:	2301      	movs	r3, #1
  401376:	602b      	str	r3, [r5, #0]
  401378:	e7f4      	b.n	401364 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  40137a:	4b11      	ldr	r3, [pc, #68]	; (4013c0 <xTaskResumeAll+0x108>)
  40137c:	681b      	ldr	r3, [r3, #0]
  40137e:	2b01      	cmp	r3, #1
  401380:	d10b      	bne.n	40139a <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  401382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401386:	4b12      	ldr	r3, [pc, #72]	; (4013d0 <xTaskResumeAll+0x118>)
  401388:	601a      	str	r2, [r3, #0]
  40138a:	f3bf 8f4f 	dsb	sy
  40138e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  401392:	2401      	movs	r4, #1
  401394:	e7ae      	b.n	4012f4 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  401396:	2400      	movs	r4, #0
  401398:	e7ac      	b.n	4012f4 <xTaskResumeAll+0x3c>
  40139a:	2400      	movs	r4, #0
  40139c:	e7aa      	b.n	4012f4 <xTaskResumeAll+0x3c>
  40139e:	bf00      	nop
  4013a0:	2040c27c 	.word	0x2040c27c
  4013a4:	004002f9 	.word	0x004002f9
  4013a8:	2040c274 	.word	0x2040c274
  4013ac:	00400345 	.word	0x00400345
  4013b0:	004001c9 	.word	0x004001c9
  4013b4:	2040c204 	.word	0x2040c204
  4013b8:	2040c278 	.word	0x2040c278
  4013bc:	0040116d 	.word	0x0040116d
  4013c0:	2040c300 	.word	0x2040c300
  4013c4:	2040c2bc 	.word	0x2040c2bc
  4013c8:	00400215 	.word	0x00400215
  4013cc:	2040c288 	.word	0x2040c288
  4013d0:	e000ed04 	.word	0xe000ed04
  4013d4:	2040c210 	.word	0x2040c210

004013d8 <vTaskDelay>:
	{
  4013d8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  4013da:	2800      	cmp	r0, #0
  4013dc:	d029      	beq.n	401432 <vTaskDelay+0x5a>
  4013de:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  4013e0:	4b18      	ldr	r3, [pc, #96]	; (401444 <vTaskDelay+0x6c>)
  4013e2:	681b      	ldr	r3, [r3, #0]
  4013e4:	b153      	cbz	r3, 4013fc <vTaskDelay+0x24>
  4013e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013ea:	b672      	cpsid	i
  4013ec:	f383 8811 	msr	BASEPRI, r3
  4013f0:	f3bf 8f6f 	isb	sy
  4013f4:	f3bf 8f4f 	dsb	sy
  4013f8:	b662      	cpsie	i
  4013fa:	e7fe      	b.n	4013fa <vTaskDelay+0x22>
			vTaskSuspendAll();
  4013fc:	4b12      	ldr	r3, [pc, #72]	; (401448 <vTaskDelay+0x70>)
  4013fe:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  401400:	4b12      	ldr	r3, [pc, #72]	; (40144c <vTaskDelay+0x74>)
  401402:	681b      	ldr	r3, [r3, #0]
  401404:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401406:	4b12      	ldr	r3, [pc, #72]	; (401450 <vTaskDelay+0x78>)
  401408:	6818      	ldr	r0, [r3, #0]
  40140a:	3004      	adds	r0, #4
  40140c:	4b11      	ldr	r3, [pc, #68]	; (401454 <vTaskDelay+0x7c>)
  40140e:	4798      	blx	r3
  401410:	b948      	cbnz	r0, 401426 <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401412:	4b0f      	ldr	r3, [pc, #60]	; (401450 <vTaskDelay+0x78>)
  401414:	681a      	ldr	r2, [r3, #0]
  401416:	4910      	ldr	r1, [pc, #64]	; (401458 <vTaskDelay+0x80>)
  401418:	680b      	ldr	r3, [r1, #0]
  40141a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40141c:	2201      	movs	r2, #1
  40141e:	4082      	lsls	r2, r0
  401420:	ea23 0302 	bic.w	r3, r3, r2
  401424:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401426:	4620      	mov	r0, r4
  401428:	4b0c      	ldr	r3, [pc, #48]	; (40145c <vTaskDelay+0x84>)
  40142a:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  40142c:	4b0c      	ldr	r3, [pc, #48]	; (401460 <vTaskDelay+0x88>)
  40142e:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  401430:	b938      	cbnz	r0, 401442 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  401432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401436:	4b0b      	ldr	r3, [pc, #44]	; (401464 <vTaskDelay+0x8c>)
  401438:	601a      	str	r2, [r3, #0]
  40143a:	f3bf 8f4f 	dsb	sy
  40143e:	f3bf 8f6f 	isb	sy
  401442:	bd10      	pop	{r4, pc}
  401444:	2040c27c 	.word	0x2040c27c
  401448:	00401151 	.word	0x00401151
  40144c:	2040c2fc 	.word	0x2040c2fc
  401450:	2040c204 	.word	0x2040c204
  401454:	00400215 	.word	0x00400215
  401458:	2040c288 	.word	0x2040c288
  40145c:	00400e39 	.word	0x00400e39
  401460:	004012b9 	.word	0x004012b9
  401464:	e000ed04 	.word	0xe000ed04

00401468 <prvIdleTask>:
{
  401468:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  40146a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4014f4 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40146e:	4e19      	ldr	r6, [pc, #100]	; (4014d4 <prvIdleTask+0x6c>)
				taskYIELD();
  401470:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4014f8 <prvIdleTask+0x90>
  401474:	e02a      	b.n	4014cc <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401476:	4b18      	ldr	r3, [pc, #96]	; (4014d8 <prvIdleTask+0x70>)
  401478:	681b      	ldr	r3, [r3, #0]
  40147a:	2b01      	cmp	r3, #1
  40147c:	d81e      	bhi.n	4014bc <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40147e:	682b      	ldr	r3, [r5, #0]
  401480:	2b00      	cmp	r3, #0
  401482:	d0f8      	beq.n	401476 <prvIdleTask+0xe>
			vTaskSuspendAll();
  401484:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401486:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  401488:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  40148a:	2c00      	cmp	r4, #0
  40148c:	d0f7      	beq.n	40147e <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  40148e:	4b13      	ldr	r3, [pc, #76]	; (4014dc <prvIdleTask+0x74>)
  401490:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401492:	68f3      	ldr	r3, [r6, #12]
  401494:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401496:	1d20      	adds	r0, r4, #4
  401498:	4b11      	ldr	r3, [pc, #68]	; (4014e0 <prvIdleTask+0x78>)
  40149a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  40149c:	4a11      	ldr	r2, [pc, #68]	; (4014e4 <prvIdleTask+0x7c>)
  40149e:	6813      	ldr	r3, [r2, #0]
  4014a0:	3b01      	subs	r3, #1
  4014a2:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4014a4:	682b      	ldr	r3, [r5, #0]
  4014a6:	3b01      	subs	r3, #1
  4014a8:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  4014aa:	4b0f      	ldr	r3, [pc, #60]	; (4014e8 <prvIdleTask+0x80>)
  4014ac:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  4014ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4014b0:	f8df a048 	ldr.w	sl, [pc, #72]	; 4014fc <prvIdleTask+0x94>
  4014b4:	47d0      	blx	sl
		vPortFree( pxTCB );
  4014b6:	4620      	mov	r0, r4
  4014b8:	47d0      	blx	sl
  4014ba:	e7e0      	b.n	40147e <prvIdleTask+0x16>
				taskYIELD();
  4014bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4014c0:	f8c9 3000 	str.w	r3, [r9]
  4014c4:	f3bf 8f4f 	dsb	sy
  4014c8:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4014cc:	4d07      	ldr	r5, [pc, #28]	; (4014ec <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  4014ce:	4f08      	ldr	r7, [pc, #32]	; (4014f0 <prvIdleTask+0x88>)
  4014d0:	e7d5      	b.n	40147e <prvIdleTask+0x16>
  4014d2:	bf00      	nop
  4014d4:	2040c2e8 	.word	0x2040c2e8
  4014d8:	2040c210 	.word	0x2040c210
  4014dc:	004002f9 	.word	0x004002f9
  4014e0:	00400215 	.word	0x00400215
  4014e4:	2040c274 	.word	0x2040c274
  4014e8:	00400345 	.word	0x00400345
  4014ec:	2040c284 	.word	0x2040c284
  4014f0:	004012b9 	.word	0x004012b9
  4014f4:	00401151 	.word	0x00401151
  4014f8:	e000ed04 	.word	0xe000ed04
  4014fc:	004005c5 	.word	0x004005c5

00401500 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401500:	4b2d      	ldr	r3, [pc, #180]	; (4015b8 <vTaskSwitchContext+0xb8>)
  401502:	681b      	ldr	r3, [r3, #0]
  401504:	2b00      	cmp	r3, #0
  401506:	d12c      	bne.n	401562 <vTaskSwitchContext+0x62>
{
  401508:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  40150a:	2200      	movs	r2, #0
  40150c:	4b2b      	ldr	r3, [pc, #172]	; (4015bc <vTaskSwitchContext+0xbc>)
  40150e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  401510:	4b2b      	ldr	r3, [pc, #172]	; (4015c0 <vTaskSwitchContext+0xc0>)
  401512:	681b      	ldr	r3, [r3, #0]
  401514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401516:	681a      	ldr	r2, [r3, #0]
  401518:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40151c:	d103      	bne.n	401526 <vTaskSwitchContext+0x26>
  40151e:	685a      	ldr	r2, [r3, #4]
  401520:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401524:	d021      	beq.n	40156a <vTaskSwitchContext+0x6a>
  401526:	4b26      	ldr	r3, [pc, #152]	; (4015c0 <vTaskSwitchContext+0xc0>)
  401528:	6818      	ldr	r0, [r3, #0]
  40152a:	6819      	ldr	r1, [r3, #0]
  40152c:	3134      	adds	r1, #52	; 0x34
  40152e:	4b25      	ldr	r3, [pc, #148]	; (4015c4 <vTaskSwitchContext+0xc4>)
  401530:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401532:	4b25      	ldr	r3, [pc, #148]	; (4015c8 <vTaskSwitchContext+0xc8>)
  401534:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401536:	fab3 f383 	clz	r3, r3
  40153a:	b2db      	uxtb	r3, r3
  40153c:	f1c3 031f 	rsb	r3, r3, #31
  401540:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401544:	4a21      	ldr	r2, [pc, #132]	; (4015cc <vTaskSwitchContext+0xcc>)
  401546:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40154a:	b9ba      	cbnz	r2, 40157c <vTaskSwitchContext+0x7c>
	__asm volatile
  40154c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401550:	b672      	cpsid	i
  401552:	f383 8811 	msr	BASEPRI, r3
  401556:	f3bf 8f6f 	isb	sy
  40155a:	f3bf 8f4f 	dsb	sy
  40155e:	b662      	cpsie	i
  401560:	e7fe      	b.n	401560 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  401562:	2201      	movs	r2, #1
  401564:	4b15      	ldr	r3, [pc, #84]	; (4015bc <vTaskSwitchContext+0xbc>)
  401566:	601a      	str	r2, [r3, #0]
  401568:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  40156a:	689a      	ldr	r2, [r3, #8]
  40156c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401570:	d1d9      	bne.n	401526 <vTaskSwitchContext+0x26>
  401572:	68db      	ldr	r3, [r3, #12]
  401574:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  401578:	d1d5      	bne.n	401526 <vTaskSwitchContext+0x26>
  40157a:	e7da      	b.n	401532 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40157c:	4a13      	ldr	r2, [pc, #76]	; (4015cc <vTaskSwitchContext+0xcc>)
  40157e:	0099      	lsls	r1, r3, #2
  401580:	18c8      	adds	r0, r1, r3
  401582:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401586:	6844      	ldr	r4, [r0, #4]
  401588:	6864      	ldr	r4, [r4, #4]
  40158a:	6044      	str	r4, [r0, #4]
  40158c:	4419      	add	r1, r3
  40158e:	4602      	mov	r2, r0
  401590:	3208      	adds	r2, #8
  401592:	4294      	cmp	r4, r2
  401594:	d009      	beq.n	4015aa <vTaskSwitchContext+0xaa>
  401596:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40159a:	4a0c      	ldr	r2, [pc, #48]	; (4015cc <vTaskSwitchContext+0xcc>)
  40159c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4015a0:	685b      	ldr	r3, [r3, #4]
  4015a2:	68da      	ldr	r2, [r3, #12]
  4015a4:	4b06      	ldr	r3, [pc, #24]	; (4015c0 <vTaskSwitchContext+0xc0>)
  4015a6:	601a      	str	r2, [r3, #0]
  4015a8:	bd10      	pop	{r4, pc}
  4015aa:	6860      	ldr	r0, [r4, #4]
  4015ac:	4a07      	ldr	r2, [pc, #28]	; (4015cc <vTaskSwitchContext+0xcc>)
  4015ae:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4015b2:	6050      	str	r0, [r2, #4]
  4015b4:	e7ef      	b.n	401596 <vTaskSwitchContext+0x96>
  4015b6:	bf00      	nop
  4015b8:	2040c27c 	.word	0x2040c27c
  4015bc:	2040c300 	.word	0x2040c300
  4015c0:	2040c204 	.word	0x2040c204
  4015c4:	004059f1 	.word	0x004059f1
  4015c8:	2040c288 	.word	0x2040c288
  4015cc:	2040c210 	.word	0x2040c210

004015d0 <vTaskPlaceOnEventList>:
{
  4015d0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  4015d2:	b1e0      	cbz	r0, 40160e <vTaskPlaceOnEventList+0x3e>
  4015d4:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4015d6:	4d17      	ldr	r5, [pc, #92]	; (401634 <vTaskPlaceOnEventList+0x64>)
  4015d8:	6829      	ldr	r1, [r5, #0]
  4015da:	3118      	adds	r1, #24
  4015dc:	4b16      	ldr	r3, [pc, #88]	; (401638 <vTaskPlaceOnEventList+0x68>)
  4015de:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4015e0:	6828      	ldr	r0, [r5, #0]
  4015e2:	3004      	adds	r0, #4
  4015e4:	4b15      	ldr	r3, [pc, #84]	; (40163c <vTaskPlaceOnEventList+0x6c>)
  4015e6:	4798      	blx	r3
  4015e8:	b940      	cbnz	r0, 4015fc <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4015ea:	682a      	ldr	r2, [r5, #0]
  4015ec:	4914      	ldr	r1, [pc, #80]	; (401640 <vTaskPlaceOnEventList+0x70>)
  4015ee:	680b      	ldr	r3, [r1, #0]
  4015f0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4015f2:	2201      	movs	r2, #1
  4015f4:	4082      	lsls	r2, r0
  4015f6:	ea23 0302 	bic.w	r3, r3, r2
  4015fa:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  4015fc:	f1b4 3fff 	cmp.w	r4, #4294967295
  401600:	d010      	beq.n	401624 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  401602:	4b10      	ldr	r3, [pc, #64]	; (401644 <vTaskPlaceOnEventList+0x74>)
  401604:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401606:	4420      	add	r0, r4
  401608:	4b0f      	ldr	r3, [pc, #60]	; (401648 <vTaskPlaceOnEventList+0x78>)
  40160a:	4798      	blx	r3
  40160c:	bd38      	pop	{r3, r4, r5, pc}
  40160e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401612:	b672      	cpsid	i
  401614:	f383 8811 	msr	BASEPRI, r3
  401618:	f3bf 8f6f 	isb	sy
  40161c:	f3bf 8f4f 	dsb	sy
  401620:	b662      	cpsie	i
  401622:	e7fe      	b.n	401622 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401624:	4b03      	ldr	r3, [pc, #12]	; (401634 <vTaskPlaceOnEventList+0x64>)
  401626:	6819      	ldr	r1, [r3, #0]
  401628:	3104      	adds	r1, #4
  40162a:	4808      	ldr	r0, [pc, #32]	; (40164c <vTaskPlaceOnEventList+0x7c>)
  40162c:	4b08      	ldr	r3, [pc, #32]	; (401650 <vTaskPlaceOnEventList+0x80>)
  40162e:	4798      	blx	r3
  401630:	bd38      	pop	{r3, r4, r5, pc}
  401632:	bf00      	nop
  401634:	2040c204 	.word	0x2040c204
  401638:	004001e1 	.word	0x004001e1
  40163c:	00400215 	.word	0x00400215
  401640:	2040c288 	.word	0x2040c288
  401644:	2040c2fc 	.word	0x2040c2fc
  401648:	00400e39 	.word	0x00400e39
  40164c:	2040c2d4 	.word	0x2040c2d4
  401650:	004001c9 	.word	0x004001c9

00401654 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  401654:	b1e8      	cbz	r0, 401692 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  401656:	b570      	push	{r4, r5, r6, lr}
  401658:	4615      	mov	r5, r2
  40165a:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40165c:	4e16      	ldr	r6, [pc, #88]	; (4016b8 <vTaskPlaceOnEventListRestricted+0x64>)
  40165e:	6831      	ldr	r1, [r6, #0]
  401660:	3118      	adds	r1, #24
  401662:	4b16      	ldr	r3, [pc, #88]	; (4016bc <vTaskPlaceOnEventListRestricted+0x68>)
  401664:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401666:	6830      	ldr	r0, [r6, #0]
  401668:	3004      	adds	r0, #4
  40166a:	4b15      	ldr	r3, [pc, #84]	; (4016c0 <vTaskPlaceOnEventListRestricted+0x6c>)
  40166c:	4798      	blx	r3
  40166e:	b940      	cbnz	r0, 401682 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401670:	6832      	ldr	r2, [r6, #0]
  401672:	4914      	ldr	r1, [pc, #80]	; (4016c4 <vTaskPlaceOnEventListRestricted+0x70>)
  401674:	680b      	ldr	r3, [r1, #0]
  401676:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401678:	2201      	movs	r2, #1
  40167a:	4082      	lsls	r2, r0
  40167c:	ea23 0302 	bic.w	r3, r3, r2
  401680:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  401682:	2d01      	cmp	r5, #1
  401684:	d010      	beq.n	4016a8 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  401686:	4b10      	ldr	r3, [pc, #64]	; (4016c8 <vTaskPlaceOnEventListRestricted+0x74>)
  401688:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40168a:	4420      	add	r0, r4
  40168c:	4b0f      	ldr	r3, [pc, #60]	; (4016cc <vTaskPlaceOnEventListRestricted+0x78>)
  40168e:	4798      	blx	r3
  401690:	bd70      	pop	{r4, r5, r6, pc}
  401692:	f04f 0380 	mov.w	r3, #128	; 0x80
  401696:	b672      	cpsid	i
  401698:	f383 8811 	msr	BASEPRI, r3
  40169c:	f3bf 8f6f 	isb	sy
  4016a0:	f3bf 8f4f 	dsb	sy
  4016a4:	b662      	cpsie	i
  4016a6:	e7fe      	b.n	4016a6 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4016a8:	4b03      	ldr	r3, [pc, #12]	; (4016b8 <vTaskPlaceOnEventListRestricted+0x64>)
  4016aa:	6819      	ldr	r1, [r3, #0]
  4016ac:	3104      	adds	r1, #4
  4016ae:	4808      	ldr	r0, [pc, #32]	; (4016d0 <vTaskPlaceOnEventListRestricted+0x7c>)
  4016b0:	4b02      	ldr	r3, [pc, #8]	; (4016bc <vTaskPlaceOnEventListRestricted+0x68>)
  4016b2:	4798      	blx	r3
  4016b4:	bd70      	pop	{r4, r5, r6, pc}
  4016b6:	bf00      	nop
  4016b8:	2040c204 	.word	0x2040c204
  4016bc:	004001c9 	.word	0x004001c9
  4016c0:	00400215 	.word	0x00400215
  4016c4:	2040c288 	.word	0x2040c288
  4016c8:	2040c2fc 	.word	0x2040c2fc
  4016cc:	00400e39 	.word	0x00400e39
  4016d0:	2040c2d4 	.word	0x2040c2d4

004016d4 <xTaskRemoveFromEventList>:
{
  4016d4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4016d6:	68c3      	ldr	r3, [r0, #12]
  4016d8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4016da:	b324      	cbz	r4, 401726 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4016dc:	f104 0518 	add.w	r5, r4, #24
  4016e0:	4628      	mov	r0, r5
  4016e2:	4b1a      	ldr	r3, [pc, #104]	; (40174c <xTaskRemoveFromEventList+0x78>)
  4016e4:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4016e6:	4b1a      	ldr	r3, [pc, #104]	; (401750 <xTaskRemoveFromEventList+0x7c>)
  4016e8:	681b      	ldr	r3, [r3, #0]
  4016ea:	bb3b      	cbnz	r3, 40173c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  4016ec:	1d25      	adds	r5, r4, #4
  4016ee:	4628      	mov	r0, r5
  4016f0:	4b16      	ldr	r3, [pc, #88]	; (40174c <xTaskRemoveFromEventList+0x78>)
  4016f2:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4016f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4016f6:	4a17      	ldr	r2, [pc, #92]	; (401754 <xTaskRemoveFromEventList+0x80>)
  4016f8:	6811      	ldr	r1, [r2, #0]
  4016fa:	2301      	movs	r3, #1
  4016fc:	4083      	lsls	r3, r0
  4016fe:	430b      	orrs	r3, r1
  401700:	6013      	str	r3, [r2, #0]
  401702:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401706:	4629      	mov	r1, r5
  401708:	4b13      	ldr	r3, [pc, #76]	; (401758 <xTaskRemoveFromEventList+0x84>)
  40170a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40170e:	4b13      	ldr	r3, [pc, #76]	; (40175c <xTaskRemoveFromEventList+0x88>)
  401710:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401712:	4b13      	ldr	r3, [pc, #76]	; (401760 <xTaskRemoveFromEventList+0x8c>)
  401714:	681b      	ldr	r3, [r3, #0]
  401716:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40171a:	429a      	cmp	r2, r3
  40171c:	d913      	bls.n	401746 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  40171e:	2001      	movs	r0, #1
  401720:	4b10      	ldr	r3, [pc, #64]	; (401764 <xTaskRemoveFromEventList+0x90>)
  401722:	6018      	str	r0, [r3, #0]
  401724:	bd38      	pop	{r3, r4, r5, pc}
  401726:	f04f 0380 	mov.w	r3, #128	; 0x80
  40172a:	b672      	cpsid	i
  40172c:	f383 8811 	msr	BASEPRI, r3
  401730:	f3bf 8f6f 	isb	sy
  401734:	f3bf 8f4f 	dsb	sy
  401738:	b662      	cpsie	i
  40173a:	e7fe      	b.n	40173a <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  40173c:	4629      	mov	r1, r5
  40173e:	480a      	ldr	r0, [pc, #40]	; (401768 <xTaskRemoveFromEventList+0x94>)
  401740:	4b06      	ldr	r3, [pc, #24]	; (40175c <xTaskRemoveFromEventList+0x88>)
  401742:	4798      	blx	r3
  401744:	e7e5      	b.n	401712 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  401746:	2000      	movs	r0, #0
}
  401748:	bd38      	pop	{r3, r4, r5, pc}
  40174a:	bf00      	nop
  40174c:	00400215 	.word	0x00400215
  401750:	2040c27c 	.word	0x2040c27c
  401754:	2040c288 	.word	0x2040c288
  401758:	2040c210 	.word	0x2040c210
  40175c:	004001c9 	.word	0x004001c9
  401760:	2040c204 	.word	0x2040c204
  401764:	2040c300 	.word	0x2040c300
  401768:	2040c2bc 	.word	0x2040c2bc

0040176c <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  40176c:	b130      	cbz	r0, 40177c <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40176e:	4a09      	ldr	r2, [pc, #36]	; (401794 <vTaskSetTimeOutState+0x28>)
  401770:	6812      	ldr	r2, [r2, #0]
  401772:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401774:	4a08      	ldr	r2, [pc, #32]	; (401798 <vTaskSetTimeOutState+0x2c>)
  401776:	6812      	ldr	r2, [r2, #0]
  401778:	6042      	str	r2, [r0, #4]
  40177a:	4770      	bx	lr
  40177c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401780:	b672      	cpsid	i
  401782:	f383 8811 	msr	BASEPRI, r3
  401786:	f3bf 8f6f 	isb	sy
  40178a:	f3bf 8f4f 	dsb	sy
  40178e:	b662      	cpsie	i
  401790:	e7fe      	b.n	401790 <vTaskSetTimeOutState+0x24>
  401792:	bf00      	nop
  401794:	2040c2b8 	.word	0x2040c2b8
  401798:	2040c2fc 	.word	0x2040c2fc

0040179c <xTaskCheckForTimeOut>:
{
  40179c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  40179e:	b1c0      	cbz	r0, 4017d2 <xTaskCheckForTimeOut+0x36>
  4017a0:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4017a2:	b309      	cbz	r1, 4017e8 <xTaskCheckForTimeOut+0x4c>
  4017a4:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4017a6:	4b1d      	ldr	r3, [pc, #116]	; (40181c <xTaskCheckForTimeOut+0x80>)
  4017a8:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  4017aa:	4b1d      	ldr	r3, [pc, #116]	; (401820 <xTaskCheckForTimeOut+0x84>)
  4017ac:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  4017ae:	682b      	ldr	r3, [r5, #0]
  4017b0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4017b4:	d02e      	beq.n	401814 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4017b6:	491b      	ldr	r1, [pc, #108]	; (401824 <xTaskCheckForTimeOut+0x88>)
  4017b8:	6809      	ldr	r1, [r1, #0]
  4017ba:	6820      	ldr	r0, [r4, #0]
  4017bc:	4288      	cmp	r0, r1
  4017be:	d002      	beq.n	4017c6 <xTaskCheckForTimeOut+0x2a>
  4017c0:	6861      	ldr	r1, [r4, #4]
  4017c2:	428a      	cmp	r2, r1
  4017c4:	d228      	bcs.n	401818 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  4017c6:	6861      	ldr	r1, [r4, #4]
  4017c8:	1a50      	subs	r0, r2, r1
  4017ca:	4283      	cmp	r3, r0
  4017cc:	d817      	bhi.n	4017fe <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  4017ce:	2401      	movs	r4, #1
  4017d0:	e01c      	b.n	40180c <xTaskCheckForTimeOut+0x70>
  4017d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017d6:	b672      	cpsid	i
  4017d8:	f383 8811 	msr	BASEPRI, r3
  4017dc:	f3bf 8f6f 	isb	sy
  4017e0:	f3bf 8f4f 	dsb	sy
  4017e4:	b662      	cpsie	i
  4017e6:	e7fe      	b.n	4017e6 <xTaskCheckForTimeOut+0x4a>
  4017e8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017ec:	b672      	cpsid	i
  4017ee:	f383 8811 	msr	BASEPRI, r3
  4017f2:	f3bf 8f6f 	isb	sy
  4017f6:	f3bf 8f4f 	dsb	sy
  4017fa:	b662      	cpsie	i
  4017fc:	e7fe      	b.n	4017fc <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  4017fe:	1a9b      	subs	r3, r3, r2
  401800:	440b      	add	r3, r1
  401802:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  401804:	4620      	mov	r0, r4
  401806:	4b08      	ldr	r3, [pc, #32]	; (401828 <xTaskCheckForTimeOut+0x8c>)
  401808:	4798      	blx	r3
			xReturn = pdFALSE;
  40180a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  40180c:	4b07      	ldr	r3, [pc, #28]	; (40182c <xTaskCheckForTimeOut+0x90>)
  40180e:	4798      	blx	r3
}
  401810:	4620      	mov	r0, r4
  401812:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  401814:	2400      	movs	r4, #0
  401816:	e7f9      	b.n	40180c <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  401818:	2401      	movs	r4, #1
  40181a:	e7f7      	b.n	40180c <xTaskCheckForTimeOut+0x70>
  40181c:	004002f9 	.word	0x004002f9
  401820:	2040c2fc 	.word	0x2040c2fc
  401824:	2040c2b8 	.word	0x2040c2b8
  401828:	0040176d 	.word	0x0040176d
  40182c:	00400345 	.word	0x00400345

00401830 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  401830:	2201      	movs	r2, #1
  401832:	4b01      	ldr	r3, [pc, #4]	; (401838 <vTaskMissedYield+0x8>)
  401834:	601a      	str	r2, [r3, #0]
  401836:	4770      	bx	lr
  401838:	2040c300 	.word	0x2040c300

0040183c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  40183c:	4b05      	ldr	r3, [pc, #20]	; (401854 <xTaskGetSchedulerState+0x18>)
  40183e:	681b      	ldr	r3, [r3, #0]
  401840:	b133      	cbz	r3, 401850 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401842:	4b05      	ldr	r3, [pc, #20]	; (401858 <xTaskGetSchedulerState+0x1c>)
  401844:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401846:	2b00      	cmp	r3, #0
  401848:	bf0c      	ite	eq
  40184a:	2002      	moveq	r0, #2
  40184c:	2000      	movne	r0, #0
  40184e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  401850:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  401852:	4770      	bx	lr
  401854:	2040c2d0 	.word	0x2040c2d0
  401858:	2040c27c 	.word	0x2040c27c

0040185c <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  40185c:	2800      	cmp	r0, #0
  40185e:	d044      	beq.n	4018ea <vTaskPriorityInherit+0x8e>
	{
  401860:	b538      	push	{r3, r4, r5, lr}
  401862:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401864:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401866:	4921      	ldr	r1, [pc, #132]	; (4018ec <vTaskPriorityInherit+0x90>)
  401868:	6809      	ldr	r1, [r1, #0]
  40186a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  40186c:	428a      	cmp	r2, r1
  40186e:	d214      	bcs.n	40189a <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  401870:	6981      	ldr	r1, [r0, #24]
  401872:	2900      	cmp	r1, #0
  401874:	db05      	blt.n	401882 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401876:	491d      	ldr	r1, [pc, #116]	; (4018ec <vTaskPriorityInherit+0x90>)
  401878:	6809      	ldr	r1, [r1, #0]
  40187a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  40187c:	f1c1 0105 	rsb	r1, r1, #5
  401880:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401882:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401886:	491a      	ldr	r1, [pc, #104]	; (4018f0 <vTaskPriorityInherit+0x94>)
  401888:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40188c:	6961      	ldr	r1, [r4, #20]
  40188e:	4291      	cmp	r1, r2
  401890:	d004      	beq.n	40189c <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401892:	4a16      	ldr	r2, [pc, #88]	; (4018ec <vTaskPriorityInherit+0x90>)
  401894:	6812      	ldr	r2, [r2, #0]
  401896:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401898:	62e2      	str	r2, [r4, #44]	; 0x2c
  40189a:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40189c:	1d25      	adds	r5, r4, #4
  40189e:	4628      	mov	r0, r5
  4018a0:	4b14      	ldr	r3, [pc, #80]	; (4018f4 <vTaskPriorityInherit+0x98>)
  4018a2:	4798      	blx	r3
  4018a4:	b970      	cbnz	r0, 4018c4 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4018a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4018a8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4018ac:	4a10      	ldr	r2, [pc, #64]	; (4018f0 <vTaskPriorityInherit+0x94>)
  4018ae:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4018b2:	b93a      	cbnz	r2, 4018c4 <vTaskPriorityInherit+0x68>
  4018b4:	4810      	ldr	r0, [pc, #64]	; (4018f8 <vTaskPriorityInherit+0x9c>)
  4018b6:	6802      	ldr	r2, [r0, #0]
  4018b8:	2101      	movs	r1, #1
  4018ba:	fa01 f303 	lsl.w	r3, r1, r3
  4018be:	ea22 0303 	bic.w	r3, r2, r3
  4018c2:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4018c4:	4b09      	ldr	r3, [pc, #36]	; (4018ec <vTaskPriorityInherit+0x90>)
  4018c6:	681b      	ldr	r3, [r3, #0]
  4018c8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4018ca:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4018cc:	4a0a      	ldr	r2, [pc, #40]	; (4018f8 <vTaskPriorityInherit+0x9c>)
  4018ce:	6811      	ldr	r1, [r2, #0]
  4018d0:	2301      	movs	r3, #1
  4018d2:	4083      	lsls	r3, r0
  4018d4:	430b      	orrs	r3, r1
  4018d6:	6013      	str	r3, [r2, #0]
  4018d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4018dc:	4629      	mov	r1, r5
  4018de:	4b04      	ldr	r3, [pc, #16]	; (4018f0 <vTaskPriorityInherit+0x94>)
  4018e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4018e4:	4b05      	ldr	r3, [pc, #20]	; (4018fc <vTaskPriorityInherit+0xa0>)
  4018e6:	4798      	blx	r3
  4018e8:	bd38      	pop	{r3, r4, r5, pc}
  4018ea:	4770      	bx	lr
  4018ec:	2040c204 	.word	0x2040c204
  4018f0:	2040c210 	.word	0x2040c210
  4018f4:	00400215 	.word	0x00400215
  4018f8:	2040c288 	.word	0x2040c288
  4018fc:	004001c9 	.word	0x004001c9

00401900 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  401900:	2800      	cmp	r0, #0
  401902:	d04d      	beq.n	4019a0 <xTaskPriorityDisinherit+0xa0>
	{
  401904:	b538      	push	{r3, r4, r5, lr}
  401906:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  401908:	4a27      	ldr	r2, [pc, #156]	; (4019a8 <xTaskPriorityDisinherit+0xa8>)
  40190a:	6812      	ldr	r2, [r2, #0]
  40190c:	4290      	cmp	r0, r2
  40190e:	d00a      	beq.n	401926 <xTaskPriorityDisinherit+0x26>
  401910:	f04f 0380 	mov.w	r3, #128	; 0x80
  401914:	b672      	cpsid	i
  401916:	f383 8811 	msr	BASEPRI, r3
  40191a:	f3bf 8f6f 	isb	sy
  40191e:	f3bf 8f4f 	dsb	sy
  401922:	b662      	cpsie	i
  401924:	e7fe      	b.n	401924 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  401926:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  401928:	b952      	cbnz	r2, 401940 <xTaskPriorityDisinherit+0x40>
  40192a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40192e:	b672      	cpsid	i
  401930:	f383 8811 	msr	BASEPRI, r3
  401934:	f3bf 8f6f 	isb	sy
  401938:	f3bf 8f4f 	dsb	sy
  40193c:	b662      	cpsie	i
  40193e:	e7fe      	b.n	40193e <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  401940:	3a01      	subs	r2, #1
  401942:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401944:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  401946:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401948:	4288      	cmp	r0, r1
  40194a:	d02b      	beq.n	4019a4 <xTaskPriorityDisinherit+0xa4>
  40194c:	bb52      	cbnz	r2, 4019a4 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40194e:	1d25      	adds	r5, r4, #4
  401950:	4628      	mov	r0, r5
  401952:	4b16      	ldr	r3, [pc, #88]	; (4019ac <xTaskPriorityDisinherit+0xac>)
  401954:	4798      	blx	r3
  401956:	b968      	cbnz	r0, 401974 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401958:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  40195a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40195e:	4b14      	ldr	r3, [pc, #80]	; (4019b0 <xTaskPriorityDisinherit+0xb0>)
  401960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401964:	b933      	cbnz	r3, 401974 <xTaskPriorityDisinherit+0x74>
  401966:	4813      	ldr	r0, [pc, #76]	; (4019b4 <xTaskPriorityDisinherit+0xb4>)
  401968:	6803      	ldr	r3, [r0, #0]
  40196a:	2201      	movs	r2, #1
  40196c:	408a      	lsls	r2, r1
  40196e:	ea23 0302 	bic.w	r3, r3, r2
  401972:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  401974:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  401976:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401978:	f1c0 0305 	rsb	r3, r0, #5
  40197c:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  40197e:	4a0d      	ldr	r2, [pc, #52]	; (4019b4 <xTaskPriorityDisinherit+0xb4>)
  401980:	6811      	ldr	r1, [r2, #0]
  401982:	2401      	movs	r4, #1
  401984:	fa04 f300 	lsl.w	r3, r4, r0
  401988:	430b      	orrs	r3, r1
  40198a:	6013      	str	r3, [r2, #0]
  40198c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401990:	4629      	mov	r1, r5
  401992:	4b07      	ldr	r3, [pc, #28]	; (4019b0 <xTaskPriorityDisinherit+0xb0>)
  401994:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401998:	4b07      	ldr	r3, [pc, #28]	; (4019b8 <xTaskPriorityDisinherit+0xb8>)
  40199a:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  40199c:	4620      	mov	r0, r4
  40199e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  4019a0:	2000      	movs	r0, #0
  4019a2:	4770      	bx	lr
  4019a4:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4019a6:	bd38      	pop	{r3, r4, r5, pc}
  4019a8:	2040c204 	.word	0x2040c204
  4019ac:	00400215 	.word	0x00400215
  4019b0:	2040c210 	.word	0x2040c210
  4019b4:	2040c288 	.word	0x2040c288
  4019b8:	004001c9 	.word	0x004001c9

004019bc <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  4019bc:	4b05      	ldr	r3, [pc, #20]	; (4019d4 <pvTaskIncrementMutexHeldCount+0x18>)
  4019be:	681b      	ldr	r3, [r3, #0]
  4019c0:	b123      	cbz	r3, 4019cc <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  4019c2:	4b04      	ldr	r3, [pc, #16]	; (4019d4 <pvTaskIncrementMutexHeldCount+0x18>)
  4019c4:	681a      	ldr	r2, [r3, #0]
  4019c6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  4019c8:	3301      	adds	r3, #1
  4019ca:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  4019cc:	4b01      	ldr	r3, [pc, #4]	; (4019d4 <pvTaskIncrementMutexHeldCount+0x18>)
  4019ce:	6818      	ldr	r0, [r3, #0]
	}
  4019d0:	4770      	bx	lr
  4019d2:	bf00      	nop
  4019d4:	2040c204 	.word	0x2040c204

004019d8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  4019d8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  4019da:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4019dc:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  4019de:	4291      	cmp	r1, r2
  4019e0:	d80c      	bhi.n	4019fc <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  4019e2:	1ad2      	subs	r2, r2, r3
  4019e4:	6983      	ldr	r3, [r0, #24]
  4019e6:	429a      	cmp	r2, r3
  4019e8:	d301      	bcc.n	4019ee <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  4019ea:	2001      	movs	r0, #1
  4019ec:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  4019ee:	1d01      	adds	r1, r0, #4
  4019f0:	4b09      	ldr	r3, [pc, #36]	; (401a18 <prvInsertTimerInActiveList+0x40>)
  4019f2:	6818      	ldr	r0, [r3, #0]
  4019f4:	4b09      	ldr	r3, [pc, #36]	; (401a1c <prvInsertTimerInActiveList+0x44>)
  4019f6:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4019f8:	2000      	movs	r0, #0
  4019fa:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4019fc:	429a      	cmp	r2, r3
  4019fe:	d203      	bcs.n	401a08 <prvInsertTimerInActiveList+0x30>
  401a00:	4299      	cmp	r1, r3
  401a02:	d301      	bcc.n	401a08 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  401a04:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  401a06:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401a08:	1d01      	adds	r1, r0, #4
  401a0a:	4b05      	ldr	r3, [pc, #20]	; (401a20 <prvInsertTimerInActiveList+0x48>)
  401a0c:	6818      	ldr	r0, [r3, #0]
  401a0e:	4b03      	ldr	r3, [pc, #12]	; (401a1c <prvInsertTimerInActiveList+0x44>)
  401a10:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401a12:	2000      	movs	r0, #0
  401a14:	bd08      	pop	{r3, pc}
  401a16:	bf00      	nop
  401a18:	2040c308 	.word	0x2040c308
  401a1c:	004001e1 	.word	0x004001e1
  401a20:	2040c304 	.word	0x2040c304

00401a24 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401a24:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401a26:	4b15      	ldr	r3, [pc, #84]	; (401a7c <prvCheckForValidListAndQueue+0x58>)
  401a28:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  401a2a:	4b15      	ldr	r3, [pc, #84]	; (401a80 <prvCheckForValidListAndQueue+0x5c>)
  401a2c:	681b      	ldr	r3, [r3, #0]
  401a2e:	b113      	cbz	r3, 401a36 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401a30:	4b14      	ldr	r3, [pc, #80]	; (401a84 <prvCheckForValidListAndQueue+0x60>)
  401a32:	4798      	blx	r3
  401a34:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  401a36:	4d14      	ldr	r5, [pc, #80]	; (401a88 <prvCheckForValidListAndQueue+0x64>)
  401a38:	4628      	mov	r0, r5
  401a3a:	4e14      	ldr	r6, [pc, #80]	; (401a8c <prvCheckForValidListAndQueue+0x68>)
  401a3c:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  401a3e:	4c14      	ldr	r4, [pc, #80]	; (401a90 <prvCheckForValidListAndQueue+0x6c>)
  401a40:	4620      	mov	r0, r4
  401a42:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401a44:	4b13      	ldr	r3, [pc, #76]	; (401a94 <prvCheckForValidListAndQueue+0x70>)
  401a46:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401a48:	4b13      	ldr	r3, [pc, #76]	; (401a98 <prvCheckForValidListAndQueue+0x74>)
  401a4a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401a4c:	2200      	movs	r2, #0
  401a4e:	2110      	movs	r1, #16
  401a50:	2005      	movs	r0, #5
  401a52:	4b12      	ldr	r3, [pc, #72]	; (401a9c <prvCheckForValidListAndQueue+0x78>)
  401a54:	4798      	blx	r3
  401a56:	4b0a      	ldr	r3, [pc, #40]	; (401a80 <prvCheckForValidListAndQueue+0x5c>)
  401a58:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  401a5a:	b118      	cbz	r0, 401a64 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  401a5c:	4910      	ldr	r1, [pc, #64]	; (401aa0 <prvCheckForValidListAndQueue+0x7c>)
  401a5e:	4b11      	ldr	r3, [pc, #68]	; (401aa4 <prvCheckForValidListAndQueue+0x80>)
  401a60:	4798      	blx	r3
  401a62:	e7e5      	b.n	401a30 <prvCheckForValidListAndQueue+0xc>
  401a64:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a68:	b672      	cpsid	i
  401a6a:	f383 8811 	msr	BASEPRI, r3
  401a6e:	f3bf 8f6f 	isb	sy
  401a72:	f3bf 8f4f 	dsb	sy
  401a76:	b662      	cpsie	i
  401a78:	e7fe      	b.n	401a78 <prvCheckForValidListAndQueue+0x54>
  401a7a:	bf00      	nop
  401a7c:	004002f9 	.word	0x004002f9
  401a80:	2040c338 	.word	0x2040c338
  401a84:	00400345 	.word	0x00400345
  401a88:	2040c30c 	.word	0x2040c30c
  401a8c:	004001ad 	.word	0x004001ad
  401a90:	2040c320 	.word	0x2040c320
  401a94:	2040c304 	.word	0x2040c304
  401a98:	2040c308 	.word	0x2040c308
  401a9c:	00400851 	.word	0x00400851
  401aa0:	00408c8c 	.word	0x00408c8c
  401aa4:	00400d81 	.word	0x00400d81

00401aa8 <xTimerCreateTimerTask>:
{
  401aa8:	b510      	push	{r4, lr}
  401aaa:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  401aac:	4b0f      	ldr	r3, [pc, #60]	; (401aec <xTimerCreateTimerTask+0x44>)
  401aae:	4798      	blx	r3
	if( xTimerQueue != NULL )
  401ab0:	4b0f      	ldr	r3, [pc, #60]	; (401af0 <xTimerCreateTimerTask+0x48>)
  401ab2:	681b      	ldr	r3, [r3, #0]
  401ab4:	b173      	cbz	r3, 401ad4 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  401ab6:	2300      	movs	r3, #0
  401ab8:	9303      	str	r3, [sp, #12]
  401aba:	9302      	str	r3, [sp, #8]
  401abc:	9301      	str	r3, [sp, #4]
  401abe:	2204      	movs	r2, #4
  401ac0:	9200      	str	r2, [sp, #0]
  401ac2:	f44f 7282 	mov.w	r2, #260	; 0x104
  401ac6:	490b      	ldr	r1, [pc, #44]	; (401af4 <xTimerCreateTimerTask+0x4c>)
  401ac8:	480b      	ldr	r0, [pc, #44]	; (401af8 <xTimerCreateTimerTask+0x50>)
  401aca:	4c0c      	ldr	r4, [pc, #48]	; (401afc <xTimerCreateTimerTask+0x54>)
  401acc:	47a0      	blx	r4
	configASSERT( xReturn );
  401ace:	b108      	cbz	r0, 401ad4 <xTimerCreateTimerTask+0x2c>
}
  401ad0:	b004      	add	sp, #16
  401ad2:	bd10      	pop	{r4, pc}
  401ad4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ad8:	b672      	cpsid	i
  401ada:	f383 8811 	msr	BASEPRI, r3
  401ade:	f3bf 8f6f 	isb	sy
  401ae2:	f3bf 8f4f 	dsb	sy
  401ae6:	b662      	cpsie	i
  401ae8:	e7fe      	b.n	401ae8 <xTimerCreateTimerTask+0x40>
  401aea:	bf00      	nop
  401aec:	00401a25 	.word	0x00401a25
  401af0:	2040c338 	.word	0x2040c338
  401af4:	00408c94 	.word	0x00408c94
  401af8:	00401c29 	.word	0x00401c29
  401afc:	00400e91 	.word	0x00400e91

00401b00 <xTimerGenericCommand>:
	configASSERT( xTimer );
  401b00:	b1d8      	cbz	r0, 401b3a <xTimerGenericCommand+0x3a>
{
  401b02:	b530      	push	{r4, r5, lr}
  401b04:	b085      	sub	sp, #20
  401b06:	4615      	mov	r5, r2
  401b08:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  401b0a:	4a15      	ldr	r2, [pc, #84]	; (401b60 <xTimerGenericCommand+0x60>)
  401b0c:	6810      	ldr	r0, [r2, #0]
  401b0e:	b320      	cbz	r0, 401b5a <xTimerGenericCommand+0x5a>
  401b10:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  401b12:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  401b14:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  401b16:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  401b18:	2905      	cmp	r1, #5
  401b1a:	dc19      	bgt.n	401b50 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401b1c:	4b11      	ldr	r3, [pc, #68]	; (401b64 <xTimerGenericCommand+0x64>)
  401b1e:	4798      	blx	r3
  401b20:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  401b22:	f04f 0300 	mov.w	r3, #0
  401b26:	bf0c      	ite	eq
  401b28:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401b2a:	461a      	movne	r2, r3
  401b2c:	4669      	mov	r1, sp
  401b2e:	480c      	ldr	r0, [pc, #48]	; (401b60 <xTimerGenericCommand+0x60>)
  401b30:	6800      	ldr	r0, [r0, #0]
  401b32:	4c0d      	ldr	r4, [pc, #52]	; (401b68 <xTimerGenericCommand+0x68>)
  401b34:	47a0      	blx	r4
}
  401b36:	b005      	add	sp, #20
  401b38:	bd30      	pop	{r4, r5, pc}
  401b3a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b3e:	b672      	cpsid	i
  401b40:	f383 8811 	msr	BASEPRI, r3
  401b44:	f3bf 8f6f 	isb	sy
  401b48:	f3bf 8f4f 	dsb	sy
  401b4c:	b662      	cpsie	i
  401b4e:	e7fe      	b.n	401b4e <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401b50:	2300      	movs	r3, #0
  401b52:	4669      	mov	r1, sp
  401b54:	4c05      	ldr	r4, [pc, #20]	; (401b6c <xTimerGenericCommand+0x6c>)
  401b56:	47a0      	blx	r4
  401b58:	e7ed      	b.n	401b36 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  401b5a:	2000      	movs	r0, #0
	return xReturn;
  401b5c:	e7eb      	b.n	401b36 <xTimerGenericCommand+0x36>
  401b5e:	bf00      	nop
  401b60:	2040c338 	.word	0x2040c338
  401b64:	0040183d 	.word	0x0040183d
  401b68:	004008cd 	.word	0x004008cd
  401b6c:	00400ab1 	.word	0x00400ab1

00401b70 <prvSampleTimeNow>:
{
  401b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401b74:	b082      	sub	sp, #8
  401b76:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  401b78:	4b24      	ldr	r3, [pc, #144]	; (401c0c <prvSampleTimeNow+0x9c>)
  401b7a:	4798      	blx	r3
  401b7c:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  401b7e:	4b24      	ldr	r3, [pc, #144]	; (401c10 <prvSampleTimeNow+0xa0>)
  401b80:	681b      	ldr	r3, [r3, #0]
  401b82:	4298      	cmp	r0, r3
  401b84:	d31b      	bcc.n	401bbe <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  401b86:	2300      	movs	r3, #0
  401b88:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  401b8c:	4b20      	ldr	r3, [pc, #128]	; (401c10 <prvSampleTimeNow+0xa0>)
  401b8e:	601f      	str	r7, [r3, #0]
}
  401b90:	4638      	mov	r0, r7
  401b92:	b002      	add	sp, #8
  401b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401b98:	2100      	movs	r1, #0
  401b9a:	9100      	str	r1, [sp, #0]
  401b9c:	460b      	mov	r3, r1
  401b9e:	4652      	mov	r2, sl
  401ba0:	4620      	mov	r0, r4
  401ba2:	4c1c      	ldr	r4, [pc, #112]	; (401c14 <prvSampleTimeNow+0xa4>)
  401ba4:	47a0      	blx	r4
				configASSERT( xResult );
  401ba6:	b960      	cbnz	r0, 401bc2 <prvSampleTimeNow+0x52>
  401ba8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bac:	b672      	cpsid	i
  401bae:	f383 8811 	msr	BASEPRI, r3
  401bb2:	f3bf 8f6f 	isb	sy
  401bb6:	f3bf 8f4f 	dsb	sy
  401bba:	b662      	cpsie	i
  401bbc:	e7fe      	b.n	401bbc <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401bbe:	4d16      	ldr	r5, [pc, #88]	; (401c18 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401bc0:	4e16      	ldr	r6, [pc, #88]	; (401c1c <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401bc2:	682b      	ldr	r3, [r5, #0]
  401bc4:	681a      	ldr	r2, [r3, #0]
  401bc6:	b1c2      	cbz	r2, 401bfa <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401bc8:	68db      	ldr	r3, [r3, #12]
  401bca:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401bce:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401bd0:	f104 0904 	add.w	r9, r4, #4
  401bd4:	4648      	mov	r0, r9
  401bd6:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401bd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401bda:	4620      	mov	r0, r4
  401bdc:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401bde:	69e3      	ldr	r3, [r4, #28]
  401be0:	2b01      	cmp	r3, #1
  401be2:	d1ee      	bne.n	401bc2 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  401be4:	69a3      	ldr	r3, [r4, #24]
  401be6:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  401be8:	459a      	cmp	sl, r3
  401bea:	d2d5      	bcs.n	401b98 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  401bec:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401bee:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401bf0:	4649      	mov	r1, r9
  401bf2:	6828      	ldr	r0, [r5, #0]
  401bf4:	4b0a      	ldr	r3, [pc, #40]	; (401c20 <prvSampleTimeNow+0xb0>)
  401bf6:	4798      	blx	r3
  401bf8:	e7e3      	b.n	401bc2 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  401bfa:	4a0a      	ldr	r2, [pc, #40]	; (401c24 <prvSampleTimeNow+0xb4>)
  401bfc:	6810      	ldr	r0, [r2, #0]
  401bfe:	4906      	ldr	r1, [pc, #24]	; (401c18 <prvSampleTimeNow+0xa8>)
  401c00:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  401c02:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  401c04:	2301      	movs	r3, #1
  401c06:	f8c8 3000 	str.w	r3, [r8]
  401c0a:	e7bf      	b.n	401b8c <prvSampleTimeNow+0x1c>
  401c0c:	00401161 	.word	0x00401161
  401c10:	2040c334 	.word	0x2040c334
  401c14:	00401b01 	.word	0x00401b01
  401c18:	2040c304 	.word	0x2040c304
  401c1c:	00400215 	.word	0x00400215
  401c20:	004001e1 	.word	0x004001e1
  401c24:	2040c308 	.word	0x2040c308

00401c28 <prvTimerTask>:
{
  401c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401c2c:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401c2e:	4e75      	ldr	r6, [pc, #468]	; (401e04 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  401c30:	4f75      	ldr	r7, [pc, #468]	; (401e08 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  401c32:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 401e30 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401c36:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 401e34 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401c3a:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  401c3c:	681a      	ldr	r2, [r3, #0]
  401c3e:	2a00      	cmp	r2, #0
  401c40:	f000 80ce 	beq.w	401de0 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401c44:	68db      	ldr	r3, [r3, #12]
  401c46:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  401c48:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401c4a:	a804      	add	r0, sp, #16
  401c4c:	4b6f      	ldr	r3, [pc, #444]	; (401e0c <prvTimerTask+0x1e4>)
  401c4e:	4798      	blx	r3
  401c50:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  401c52:	9b04      	ldr	r3, [sp, #16]
  401c54:	2b00      	cmp	r3, #0
  401c56:	d144      	bne.n	401ce2 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401c58:	42a0      	cmp	r0, r4
  401c5a:	d212      	bcs.n	401c82 <prvTimerTask+0x5a>
  401c5c:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401c5e:	1b61      	subs	r1, r4, r5
  401c60:	4b6b      	ldr	r3, [pc, #428]	; (401e10 <prvTimerTask+0x1e8>)
  401c62:	6818      	ldr	r0, [r3, #0]
  401c64:	4b6b      	ldr	r3, [pc, #428]	; (401e14 <prvTimerTask+0x1ec>)
  401c66:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401c68:	4b6b      	ldr	r3, [pc, #428]	; (401e18 <prvTimerTask+0x1f0>)
  401c6a:	4798      	blx	r3
  401c6c:	2800      	cmp	r0, #0
  401c6e:	d13a      	bne.n	401ce6 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  401c70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401c74:	f8c9 3000 	str.w	r3, [r9]
  401c78:	f3bf 8f4f 	dsb	sy
  401c7c:	f3bf 8f6f 	isb	sy
  401c80:	e031      	b.n	401ce6 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  401c82:	4b65      	ldr	r3, [pc, #404]	; (401e18 <prvTimerTask+0x1f0>)
  401c84:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401c86:	6833      	ldr	r3, [r6, #0]
  401c88:	68db      	ldr	r3, [r3, #12]
  401c8a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401c8e:	f10a 0004 	add.w	r0, sl, #4
  401c92:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401c94:	f8da 301c 	ldr.w	r3, [sl, #28]
  401c98:	2b01      	cmp	r3, #1
  401c9a:	d004      	beq.n	401ca6 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401c9c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  401ca0:	4650      	mov	r0, sl
  401ca2:	4798      	blx	r3
  401ca4:	e01f      	b.n	401ce6 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  401ca6:	f8da 1018 	ldr.w	r1, [sl, #24]
  401caa:	4623      	mov	r3, r4
  401cac:	462a      	mov	r2, r5
  401cae:	4421      	add	r1, r4
  401cb0:	4650      	mov	r0, sl
  401cb2:	4d5a      	ldr	r5, [pc, #360]	; (401e1c <prvTimerTask+0x1f4>)
  401cb4:	47a8      	blx	r5
  401cb6:	2801      	cmp	r0, #1
  401cb8:	d1f0      	bne.n	401c9c <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401cba:	2100      	movs	r1, #0
  401cbc:	9100      	str	r1, [sp, #0]
  401cbe:	460b      	mov	r3, r1
  401cc0:	4622      	mov	r2, r4
  401cc2:	4650      	mov	r0, sl
  401cc4:	4c56      	ldr	r4, [pc, #344]	; (401e20 <prvTimerTask+0x1f8>)
  401cc6:	47a0      	blx	r4
			configASSERT( xResult );
  401cc8:	2800      	cmp	r0, #0
  401cca:	d1e7      	bne.n	401c9c <prvTimerTask+0x74>
  401ccc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cd0:	b672      	cpsid	i
  401cd2:	f383 8811 	msr	BASEPRI, r3
  401cd6:	f3bf 8f6f 	isb	sy
  401cda:	f3bf 8f4f 	dsb	sy
  401cde:	b662      	cpsie	i
  401ce0:	e7fe      	b.n	401ce0 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  401ce2:	4b4d      	ldr	r3, [pc, #308]	; (401e18 <prvTimerTask+0x1f0>)
  401ce4:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401ce6:	4d4a      	ldr	r5, [pc, #296]	; (401e10 <prvTimerTask+0x1e8>)
  401ce8:	4c4e      	ldr	r4, [pc, #312]	; (401e24 <prvTimerTask+0x1fc>)
  401cea:	e006      	b.n	401cfa <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  401cec:	9907      	ldr	r1, [sp, #28]
  401cee:	9806      	ldr	r0, [sp, #24]
  401cf0:	9b05      	ldr	r3, [sp, #20]
  401cf2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  401cf4:	9b04      	ldr	r3, [sp, #16]
  401cf6:	2b00      	cmp	r3, #0
  401cf8:	da09      	bge.n	401d0e <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401cfa:	2300      	movs	r3, #0
  401cfc:	461a      	mov	r2, r3
  401cfe:	a904      	add	r1, sp, #16
  401d00:	6828      	ldr	r0, [r5, #0]
  401d02:	47a0      	blx	r4
  401d04:	2800      	cmp	r0, #0
  401d06:	d098      	beq.n	401c3a <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  401d08:	9b04      	ldr	r3, [sp, #16]
  401d0a:	2b00      	cmp	r3, #0
  401d0c:	dbee      	blt.n	401cec <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  401d0e:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  401d12:	f8da 3014 	ldr.w	r3, [sl, #20]
  401d16:	b113      	cbz	r3, 401d1e <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401d18:	f10a 0004 	add.w	r0, sl, #4
  401d1c:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401d1e:	a803      	add	r0, sp, #12
  401d20:	4b3a      	ldr	r3, [pc, #232]	; (401e0c <prvTimerTask+0x1e4>)
  401d22:	4798      	blx	r3
			switch( xMessage.xMessageID )
  401d24:	9b04      	ldr	r3, [sp, #16]
  401d26:	2b09      	cmp	r3, #9
  401d28:	d8e7      	bhi.n	401cfa <prvTimerTask+0xd2>
  401d2a:	a201      	add	r2, pc, #4	; (adr r2, 401d30 <prvTimerTask+0x108>)
  401d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401d30:	00401d59 	.word	0x00401d59
  401d34:	00401d59 	.word	0x00401d59
  401d38:	00401d59 	.word	0x00401d59
  401d3c:	00401cfb 	.word	0x00401cfb
  401d40:	00401dad 	.word	0x00401dad
  401d44:	00401dd9 	.word	0x00401dd9
  401d48:	00401d59 	.word	0x00401d59
  401d4c:	00401d59 	.word	0x00401d59
  401d50:	00401cfb 	.word	0x00401cfb
  401d54:	00401dad 	.word	0x00401dad
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  401d58:	9c05      	ldr	r4, [sp, #20]
  401d5a:	f8da 1018 	ldr.w	r1, [sl, #24]
  401d5e:	4623      	mov	r3, r4
  401d60:	4602      	mov	r2, r0
  401d62:	4421      	add	r1, r4
  401d64:	4650      	mov	r0, sl
  401d66:	4c2d      	ldr	r4, [pc, #180]	; (401e1c <prvTimerTask+0x1f4>)
  401d68:	47a0      	blx	r4
  401d6a:	2801      	cmp	r0, #1
  401d6c:	d1bc      	bne.n	401ce8 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401d6e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  401d72:	4650      	mov	r0, sl
  401d74:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401d76:	f8da 301c 	ldr.w	r3, [sl, #28]
  401d7a:	2b01      	cmp	r3, #1
  401d7c:	d1b4      	bne.n	401ce8 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  401d7e:	f8da 2018 	ldr.w	r2, [sl, #24]
  401d82:	2100      	movs	r1, #0
  401d84:	9100      	str	r1, [sp, #0]
  401d86:	460b      	mov	r3, r1
  401d88:	9805      	ldr	r0, [sp, #20]
  401d8a:	4402      	add	r2, r0
  401d8c:	4650      	mov	r0, sl
  401d8e:	4c24      	ldr	r4, [pc, #144]	; (401e20 <prvTimerTask+0x1f8>)
  401d90:	47a0      	blx	r4
							configASSERT( xResult );
  401d92:	2800      	cmp	r0, #0
  401d94:	d1a8      	bne.n	401ce8 <prvTimerTask+0xc0>
  401d96:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d9a:	b672      	cpsid	i
  401d9c:	f383 8811 	msr	BASEPRI, r3
  401da0:	f3bf 8f6f 	isb	sy
  401da4:	f3bf 8f4f 	dsb	sy
  401da8:	b662      	cpsie	i
  401daa:	e7fe      	b.n	401daa <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  401dac:	9905      	ldr	r1, [sp, #20]
  401dae:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  401db2:	b131      	cbz	r1, 401dc2 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  401db4:	4603      	mov	r3, r0
  401db6:	4602      	mov	r2, r0
  401db8:	4401      	add	r1, r0
  401dba:	4650      	mov	r0, sl
  401dbc:	4c17      	ldr	r4, [pc, #92]	; (401e1c <prvTimerTask+0x1f4>)
  401dbe:	47a0      	blx	r4
  401dc0:	e792      	b.n	401ce8 <prvTimerTask+0xc0>
  401dc2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dc6:	b672      	cpsid	i
  401dc8:	f383 8811 	msr	BASEPRI, r3
  401dcc:	f3bf 8f6f 	isb	sy
  401dd0:	f3bf 8f4f 	dsb	sy
  401dd4:	b662      	cpsie	i
  401dd6:	e7fe      	b.n	401dd6 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  401dd8:	4650      	mov	r0, sl
  401dda:	4b13      	ldr	r3, [pc, #76]	; (401e28 <prvTimerTask+0x200>)
  401ddc:	4798      	blx	r3
  401dde:	e783      	b.n	401ce8 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  401de0:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401de2:	a804      	add	r0, sp, #16
  401de4:	4b09      	ldr	r3, [pc, #36]	; (401e0c <prvTimerTask+0x1e4>)
  401de6:	4798      	blx	r3
  401de8:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  401dea:	9b04      	ldr	r3, [sp, #16]
  401dec:	2b00      	cmp	r3, #0
  401dee:	f47f af78 	bne.w	401ce2 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  401df2:	4b0e      	ldr	r3, [pc, #56]	; (401e2c <prvTimerTask+0x204>)
  401df4:	681b      	ldr	r3, [r3, #0]
  401df6:	681a      	ldr	r2, [r3, #0]
  401df8:	fab2 f282 	clz	r2, r2
  401dfc:	0952      	lsrs	r2, r2, #5
  401dfe:	2400      	movs	r4, #0
  401e00:	e72d      	b.n	401c5e <prvTimerTask+0x36>
  401e02:	bf00      	nop
  401e04:	2040c304 	.word	0x2040c304
  401e08:	00401151 	.word	0x00401151
  401e0c:	00401b71 	.word	0x00401b71
  401e10:	2040c338 	.word	0x2040c338
  401e14:	00400db5 	.word	0x00400db5
  401e18:	004012b9 	.word	0x004012b9
  401e1c:	004019d9 	.word	0x004019d9
  401e20:	00401b01 	.word	0x00401b01
  401e24:	00400bb1 	.word	0x00400bb1
  401e28:	004005c5 	.word	0x004005c5
  401e2c:	2040c308 	.word	0x2040c308
  401e30:	e000ed04 	.word	0xe000ed04
  401e34:	00400215 	.word	0x00400215

00401e38 <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  401e38:	2810      	cmp	r0, #16
  401e3a:	d108      	bne.n	401e4e <chip_isr+0x16>
  401e3c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401e40:	d105      	bne.n	401e4e <chip_isr+0x16>
{
  401e42:	b508      	push	{r3, lr}
		if (gpfIsr) {
  401e44:	4b02      	ldr	r3, [pc, #8]	; (401e50 <chip_isr+0x18>)
  401e46:	681b      	ldr	r3, [r3, #0]
  401e48:	b103      	cbz	r3, 401e4c <chip_isr+0x14>
			gpfIsr();
  401e4a:	4798      	blx	r3
  401e4c:	bd08      	pop	{r3, pc}
  401e4e:	4770      	bx	lr
  401e50:	2040c33c 	.word	0x2040c33c

00401e54 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  401e54:	b150      	cbz	r0, 401e6c <nm_bsp_sleep+0x18>
{
  401e56:	b570      	push	{r4, r5, r6, lr}
  401e58:	1e44      	subs	r4, r0, #1
		delay_ms(4);
  401e5a:	4e05      	ldr	r6, [pc, #20]	; (401e70 <nm_bsp_sleep+0x1c>)
  401e5c:	4d05      	ldr	r5, [pc, #20]	; (401e74 <nm_bsp_sleep+0x20>)
  401e5e:	4630      	mov	r0, r6
  401e60:	47a8      	blx	r5
	while(u32TimeMsec--) {
  401e62:	3c01      	subs	r4, #1
  401e64:	f1b4 3fff 	cmp.w	r4, #4294967295
  401e68:	d1f9      	bne.n	401e5e <nm_bsp_sleep+0xa>
  401e6a:	bd70      	pop	{r4, r5, r6, pc}
  401e6c:	4770      	bx	lr
  401e6e:	bf00      	nop
  401e70:	00031635 	.word	0x00031635
  401e74:	20400001 	.word	0x20400001

00401e78 <nm_bsp_reset>:
{
  401e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401e7c:	4f09      	ldr	r7, [pc, #36]	; (401ea4 <nm_bsp_reset+0x2c>)
  401e7e:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  401e82:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  401e86:	4d08      	ldr	r5, [pc, #32]	; (401ea8 <nm_bsp_reset+0x30>)
  401e88:	2608      	movs	r6, #8
  401e8a:	636e      	str	r6, [r5, #52]	; 0x34
	nm_bsp_sleep(100);
  401e8c:	2064      	movs	r0, #100	; 0x64
  401e8e:	4c07      	ldr	r4, [pc, #28]	; (401eac <nm_bsp_reset+0x34>)
  401e90:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401e92:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	nm_bsp_sleep(100);
  401e96:	2064      	movs	r0, #100	; 0x64
  401e98:	47a0      	blx	r4
  401e9a:	632e      	str	r6, [r5, #48]	; 0x30
	nm_bsp_sleep(100);
  401e9c:	2064      	movs	r0, #100	; 0x64
  401e9e:	47a0      	blx	r4
  401ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401ea4:	400e1200 	.word	0x400e1200
  401ea8:	400e1000 	.word	0x400e1000
  401eac:	00401e55 	.word	0x00401e55

00401eb0 <nm_bsp_init>:
{
  401eb0:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  401eb2:	2200      	movs	r2, #0
  401eb4:	4b14      	ldr	r3, [pc, #80]	; (401f08 <nm_bsp_init+0x58>)
  401eb6:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  401eb8:	200a      	movs	r0, #10
  401eba:	4c14      	ldr	r4, [pc, #80]	; (401f0c <nm_bsp_init+0x5c>)
  401ebc:	47a0      	blx	r4
  401ebe:	200b      	movs	r0, #11
  401ec0:	47a0      	blx	r4
  401ec2:	200c      	movs	r0, #12
  401ec4:	47a0      	blx	r4
  401ec6:	2010      	movs	r0, #16
  401ec8:	47a0      	blx	r4
  401eca:	2011      	movs	r0, #17
  401ecc:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401ece:	4b10      	ldr	r3, [pc, #64]	; (401f10 <nm_bsp_init+0x60>)
  401ed0:	2208      	movs	r2, #8
  401ed2:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401ed4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401ed8:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401eda:	4a0e      	ldr	r2, [pc, #56]	; (401f14 <nm_bsp_init+0x64>)
  401edc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  401ee0:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401ee2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401ee6:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401ee8:	2204      	movs	r2, #4
  401eea:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401eec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401ef0:	631a      	str	r2, [r3, #48]	; 0x30
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  401ef2:	4b09      	ldr	r3, [pc, #36]	; (401f18 <nm_bsp_init+0x68>)
  401ef4:	681b      	ldr	r3, [r3, #0]
  401ef6:	f013 0f01 	tst.w	r3, #1
  401efa:	d001      	beq.n	401f00 <nm_bsp_init+0x50>
  401efc:	4b06      	ldr	r3, [pc, #24]	; (401f18 <nm_bsp_init+0x68>)
  401efe:	681b      	ldr	r3, [r3, #0]
	nm_bsp_reset();
  401f00:	4b06      	ldr	r3, [pc, #24]	; (401f1c <nm_bsp_init+0x6c>)
  401f02:	4798      	blx	r3
}
  401f04:	2000      	movs	r0, #0
  401f06:	bd10      	pop	{r4, pc}
  401f08:	2040c33c 	.word	0x2040c33c
  401f0c:	00405101 	.word	0x00405101
  401f10:	400e1000 	.word	0x400e1000
  401f14:	400e1200 	.word	0x400e1200
  401f18:	e000e010 	.word	0xe000e010
  401f1c:	00401e79 	.word	0x00401e79

00401f20 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  401f20:	b530      	push	{r4, r5, lr}
  401f22:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  401f24:	4b14      	ldr	r3, [pc, #80]	; (401f78 <nm_bsp_register_isr+0x58>)
  401f26:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  401f28:	2010      	movs	r0, #16
  401f2a:	4b14      	ldr	r3, [pc, #80]	; (401f7c <nm_bsp_register_isr+0x5c>)
  401f2c:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  401f2e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401f32:	207c      	movs	r0, #124	; 0x7c
  401f34:	4b12      	ldr	r3, [pc, #72]	; (401f80 <nm_bsp_register_isr+0x60>)
  401f36:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  401f38:	4c12      	ldr	r4, [pc, #72]	; (401f84 <nm_bsp_register_isr+0x64>)
  401f3a:	2201      	movs	r2, #1
  401f3c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401f40:	4620      	mov	r0, r4
  401f42:	4b11      	ldr	r3, [pc, #68]	; (401f88 <nm_bsp_register_isr+0x68>)
  401f44:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  401f46:	4b11      	ldr	r3, [pc, #68]	; (401f8c <nm_bsp_register_isr+0x6c>)
  401f48:	9300      	str	r3, [sp, #0]
  401f4a:	2351      	movs	r3, #81	; 0x51
  401f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f50:	2110      	movs	r1, #16
  401f52:	4620      	mov	r0, r4
  401f54:	4d0e      	ldr	r5, [pc, #56]	; (401f90 <nm_bsp_register_isr+0x70>)
  401f56:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  401f58:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401f5c:	4620      	mov	r0, r4
  401f5e:	4b0d      	ldr	r3, [pc, #52]	; (401f94 <nm_bsp_register_isr+0x74>)
  401f60:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401f62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401f66:	4b0c      	ldr	r3, [pc, #48]	; (401f98 <nm_bsp_register_isr+0x78>)
  401f68:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  401f6a:	2200      	movs	r2, #0
  401f6c:	2110      	movs	r1, #16
  401f6e:	4620      	mov	r0, r4
  401f70:	4b0a      	ldr	r3, [pc, #40]	; (401f9c <nm_bsp_register_isr+0x7c>)
  401f72:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  401f74:	b003      	add	sp, #12
  401f76:	bd30      	pop	{r4, r5, pc}
  401f78:	2040c33c 	.word	0x2040c33c
  401f7c:	00405101 	.word	0x00405101
  401f80:	00404d09 	.word	0x00404d09
  401f84:	400e1400 	.word	0x400e1400
  401f88:	00404bcd 	.word	0x00404bcd
  401f8c:	00401e39 	.word	0x00401e39
  401f90:	00404e89 	.word	0x00404e89
  401f94:	00404cf9 	.word	0x00404cf9
  401f98:	e000e100 	.word	0xe000e100
  401f9c:	00404f5d 	.word	0x00404f5d

00401fa0 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  401fa0:	b508      	push	{r3, lr}
	if (u8Enable) {
  401fa2:	b928      	cbnz	r0, 401fb0 <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  401fa4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401fa8:	4804      	ldr	r0, [pc, #16]	; (401fbc <nm_bsp_interrupt_ctrl+0x1c>)
  401faa:	4b05      	ldr	r3, [pc, #20]	; (401fc0 <nm_bsp_interrupt_ctrl+0x20>)
  401fac:	4798      	blx	r3
  401fae:	bd08      	pop	{r3, pc}
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  401fb0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401fb4:	4801      	ldr	r0, [pc, #4]	; (401fbc <nm_bsp_interrupt_ctrl+0x1c>)
  401fb6:	4b03      	ldr	r3, [pc, #12]	; (401fc4 <nm_bsp_interrupt_ctrl+0x24>)
  401fb8:	4798      	blx	r3
  401fba:	bd08      	pop	{r3, pc}
  401fbc:	400e1400 	.word	0x400e1400
  401fc0:	00404cfd 	.word	0x00404cfd
  401fc4:	00404cf9 	.word	0x00404cf9

00401fc8 <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  401fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_PUDR = mask;
  401fca:	4c39      	ldr	r4, [pc, #228]	; (4020b0 <nm_bus_init+0xe8>)
  401fcc:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  401fd0:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401fd2:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401fd6:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401fd8:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401fda:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401fde:	6f23      	ldr	r3, [r4, #112]	; 0x70
  401fe0:	430b      	orrs	r3, r1
  401fe2:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401fe4:	6f63      	ldr	r3, [r4, #116]	; 0x74
  401fe6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  401fea:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  401fec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401ff0:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  401ff2:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  401ff6:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  401ff8:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401ffa:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  401ffe:	6f23      	ldr	r3, [r4, #112]	; 0x70
  402000:	4313      	orrs	r3, r2
  402002:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402004:	6f63      	ldr	r3, [r4, #116]	; 0x74
  402006:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  40200a:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  40200c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  402010:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402012:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402016:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  402018:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40201a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40201e:	6f20      	ldr	r0, [r4, #112]	; 0x70
  402020:	4318      	orrs	r0, r3
  402022:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402024:	6f60      	ldr	r0, [r4, #116]	; 0x74
  402026:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  40202a:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40202c:	6061      	str	r1, [r4, #4]
  40202e:	6062      	str	r2, [r4, #4]
  402030:	6063      	str	r3, [r4, #4]
  402032:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  402036:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  402038:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  40203a:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  40203c:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  40203e:	4d1d      	ldr	r5, [pc, #116]	; (4020b4 <nm_bus_init+0xec>)
  402040:	4628      	mov	r0, r5
  402042:	4b1d      	ldr	r3, [pc, #116]	; (4020b8 <nm_bus_init+0xf0>)
  402044:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  402046:	2302      	movs	r3, #2
  402048:	602b      	str	r3, [r5, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  40204a:	2380      	movs	r3, #128	; 0x80
  40204c:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  40204e:	686b      	ldr	r3, [r5, #4]
  402050:	f043 0301 	orr.w	r3, r3, #1
  402054:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  402056:	686b      	ldr	r3, [r5, #4]
  402058:	f043 0310 	orr.w	r3, r3, #16
  40205c:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  40205e:	2101      	movs	r1, #1
  402060:	4628      	mov	r0, r5
  402062:	4b16      	ldr	r3, [pc, #88]	; (4020bc <nm_bus_init+0xf4>)
  402064:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  402066:	2200      	movs	r2, #0
  402068:	2101      	movs	r1, #1
  40206a:	4628      	mov	r0, r5
  40206c:	4b14      	ldr	r3, [pc, #80]	; (4020c0 <nm_bus_init+0xf8>)
  40206e:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  402070:	2201      	movs	r2, #1
  402072:	4611      	mov	r1, r2
  402074:	4628      	mov	r0, r5
  402076:	4b13      	ldr	r3, [pc, #76]	; (4020c4 <nm_bus_init+0xfc>)
  402078:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  40207a:	2200      	movs	r2, #0
  40207c:	2101      	movs	r1, #1
  40207e:	4628      	mov	r0, r5
  402080:	4b11      	ldr	r3, [pc, #68]	; (4020c8 <nm_bus_init+0x100>)
  402082:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  402084:	4911      	ldr	r1, [pc, #68]	; (4020cc <nm_bus_init+0x104>)
  402086:	4812      	ldr	r0, [pc, #72]	; (4020d0 <nm_bus_init+0x108>)
  402088:	4b12      	ldr	r3, [pc, #72]	; (4020d4 <nm_bus_init+0x10c>)
  40208a:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  40208c:	b2c2      	uxtb	r2, r0
  40208e:	2101      	movs	r1, #1
  402090:	4628      	mov	r0, r5
  402092:	4b11      	ldr	r3, [pc, #68]	; (4020d8 <nm_bus_init+0x110>)
  402094:	4798      	blx	r3
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  402096:	2300      	movs	r3, #0
  402098:	461a      	mov	r2, r3
  40209a:	2101      	movs	r1, #1
  40209c:	4628      	mov	r0, r5
  40209e:	4f0f      	ldr	r7, [pc, #60]	; (4020dc <nm_bus_init+0x114>)
  4020a0:	47b8      	blx	r7
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4020a2:	2301      	movs	r3, #1
  4020a4:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  4020a6:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  4020a8:	4b0d      	ldr	r3, [pc, #52]	; (4020e0 <nm_bus_init+0x118>)
  4020aa:	4798      	blx	r3
#endif
	return result;
}
  4020ac:	2000      	movs	r0, #0
  4020ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4020b0:	400e1400 	.word	0x400e1400
  4020b4:	40008000 	.word	0x40008000
  4020b8:	00405155 	.word	0x00405155
  4020bc:	00405181 	.word	0x00405181
  4020c0:	004051fb 	.word	0x004051fb
  4020c4:	00405219 	.word	0x00405219
  4020c8:	00405237 	.word	0x00405237
  4020cc:	11e1a300 	.word	0x11e1a300
  4020d0:	02dc6c00 	.word	0x02dc6c00
  4020d4:	0040524b 	.word	0x0040524b
  4020d8:	00405261 	.word	0x00405261
  4020dc:	00405289 	.word	0x00405289
  4020e0:	00401e79 	.word	0x00401e79

004020e4 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  4020e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4020e8:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  4020ea:	2803      	cmp	r0, #3
  4020ec:	d144      	bne.n	402178 <nm_bus_ioctl+0x94>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  4020ee:	680e      	ldr	r6, [r1, #0]
  4020f0:	684d      	ldr	r5, [r1, #4]
  4020f2:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
  4020f4:	2300      	movs	r3, #0
  4020f6:	f88d 3004 	strb.w	r3, [sp, #4]
	uint16_t rxd_data = 0;
  4020fa:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (!pu8Mosi) {
  4020fe:	b186      	cbz	r6, 402122 <nm_bus_ioctl+0x3e>
	else if(!pu8Miso) {
  402100:	2d00      	cmp	r5, #0
  402102:	d136      	bne.n	402172 <nm_bus_ioctl+0x8e>
		u8SkipMiso = 1;
  402104:	f04f 0801 	mov.w	r8, #1
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  402108:	4699      	mov	r9, r3
		pu8Miso = &u8Dummy;
  40210a:	ad01      	add	r5, sp, #4
	SPI_ASSERT_CS();
  40210c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  402110:	4b20      	ldr	r3, [pc, #128]	; (402194 <nm_bus_ioctl+0xb0>)
  402112:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  402114:	b32c      	cbz	r4, 402162 <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  402116:	4f20      	ldr	r7, [pc, #128]	; (402198 <nm_bus_ioctl+0xb4>)
  402118:	f8df b094 	ldr.w	fp, [pc, #148]	; 4021b0 <nm_bus_ioctl+0xcc>
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  40211c:	f8df a094 	ldr.w	sl, [pc, #148]	; 4021b4 <nm_bus_ioctl+0xd0>
  402120:	e006      	b.n	402130 <nm_bus_ioctl+0x4c>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  402122:	f04f 0800 	mov.w	r8, #0
		u8SkipMosi = 1;
  402126:	f04f 0901 	mov.w	r9, #1
		pu8Mosi = &u8Dummy;
  40212a:	ae01      	add	r6, sp, #4
  40212c:	e7ee      	b.n	40210c <nm_bus_ioctl+0x28>
	while (u16Sz) {
  40212e:	b1c4      	cbz	r4, 402162 <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  402130:	2300      	movs	r3, #0
  402132:	461a      	mov	r2, r3
  402134:	7831      	ldrb	r1, [r6, #0]
  402136:	4638      	mov	r0, r7
  402138:	47d8      	blx	fp
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  40213a:	f10d 0205 	add.w	r2, sp, #5
  40213e:	f10d 0106 	add.w	r1, sp, #6
  402142:	4638      	mov	r0, r7
  402144:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  402146:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40214a:	702b      	strb	r3, [r5, #0]
		u16Sz--;
  40214c:	3c01      	subs	r4, #1
  40214e:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  402150:	f1b8 0f00 	cmp.w	r8, #0
  402154:	d100      	bne.n	402158 <nm_bus_ioctl+0x74>
			pu8Miso++;
  402156:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  402158:	f1b9 0f00 	cmp.w	r9, #0
  40215c:	d1e7      	bne.n	40212e <nm_bus_ioctl+0x4a>
			pu8Mosi++;
  40215e:	3601      	adds	r6, #1
  402160:	e7e5      	b.n	40212e <nm_bus_ioctl+0x4a>
	SPI_DEASSERT_CS();
  402162:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  402166:	4b0b      	ldr	r3, [pc, #44]	; (402194 <nm_bus_ioctl+0xb0>)
  402168:	631a      	str	r2, [r3, #48]	; 0x30
	return M2M_SUCCESS;
  40216a:	2000      	movs	r0, #0
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  40216c:	b003      	add	sp, #12
  40216e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return M2M_ERR_BUS_FAIL;
  402172:	f06f 0005 	mvn.w	r0, #5
		break;
  402176:	e7f9      	b.n	40216c <nm_bus_ioctl+0x88>
			M2M_ERR("Invalid IOCTL command!\n");
  402178:	f240 121f 	movw	r2, #287	; 0x11f
  40217c:	4907      	ldr	r1, [pc, #28]	; (40219c <nm_bus_ioctl+0xb8>)
  40217e:	4808      	ldr	r0, [pc, #32]	; (4021a0 <nm_bus_ioctl+0xbc>)
  402180:	4c08      	ldr	r4, [pc, #32]	; (4021a4 <nm_bus_ioctl+0xc0>)
  402182:	47a0      	blx	r4
  402184:	4808      	ldr	r0, [pc, #32]	; (4021a8 <nm_bus_ioctl+0xc4>)
  402186:	47a0      	blx	r4
  402188:	4808      	ldr	r0, [pc, #32]	; (4021ac <nm_bus_ioctl+0xc8>)
  40218a:	47a0      	blx	r4
			s8Ret = -1;
  40218c:	f04f 30ff 	mov.w	r0, #4294967295
			break;
  402190:	e7ec      	b.n	40216c <nm_bus_ioctl+0x88>
  402192:	bf00      	nop
  402194:	400e1400 	.word	0x400e1400
  402198:	40008000 	.word	0x40008000
  40219c:	00408c9c 	.word	0x00408c9c
  4021a0:	00408cac 	.word	0x00408cac
  4021a4:	00405d39 	.word	0x00405d39
  4021a8:	00408cc0 	.word	0x00408cc0
  4021ac:	00408cd8 	.word	0x00408cd8
  4021b0:	004051c7 	.word	0x004051c7
  4021b4:	00405197 	.word	0x00405197

004021b8 <nm_bus_deinit>:
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4021b8:	2202      	movs	r2, #2
  4021ba:	4b0e      	ldr	r3, [pc, #56]	; (4021f4 <nm_bus_deinit+0x3c>)
  4021bc:	601a      	str	r2, [r3, #0]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4021be:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  4021c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4021c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4021ca:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4021cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4021d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4021d4:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4021d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4021da:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4021de:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4021e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4021e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4021e8:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4021ea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  4021ee:	2000      	movs	r0, #0
  4021f0:	4770      	bx	lr
  4021f2:	bf00      	nop
  4021f4:	40008000 	.word	0x40008000

004021f8 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  4021f8:	b13a      	cbz	r2, 40220a <m2m_memcpy+0x12>
  4021fa:	3901      	subs	r1, #1
  4021fc:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  4021fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  402202:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  402206:	4290      	cmp	r0, r2
  402208:	d1f9      	bne.n	4021fe <m2m_memcpy+0x6>
  40220a:	4770      	bx	lr

0040220c <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  40220c:	b122      	cbz	r2, 402218 <m2m_memset+0xc>
  40220e:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  402210:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  402214:	4290      	cmp	r0, r2
  402216:	d1fb      	bne.n	402210 <m2m_memset+0x4>
  402218:	4770      	bx	lr

0040221a <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  40221a:	7803      	ldrb	r3, [r0, #0]
  40221c:	b143      	cbz	r3, 402230 <m2m_strlen+0x16>
  40221e:	2300      	movs	r3, #0
	{
		u16StrLen ++;
  402220:	3301      	adds	r3, #1
  402222:	b29b      	uxth	r3, r3
	while(*pcStr)
  402224:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  402228:	2a00      	cmp	r2, #0
  40222a:	d1f9      	bne.n	402220 <m2m_strlen+0x6>
		pcStr++;
	}
	return u16StrLen;
}
  40222c:	4618      	mov	r0, r3
  40222e:	4770      	bx	lr
	uint16	u16StrLen = 0;
  402230:	2300      	movs	r3, #0
  402232:	e7fb      	b.n	40222c <m2m_strlen+0x12>

00402234 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  402234:	4a02      	ldr	r2, [pc, #8]	; (402240 <isr+0xc>)
  402236:	7813      	ldrb	r3, [r2, #0]
  402238:	3301      	adds	r3, #1
  40223a:	b2db      	uxtb	r3, r3
  40223c:	7013      	strb	r3, [r2, #0]
  40223e:	4770      	bx	lr
  402240:	2040c343 	.word	0x2040c343

00402244 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  402244:	4770      	bx	lr
	...

00402248 <hif_set_rx_done>:
{
  402248:	b500      	push	{lr}
  40224a:	b083      	sub	sp, #12
	nm_bsp_interrupt_ctrl(1);
  40224c:	2001      	movs	r0, #1
  40224e:	4b0b      	ldr	r3, [pc, #44]	; (40227c <hif_set_rx_done+0x34>)
  402250:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  402252:	a901      	add	r1, sp, #4
  402254:	f241 0070 	movw	r0, #4208	; 0x1070
  402258:	4b09      	ldr	r3, [pc, #36]	; (402280 <hif_set_rx_done+0x38>)
  40225a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  40225c:	4603      	mov	r3, r0
  40225e:	b118      	cbz	r0, 402268 <hif_set_rx_done+0x20>
}
  402260:	4618      	mov	r0, r3
  402262:	b003      	add	sp, #12
  402264:	f85d fb04 	ldr.w	pc, [sp], #4
	reg |= (1<<1);
  402268:	9901      	ldr	r1, [sp, #4]
  40226a:	f041 0102 	orr.w	r1, r1, #2
  40226e:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  402270:	f241 0070 	movw	r0, #4208	; 0x1070
  402274:	4b03      	ldr	r3, [pc, #12]	; (402284 <hif_set_rx_done+0x3c>)
  402276:	4798      	blx	r3
  402278:	4603      	mov	r3, r0
  40227a:	e7f1      	b.n	402260 <hif_set_rx_done+0x18>
  40227c:	00401fa1 	.word	0x00401fa1
  402280:	00403565 	.word	0x00403565
  402284:	00403571 	.word	0x00403571

00402288 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  402288:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  40228a:	4b12      	ldr	r3, [pc, #72]	; (4022d4 <hif_chip_wake+0x4c>)
  40228c:	781b      	ldrb	r3, [r3, #0]
  40228e:	b94b      	cbnz	r3, 4022a4 <hif_chip_wake+0x1c>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  402290:	4b11      	ldr	r3, [pc, #68]	; (4022d8 <hif_chip_wake+0x50>)
  402292:	781b      	ldrb	r3, [r3, #0]
  402294:	b2db      	uxtb	r3, r3
  402296:	2b03      	cmp	r3, #3
  402298:	d00c      	beq.n	4022b4 <hif_chip_wake+0x2c>
  40229a:	4b0f      	ldr	r3, [pc, #60]	; (4022d8 <hif_chip_wake+0x50>)
  40229c:	781b      	ldrb	r3, [r3, #0]
  40229e:	b2db      	uxtb	r3, r3
  4022a0:	2b04      	cmp	r3, #4
  4022a2:	d007      	beq.n	4022b4 <hif_chip_wake+0x2c>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  4022a4:	4a0b      	ldr	r2, [pc, #44]	; (4022d4 <hif_chip_wake+0x4c>)
  4022a6:	7813      	ldrb	r3, [r2, #0]
  4022a8:	3301      	adds	r3, #1
  4022aa:	b2db      	uxtb	r3, r3
  4022ac:	7013      	strb	r3, [r2, #0]
  4022ae:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  4022b0:	4618      	mov	r0, r3
  4022b2:	bd08      	pop	{r3, pc}
			ret = nm_clkless_wake();
  4022b4:	4b09      	ldr	r3, [pc, #36]	; (4022dc <hif_chip_wake+0x54>)
  4022b6:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4022b8:	4603      	mov	r3, r0
  4022ba:	2800      	cmp	r0, #0
  4022bc:	d1f8      	bne.n	4022b0 <hif_chip_wake+0x28>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  4022be:	f245 6178 	movw	r1, #22136	; 0x5678
  4022c2:	f241 0074 	movw	r0, #4212	; 0x1074
  4022c6:	4b06      	ldr	r3, [pc, #24]	; (4022e0 <hif_chip_wake+0x58>)
  4022c8:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4022ca:	4603      	mov	r3, r0
  4022cc:	2800      	cmp	r0, #0
  4022ce:	d0e9      	beq.n	4022a4 <hif_chip_wake+0x1c>
  4022d0:	e7ee      	b.n	4022b0 <hif_chip_wake+0x28>
  4022d2:	bf00      	nop
  4022d4:	2040c341 	.word	0x2040c341
  4022d8:	2040c340 	.word	0x2040c340
  4022dc:	004030d5 	.word	0x004030d5
  4022e0:	00403571 	.word	0x00403571

004022e4 <hif_chip_sleep>:

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  4022e4:	4b1e      	ldr	r3, [pc, #120]	; (402360 <hif_chip_sleep+0x7c>)
  4022e6:	781b      	ldrb	r3, [r3, #0]
  4022e8:	b123      	cbz	r3, 4022f4 <hif_chip_sleep+0x10>
	{
		gu8ChipSleep--;
  4022ea:	4a1d      	ldr	r2, [pc, #116]	; (402360 <hif_chip_sleep+0x7c>)
  4022ec:	7813      	ldrb	r3, [r2, #0]
  4022ee:	3b01      	subs	r3, #1
  4022f0:	b2db      	uxtb	r3, r3
  4022f2:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  4022f4:	4b1a      	ldr	r3, [pc, #104]	; (402360 <hif_chip_sleep+0x7c>)
  4022f6:	781b      	ldrb	r3, [r3, #0]
  4022f8:	2b00      	cmp	r3, #0
  4022fa:	d12e      	bne.n	40235a <hif_chip_sleep+0x76>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  4022fc:	4b19      	ldr	r3, [pc, #100]	; (402364 <hif_chip_sleep+0x80>)
  4022fe:	781b      	ldrb	r3, [r3, #0]
  402300:	b2db      	uxtb	r3, r3
  402302:	2b03      	cmp	r3, #3
  402304:	d006      	beq.n	402314 <hif_chip_sleep+0x30>
  402306:	4b17      	ldr	r3, [pc, #92]	; (402364 <hif_chip_sleep+0x80>)
  402308:	781b      	ldrb	r3, [r3, #0]
  40230a:	b2db      	uxtb	r3, r3
  40230c:	2b04      	cmp	r3, #4
  40230e:	d001      	beq.n	402314 <hif_chip_sleep+0x30>
	sint8 ret = M2M_SUCCESS;
  402310:	2300      	movs	r3, #0
  402312:	e023      	b.n	40235c <hif_chip_sleep+0x78>
{
  402314:	b500      	push	{lr}
  402316:	b083      	sub	sp, #12
		{
			uint32 reg = 0;
  402318:	2300      	movs	r3, #0
  40231a:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  40231c:	f244 3121 	movw	r1, #17185	; 0x4321
  402320:	f241 0074 	movw	r0, #4212	; 0x1074
  402324:	4b10      	ldr	r3, [pc, #64]	; (402368 <hif_chip_sleep+0x84>)
  402326:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  402328:	4603      	mov	r3, r0
  40232a:	b118      	cbz	r0, 402334 <hif_chip_sleep+0x50>
		{
		}
	}
ERR1:
	return ret;
}
  40232c:	4618      	mov	r0, r3
  40232e:	b003      	add	sp, #12
  402330:	f85d fb04 	ldr.w	pc, [sp], #4
			ret = nm_read_reg_with_ret(0x1, &reg);
  402334:	a901      	add	r1, sp, #4
  402336:	2001      	movs	r0, #1
  402338:	4b0c      	ldr	r3, [pc, #48]	; (40236c <hif_chip_sleep+0x88>)
  40233a:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40233c:	4603      	mov	r3, r0
  40233e:	2800      	cmp	r0, #0
  402340:	d1f4      	bne.n	40232c <hif_chip_sleep+0x48>
			if(reg&0x2)
  402342:	9901      	ldr	r1, [sp, #4]
  402344:	f011 0f02 	tst.w	r1, #2
  402348:	d0f0      	beq.n	40232c <hif_chip_sleep+0x48>
				reg &=~(1 << 1);
  40234a:	f021 0102 	bic.w	r1, r1, #2
  40234e:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  402350:	2001      	movs	r0, #1
  402352:	4b05      	ldr	r3, [pc, #20]	; (402368 <hif_chip_sleep+0x84>)
  402354:	4798      	blx	r3
  402356:	4603      	mov	r3, r0
  402358:	e7e8      	b.n	40232c <hif_chip_sleep+0x48>
	sint8 ret = M2M_SUCCESS;
  40235a:	2300      	movs	r3, #0
}
  40235c:	4618      	mov	r0, r3
  40235e:	4770      	bx	lr
  402360:	2040c341 	.word	0x2040c341
  402364:	2040c340 	.word	0x2040c340
  402368:	00403571 	.word	0x00403571
  40236c:	00403565 	.word	0x00403565

00402370 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  402370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402374:	b087      	sub	sp, #28
  402376:	4607      	mov	r7, r0
  402378:	4688      	mov	r8, r1
  40237a:	4692      	mov	sl, r2
  40237c:	4699      	mov	r9, r3
  40237e:	9c10      	ldr	r4, [sp, #64]	; 0x40
  402380:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  402384:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  402388:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  40238c:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  402390:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  402394:	2308      	movs	r3, #8
  402396:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  40239a:	2c00      	cmp	r4, #0
  40239c:	f000 809f 	beq.w	4024de <hif_send+0x16e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  4023a0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4023a4:	fa16 f383 	uxtah	r3, r6, r3
  4023a8:	442b      	add	r3, r5
  4023aa:	b29b      	uxth	r3, r3
  4023ac:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
  4023b0:	4b5c      	ldr	r3, [pc, #368]	; (402524 <hif_send+0x1b4>)
  4023b2:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  4023b4:	4683      	mov	fp, r0
  4023b6:	2800      	cmp	r0, #0
  4023b8:	f040 80a2 	bne.w	402500 <hif_send+0x190>
	{
		volatile uint32 reg, dma_addr = 0;
  4023bc:	2300      	movs	r3, #0
  4023be:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  4023c0:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  4023c4:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  4023c6:	9b02      	ldr	r3, [sp, #8]
  4023c8:	431f      	orrs	r7, r3
  4023ca:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  4023cc:	9b02      	ldr	r3, [sp, #8]
  4023ce:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
  4023d2:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  4023d4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  4023d8:	9b02      	ldr	r3, [sp, #8]
  4023da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4023de:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  4023e0:	9902      	ldr	r1, [sp, #8]
  4023e2:	f241 008c 	movw	r0, #4236	; 0x108c
  4023e6:	4b50      	ldr	r3, [pc, #320]	; (402528 <hif_send+0x1b8>)
  4023e8:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  4023ea:	4683      	mov	fp, r0
  4023ec:	2800      	cmp	r0, #0
  4023ee:	f040 8091 	bne.w	402514 <hif_send+0x1a4>


		reg = 0;
  4023f2:	2300      	movs	r3, #0
  4023f4:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  4023f6:	9b02      	ldr	r3, [sp, #8]
  4023f8:	f043 0302 	orr.w	r3, r3, #2
  4023fc:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  4023fe:	9902      	ldr	r1, [sp, #8]
  402400:	f241 0078 	movw	r0, #4216	; 0x1078
  402404:	4b48      	ldr	r3, [pc, #288]	; (402528 <hif_send+0x1b8>)
  402406:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  402408:	4683      	mov	fp, r0
  40240a:	2800      	cmp	r0, #0
  40240c:	f040 8082 	bne.w	402514 <hif_send+0x1a4>
		dma_addr = 0;
  402410:	2300      	movs	r3, #0
  402412:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  402414:	f8ad 3006 	strh.w	r3, [sp, #6]
  402418:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40241c:	b29b      	uxth	r3, r3
  40241e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  402422:	d216      	bcs.n	402452 <hif_send+0xe2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  402424:	f241 0878 	movw	r8, #4216	; 0x1078
  402428:	4f40      	ldr	r7, [pc, #256]	; (40252c <hif_send+0x1bc>)
  40242a:	a902      	add	r1, sp, #8
  40242c:	4640      	mov	r0, r8
  40242e:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  402430:	b978      	cbnz	r0, 402452 <hif_send+0xe2>
			if (!(reg & 0x2))
  402432:	9b02      	ldr	r3, [sp, #8]
  402434:	f013 0f02 	tst.w	r3, #2
  402438:	d059      	beq.n	4024ee <hif_send+0x17e>
		for(cnt = 0; cnt < 1000; cnt ++)
  40243a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40243e:	3301      	adds	r3, #1
  402440:	b29b      	uxth	r3, r3
  402442:	f8ad 3006 	strh.w	r3, [sp, #6]
  402446:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40244a:	b29b      	uxth	r3, r3
  40244c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  402450:	d3eb      	bcc.n	40242a <hif_send+0xba>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  402452:	9b03      	ldr	r3, [sp, #12]
  402454:	2b00      	cmp	r3, #0
  402456:	d061      	beq.n	40251c <hif_send+0x1ac>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  402458:	9b03      	ldr	r3, [sp, #12]
  40245a:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  40245c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  402460:	b29b      	uxth	r3, r3
  402462:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  402466:	9804      	ldr	r0, [sp, #16]
  402468:	2208      	movs	r2, #8
  40246a:	a905      	add	r1, sp, #20
  40246c:	4b30      	ldr	r3, [pc, #192]	; (402530 <hif_send+0x1c0>)
  40246e:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  402470:	4683      	mov	fp, r0
  402472:	2800      	cmp	r0, #0
  402474:	d14e      	bne.n	402514 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  402476:	9b04      	ldr	r3, [sp, #16]
  402478:	3308      	adds	r3, #8
  40247a:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  40247c:	f1ba 0f00 	cmp.w	sl, #0
  402480:	d00a      	beq.n	402498 <hif_send+0x128>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  402482:	9804      	ldr	r0, [sp, #16]
  402484:	464a      	mov	r2, r9
  402486:	4651      	mov	r1, sl
  402488:	4b29      	ldr	r3, [pc, #164]	; (402530 <hif_send+0x1c0>)
  40248a:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  40248c:	4683      	mov	fp, r0
  40248e:	2800      	cmp	r0, #0
  402490:	d140      	bne.n	402514 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  402492:	9b04      	ldr	r3, [sp, #16]
  402494:	444b      	add	r3, r9
  402496:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  402498:	b17c      	cbz	r4, 4024ba <hif_send+0x14a>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  40249a:	9b04      	ldr	r3, [sp, #16]
  40249c:	eba5 0509 	sub.w	r5, r5, r9
  4024a0:	441d      	add	r5, r3
  4024a2:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  4024a4:	9804      	ldr	r0, [sp, #16]
  4024a6:	4632      	mov	r2, r6
  4024a8:	4621      	mov	r1, r4
  4024aa:	4b21      	ldr	r3, [pc, #132]	; (402530 <hif_send+0x1c0>)
  4024ac:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  4024ae:	4683      	mov	fp, r0
  4024b0:	2800      	cmp	r0, #0
  4024b2:	d12f      	bne.n	402514 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  4024b4:	9b04      	ldr	r3, [sp, #16]
  4024b6:	441e      	add	r6, r3
  4024b8:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  4024ba:	9b03      	ldr	r3, [sp, #12]
  4024bc:	009b      	lsls	r3, r3, #2
  4024be:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  4024c0:	9b02      	ldr	r3, [sp, #8]
  4024c2:	f043 0302 	orr.w	r3, r3, #2
  4024c6:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  4024c8:	9902      	ldr	r1, [sp, #8]
  4024ca:	f241 006c 	movw	r0, #4204	; 0x106c
  4024ce:	4b16      	ldr	r3, [pc, #88]	; (402528 <hif_send+0x1b8>)
  4024d0:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  4024d2:	4683      	mov	fp, r0
  4024d4:	b9f0      	cbnz	r0, 402514 <hif_send+0x1a4>
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR1;
	}
	ret = hif_chip_sleep();
  4024d6:	4b17      	ldr	r3, [pc, #92]	; (402534 <hif_send+0x1c4>)
  4024d8:	4798      	blx	r3
  4024da:	4683      	mov	fp, r0
  4024dc:	e01a      	b.n	402514 <hif_send+0x1a4>
		strHif.u16Length += u16CtrlBufSize;
  4024de:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4024e2:	fa19 f383 	uxtah	r3, r9, r3
  4024e6:	b29b      	uxth	r3, r3
  4024e8:	f8ad 3016 	strh.w	r3, [sp, #22]
  4024ec:	e760      	b.n	4023b0 <hif_send+0x40>
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  4024ee:	a903      	add	r1, sp, #12
  4024f0:	4811      	ldr	r0, [pc, #68]	; (402538 <hif_send+0x1c8>)
  4024f2:	4b0e      	ldr	r3, [pc, #56]	; (40252c <hif_send+0x1bc>)
  4024f4:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  4024f6:	2800      	cmp	r0, #0
  4024f8:	d0ab      	beq.n	402452 <hif_send+0xe2>
					dma_addr = 0;
  4024fa:	2300      	movs	r3, #0
  4024fc:	9303      	str	r3, [sp, #12]
  4024fe:	e7a8      	b.n	402452 <hif_send+0xe2>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  402500:	f240 129f 	movw	r2, #415	; 0x19f
  402504:	490d      	ldr	r1, [pc, #52]	; (40253c <hif_send+0x1cc>)
  402506:	480e      	ldr	r0, [pc, #56]	; (402540 <hif_send+0x1d0>)
  402508:	4c0e      	ldr	r4, [pc, #56]	; (402544 <hif_send+0x1d4>)
  40250a:	47a0      	blx	r4
  40250c:	480e      	ldr	r0, [pc, #56]	; (402548 <hif_send+0x1d8>)
  40250e:	47a0      	blx	r4
  402510:	480e      	ldr	r0, [pc, #56]	; (40254c <hif_send+0x1dc>)
  402512:	47a0      	blx	r4

ERR1:
	return ret;
}
  402514:	4658      	mov	r0, fp
  402516:	b007      	add	sp, #28
  402518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret =  M2M_ERR_MEM_ALLOC;
  40251c:	f06f 0b02 	mvn.w	fp, #2
  402520:	e7f8      	b.n	402514 <hif_send+0x1a4>
  402522:	bf00      	nop
  402524:	00402289 	.word	0x00402289
  402528:	00403571 	.word	0x00403571
  40252c:	00403565 	.word	0x00403565
  402530:	004035d9 	.word	0x004035d9
  402534:	004022e5 	.word	0x004022e5
  402538:	00150400 	.word	0x00150400
  40253c:	00408cdc 	.word	0x00408cdc
  402540:	00408cac 	.word	0x00408cac
  402544:	00405d39 	.word	0x00405d39
  402548:	00408f30 	.word	0x00408f30
  40254c:	00408cd8 	.word	0x00408cd8

00402550 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  402550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402554:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  402556:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 402850 <hif_handle_isr+0x300>
	ret = hif_chip_wake();
  40255a:	4fa2      	ldr	r7, [pc, #648]	; (4027e4 <hif_handle_isr+0x294>)
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  40255c:	4ea2      	ldr	r6, [pc, #648]	; (4027e8 <hif_handle_isr+0x298>)
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  40255e:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 402854 <hif_handle_isr+0x304>
	while (gu8Interrupt) {
  402562:	e0d5      	b.n	402710 <hif_handle_isr+0x1c0>
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  402564:	2204      	movs	r2, #4
  402566:	a904      	add	r1, sp, #16
  402568:	9805      	ldr	r0, [sp, #20]
  40256a:	4ba0      	ldr	r3, [pc, #640]	; (4027ec <hif_handle_isr+0x29c>)
  40256c:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  40256e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  402572:	b29b      	uxth	r3, r3
  402574:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  402578:	4604      	mov	r4, r0
  40257a:	2800      	cmp	r0, #0
  40257c:	d130      	bne.n	4025e0 <hif_handle_isr+0x90>
					if(strHif.u16Length != size)
  40257e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  402582:	b29b      	uxth	r3, r3
  402584:	429d      	cmp	r5, r3
  402586:	d005      	beq.n	402594 <hif_handle_isr+0x44>
						if((size - strHif.u16Length) > 4)
  402588:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40258c:	b29b      	uxth	r3, r3
  40258e:	1aeb      	subs	r3, r5, r3
  402590:	2b04      	cmp	r3, #4
  402592:	dc33      	bgt.n	4025fc <hif_handle_isr+0xac>
					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  402594:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402598:	b2db      	uxtb	r3, r3
  40259a:	2b01      	cmp	r3, #1
  40259c:	d047      	beq.n	40262e <hif_handle_isr+0xde>
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  40259e:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4025a2:	b2db      	uxtb	r3, r3
  4025a4:	2b02      	cmp	r3, #2
  4025a6:	d05f      	beq.n	402668 <hif_handle_isr+0x118>
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  4025a8:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4025ac:	b2db      	uxtb	r3, r3
  4025ae:	2b04      	cmp	r3, #4
  4025b0:	d068      	beq.n	402684 <hif_handle_isr+0x134>
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  4025b2:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4025b6:	b2db      	uxtb	r3, r3
  4025b8:	2b06      	cmp	r3, #6
  4025ba:	d071      	beq.n	4026a0 <hif_handle_isr+0x150>
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  4025bc:	f89d 3010 	ldrb.w	r3, [sp, #16]
  4025c0:	b2db      	uxtb	r3, r3
  4025c2:	2b07      	cmp	r3, #7
  4025c4:	d07a      	beq.n	4026bc <hif_handle_isr+0x16c>
						M2M_ERR("(hif) invalid group ID\n");
  4025c6:	f240 2202 	movw	r2, #514	; 0x202
  4025ca:	4641      	mov	r1, r8
  4025cc:	4630      	mov	r0, r6
  4025ce:	4c88      	ldr	r4, [pc, #544]	; (4027f0 <hif_handle_isr+0x2a0>)
  4025d0:	47a0      	blx	r4
  4025d2:	4888      	ldr	r0, [pc, #544]	; (4027f4 <hif_handle_isr+0x2a4>)
  4025d4:	47a0      	blx	r4
  4025d6:	4888      	ldr	r0, [pc, #544]	; (4027f8 <hif_handle_isr+0x2a8>)
  4025d8:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  4025da:	f06f 0405 	mvn.w	r4, #5
  4025de:	e096      	b.n	40270e <hif_handle_isr+0x1be>
						M2M_ERR("(hif) address bus fail\n");
  4025e0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  4025e4:	4641      	mov	r1, r8
  4025e6:	4630      	mov	r0, r6
  4025e8:	4d81      	ldr	r5, [pc, #516]	; (4027f0 <hif_handle_isr+0x2a0>)
  4025ea:	47a8      	blx	r5
  4025ec:	4883      	ldr	r0, [pc, #524]	; (4027fc <hif_handle_isr+0x2ac>)
  4025ee:	47a8      	blx	r5
  4025f0:	4881      	ldr	r0, [pc, #516]	; (4027f8 <hif_handle_isr+0x2a8>)
  4025f2:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  4025f4:	2001      	movs	r0, #1
  4025f6:	4b82      	ldr	r3, [pc, #520]	; (402800 <hif_handle_isr+0x2b0>)
  4025f8:	4798      	blx	r3
  4025fa:	e088      	b.n	40270e <hif_handle_isr+0x1be>
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  4025fc:	f240 12df 	movw	r2, #479	; 0x1df
  402600:	4641      	mov	r1, r8
  402602:	4630      	mov	r0, r6
  402604:	4c7a      	ldr	r4, [pc, #488]	; (4027f0 <hif_handle_isr+0x2a0>)
  402606:	47a0      	blx	r4
  402608:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  40260c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402610:	f89d 1011 	ldrb.w	r1, [sp, #17]
  402614:	9100      	str	r1, [sp, #0]
  402616:	b292      	uxth	r2, r2
  402618:	4629      	mov	r1, r5
  40261a:	487a      	ldr	r0, [pc, #488]	; (402804 <hif_handle_isr+0x2b4>)
  40261c:	47a0      	blx	r4
  40261e:	4876      	ldr	r0, [pc, #472]	; (4027f8 <hif_handle_isr+0x2a8>)
  402620:	47a0      	blx	r4
							nm_bsp_interrupt_ctrl(1);
  402622:	2001      	movs	r0, #1
  402624:	4b76      	ldr	r3, [pc, #472]	; (402800 <hif_handle_isr+0x2b0>)
  402626:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  402628:	f06f 0405 	mvn.w	r4, #5
  40262c:	e06f      	b.n	40270e <hif_handle_isr+0x1be>
						if(pfWifiCb)
  40262e:	4b76      	ldr	r3, [pc, #472]	; (402808 <hif_handle_isr+0x2b8>)
  402630:	681b      	ldr	r3, [r3, #0]
  402632:	b143      	cbz	r3, 402646 <hif_handle_isr+0xf6>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402634:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402638:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  40263c:	3908      	subs	r1, #8
  40263e:	9a05      	ldr	r2, [sp, #20]
  402640:	3208      	adds	r2, #8
  402642:	b289      	uxth	r1, r1
  402644:	4798      	blx	r3
					if(!gu8HifSizeDone)
  402646:	4b71      	ldr	r3, [pc, #452]	; (40280c <hif_handle_isr+0x2bc>)
  402648:	781b      	ldrb	r3, [r3, #0]
  40264a:	2b00      	cmp	r3, #0
  40264c:	d15c      	bne.n	402708 <hif_handle_isr+0x1b8>
						M2M_ERR("(hif) host app didn't set RX Done\n");
  40264e:	f240 2209 	movw	r2, #521	; 0x209
  402652:	4641      	mov	r1, r8
  402654:	4630      	mov	r0, r6
  402656:	4c66      	ldr	r4, [pc, #408]	; (4027f0 <hif_handle_isr+0x2a0>)
  402658:	47a0      	blx	r4
  40265a:	486d      	ldr	r0, [pc, #436]	; (402810 <hif_handle_isr+0x2c0>)
  40265c:	47a0      	blx	r4
  40265e:	4866      	ldr	r0, [pc, #408]	; (4027f8 <hif_handle_isr+0x2a8>)
  402660:	47a0      	blx	r4
						ret = hif_set_rx_done();
  402662:	4b6c      	ldr	r3, [pc, #432]	; (402814 <hif_handle_isr+0x2c4>)
  402664:	4798      	blx	r3
  402666:	e04f      	b.n	402708 <hif_handle_isr+0x1b8>
						if(pfIpCb)
  402668:	4b6b      	ldr	r3, [pc, #428]	; (402818 <hif_handle_isr+0x2c8>)
  40266a:	681b      	ldr	r3, [r3, #0]
  40266c:	2b00      	cmp	r3, #0
  40266e:	d0ea      	beq.n	402646 <hif_handle_isr+0xf6>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402670:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402674:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402678:	3908      	subs	r1, #8
  40267a:	9a05      	ldr	r2, [sp, #20]
  40267c:	3208      	adds	r2, #8
  40267e:	b289      	uxth	r1, r1
  402680:	4798      	blx	r3
  402682:	e7e0      	b.n	402646 <hif_handle_isr+0xf6>
						if(pfOtaCb)
  402684:	4b65      	ldr	r3, [pc, #404]	; (40281c <hif_handle_isr+0x2cc>)
  402686:	681b      	ldr	r3, [r3, #0]
  402688:	2b00      	cmp	r3, #0
  40268a:	d0dc      	beq.n	402646 <hif_handle_isr+0xf6>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  40268c:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402690:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402694:	3908      	subs	r1, #8
  402696:	9a05      	ldr	r2, [sp, #20]
  402698:	3208      	adds	r2, #8
  40269a:	b289      	uxth	r1, r1
  40269c:	4798      	blx	r3
  40269e:	e7d2      	b.n	402646 <hif_handle_isr+0xf6>
						if(pfCryptoCb)
  4026a0:	4b5f      	ldr	r3, [pc, #380]	; (402820 <hif_handle_isr+0x2d0>)
  4026a2:	681b      	ldr	r3, [r3, #0]
  4026a4:	2b00      	cmp	r3, #0
  4026a6:	d0ce      	beq.n	402646 <hif_handle_isr+0xf6>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4026a8:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4026ac:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4026b0:	3908      	subs	r1, #8
  4026b2:	9a05      	ldr	r2, [sp, #20]
  4026b4:	3208      	adds	r2, #8
  4026b6:	b289      	uxth	r1, r1
  4026b8:	4798      	blx	r3
  4026ba:	e7c4      	b.n	402646 <hif_handle_isr+0xf6>
						if(pfSigmaCb)
  4026bc:	4b59      	ldr	r3, [pc, #356]	; (402824 <hif_handle_isr+0x2d4>)
  4026be:	681b      	ldr	r3, [r3, #0]
  4026c0:	2b00      	cmp	r3, #0
  4026c2:	d0c0      	beq.n	402646 <hif_handle_isr+0xf6>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4026c4:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4026c8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4026cc:	3908      	subs	r1, #8
  4026ce:	9a05      	ldr	r2, [sp, #20]
  4026d0:	3208      	adds	r2, #8
  4026d2:	b289      	uxth	r1, r1
  4026d4:	4798      	blx	r3
  4026d6:	e7b6      	b.n	402646 <hif_handle_isr+0xf6>
					M2M_ERR("(hif) Wrong Size\n");
  4026d8:	f240 2211 	movw	r2, #529	; 0x211
  4026dc:	4641      	mov	r1, r8
  4026de:	4630      	mov	r0, r6
  4026e0:	4c43      	ldr	r4, [pc, #268]	; (4027f0 <hif_handle_isr+0x2a0>)
  4026e2:	47a0      	blx	r4
  4026e4:	4850      	ldr	r0, [pc, #320]	; (402828 <hif_handle_isr+0x2d8>)
  4026e6:	47a0      	blx	r4
  4026e8:	4843      	ldr	r0, [pc, #268]	; (4027f8 <hif_handle_isr+0x2a8>)
  4026ea:	47a0      	blx	r4
					ret = M2M_ERR_RCV;
  4026ec:	f06f 0401 	mvn.w	r4, #1
  4026f0:	e02f      	b.n	402752 <hif_handle_isr+0x202>
				M2M_ERR("(hif) False interrupt %lx",reg);
  4026f2:	f44f 7206 	mov.w	r2, #536	; 0x218
  4026f6:	4641      	mov	r1, r8
  4026f8:	4630      	mov	r0, r6
  4026fa:	4c3d      	ldr	r4, [pc, #244]	; (4027f0 <hif_handle_isr+0x2a0>)
  4026fc:	47a0      	blx	r4
  4026fe:	9903      	ldr	r1, [sp, #12]
  402700:	484a      	ldr	r0, [pc, #296]	; (40282c <hif_handle_isr+0x2dc>)
  402702:	47a0      	blx	r4
  402704:	483c      	ldr	r0, [pc, #240]	; (4027f8 <hif_handle_isr+0x2a8>)
  402706:	47a0      	blx	r4
	ret = hif_chip_sleep();
  402708:	4b49      	ldr	r3, [pc, #292]	; (402830 <hif_handle_isr+0x2e0>)
  40270a:	4798      	blx	r3
  40270c:	4604      	mov	r4, r0
			if(ret == M2M_SUCCESS) {
  40270e:	bb04      	cbnz	r4, 402752 <hif_handle_isr+0x202>
	while (gu8Interrupt) {
  402710:	f899 3000 	ldrb.w	r3, [r9]
  402714:	2b00      	cmp	r3, #0
  402716:	f000 809f 	beq.w	402858 <hif_handle_isr+0x308>
		gu8Interrupt--;
  40271a:	f899 3000 	ldrb.w	r3, [r9]
  40271e:	3b01      	subs	r3, #1
  402720:	b2db      	uxtb	r3, r3
  402722:	f889 3000 	strb.w	r3, [r9]
  402726:	e01f      	b.n	402768 <hif_handle_isr+0x218>
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  402728:	f240 221e 	movw	r2, #542	; 0x21e
  40272c:	4641      	mov	r1, r8
  40272e:	4630      	mov	r0, r6
  402730:	4d2f      	ldr	r5, [pc, #188]	; (4027f0 <hif_handle_isr+0x2a0>)
  402732:	47a8      	blx	r5
  402734:	483f      	ldr	r0, [pc, #252]	; (402834 <hif_handle_isr+0x2e4>)
  402736:	47a8      	blx	r5
  402738:	482f      	ldr	r0, [pc, #188]	; (4027f8 <hif_handle_isr+0x2a8>)
  40273a:	47a8      	blx	r5
  40273c:	e009      	b.n	402752 <hif_handle_isr+0x202>
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  40273e:	f44f 7209 	mov.w	r2, #548	; 0x224
  402742:	4641      	mov	r1, r8
  402744:	4630      	mov	r0, r6
  402746:	4d2a      	ldr	r5, [pc, #168]	; (4027f0 <hif_handle_isr+0x2a0>)
  402748:	47a8      	blx	r5
  40274a:	483b      	ldr	r0, [pc, #236]	; (402838 <hif_handle_isr+0x2e8>)
  40274c:	47a8      	blx	r5
  40274e:	482a      	ldr	r0, [pc, #168]	; (4027f8 <hif_handle_isr+0x2a8>)
  402750:	47a8      	blx	r5
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  402752:	f240 2243 	movw	r2, #579	; 0x243
  402756:	4939      	ldr	r1, [pc, #228]	; (40283c <hif_handle_isr+0x2ec>)
  402758:	4630      	mov	r0, r6
  40275a:	4d25      	ldr	r5, [pc, #148]	; (4027f0 <hif_handle_isr+0x2a0>)
  40275c:	47a8      	blx	r5
  40275e:	4621      	mov	r1, r4
  402760:	4837      	ldr	r0, [pc, #220]	; (402840 <hif_handle_isr+0x2f0>)
  402762:	47a8      	blx	r5
  402764:	4824      	ldr	r0, [pc, #144]	; (4027f8 <hif_handle_isr+0x2a8>)
  402766:	47a8      	blx	r5
	ret = hif_chip_wake();
  402768:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  40276a:	4604      	mov	r4, r0
  40276c:	2800      	cmp	r0, #0
  40276e:	d1e6      	bne.n	40273e <hif_handle_isr+0x1ee>
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  402770:	a903      	add	r1, sp, #12
  402772:	f241 0070 	movw	r0, #4208	; 0x1070
  402776:	4b33      	ldr	r3, [pc, #204]	; (402844 <hif_handle_isr+0x2f4>)
  402778:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  40277a:	4604      	mov	r4, r0
  40277c:	2800      	cmp	r0, #0
  40277e:	d1d3      	bne.n	402728 <hif_handle_isr+0x1d8>
			if(reg & 0x1)	/* New interrupt has been received */
  402780:	9b03      	ldr	r3, [sp, #12]
  402782:	f013 0f01 	tst.w	r3, #1
  402786:	d0b4      	beq.n	4026f2 <hif_handle_isr+0x1a2>
				nm_bsp_interrupt_ctrl(0);
  402788:	4b1d      	ldr	r3, [pc, #116]	; (402800 <hif_handle_isr+0x2b0>)
  40278a:	4798      	blx	r3
				reg &= ~(1<<0);
  40278c:	9903      	ldr	r1, [sp, #12]
  40278e:	f021 0101 	bic.w	r1, r1, #1
  402792:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  402794:	f241 0070 	movw	r0, #4208	; 0x1070
  402798:	4b2b      	ldr	r3, [pc, #172]	; (402848 <hif_handle_isr+0x2f8>)
  40279a:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  40279c:	4604      	mov	r4, r0
  40279e:	2800      	cmp	r0, #0
  4027a0:	d1d7      	bne.n	402752 <hif_handle_isr+0x202>
				gu8HifSizeDone = 0;
  4027a2:	2200      	movs	r2, #0
  4027a4:	4b19      	ldr	r3, [pc, #100]	; (40280c <hif_handle_isr+0x2bc>)
  4027a6:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  4027a8:	9d03      	ldr	r5, [sp, #12]
  4027aa:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  4027ae:	2d00      	cmp	r5, #0
  4027b0:	d092      	beq.n	4026d8 <hif_handle_isr+0x188>
					uint32 address = 0;
  4027b2:	a906      	add	r1, sp, #24
  4027b4:	f841 2d04 	str.w	r2, [r1, #-4]!
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  4027b8:	f241 0084 	movw	r0, #4228	; 0x1084
  4027bc:	4b21      	ldr	r3, [pc, #132]	; (402844 <hif_handle_isr+0x2f4>)
  4027be:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  4027c0:	4604      	mov	r4, r0
  4027c2:	2800      	cmp	r0, #0
  4027c4:	f43f aece 	beq.w	402564 <hif_handle_isr+0x14>
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  4027c8:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  4027cc:	4641      	mov	r1, r8
  4027ce:	4630      	mov	r0, r6
  4027d0:	4d07      	ldr	r5, [pc, #28]	; (4027f0 <hif_handle_isr+0x2a0>)
  4027d2:	47a8      	blx	r5
  4027d4:	481d      	ldr	r0, [pc, #116]	; (40284c <hif_handle_isr+0x2fc>)
  4027d6:	47a8      	blx	r5
  4027d8:	4807      	ldr	r0, [pc, #28]	; (4027f8 <hif_handle_isr+0x2a8>)
  4027da:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  4027dc:	2001      	movs	r0, #1
  4027de:	4b08      	ldr	r3, [pc, #32]	; (402800 <hif_handle_isr+0x2b0>)
  4027e0:	4798      	blx	r3
  4027e2:	e794      	b.n	40270e <hif_handle_isr+0x1be>
  4027e4:	00402289 	.word	0x00402289
  4027e8:	00408cac 	.word	0x00408cac
  4027ec:	0040357d 	.word	0x0040357d
  4027f0:	00405d39 	.word	0x00405d39
  4027f4:	00408d9c 	.word	0x00408d9c
  4027f8:	00408cd8 	.word	0x00408cd8
  4027fc:	00408d44 	.word	0x00408d44
  402800:	00401fa1 	.word	0x00401fa1
  402804:	00408d5c 	.word	0x00408d5c
  402808:	2040c358 	.word	0x2040c358
  40280c:	2040c342 	.word	0x2040c342
  402810:	00408db4 	.word	0x00408db4
  402814:	00402249 	.word	0x00402249
  402818:	2040c34c 	.word	0x2040c34c
  40281c:	2040c350 	.word	0x2040c350
  402820:	2040c344 	.word	0x2040c344
  402824:	2040c354 	.word	0x2040c354
  402828:	00408dd8 	.word	0x00408dd8
  40282c:	00408dec 	.word	0x00408dec
  402830:	004022e5 	.word	0x004022e5
  402834:	00408e08 	.word	0x00408e08
  402838:	00408e2c 	.word	0x00408e2c
  40283c:	00408cf0 	.word	0x00408cf0
  402840:	00408e4c 	.word	0x00408e4c
  402844:	00403565 	.word	0x00403565
  402848:	00403571 	.word	0x00403571
  40284c:	00408d1c 	.word	0x00408d1c
  402850:	2040c343 	.word	0x2040c343
  402854:	00408ce8 	.word	0x00408ce8
			}
		}
	}

	return ret;
}
  402858:	2000      	movs	r0, #0
  40285a:	b007      	add	sp, #28
  40285c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00402860 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  402860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402864:	b083      	sub	sp, #12
  402866:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  402868:	2a00      	cmp	r2, #0
  40286a:	bf18      	it	ne
  40286c:	2900      	cmpne	r1, #0
  40286e:	d003      	beq.n	402878 <hif_receive+0x18>
  402870:	4605      	mov	r5, r0
  402872:	460f      	mov	r7, r1
  402874:	4616      	mov	r6, r2
  402876:	b9b8      	cbnz	r0, 4028a8 <hif_receive+0x48>
	{
		if(isDone)
  402878:	b14c      	cbz	r4, 40288e <hif_receive+0x2e>
		{
			gu8HifSizeDone = 1;
  40287a:	2201      	movs	r2, #1
  40287c:	4b32      	ldr	r3, [pc, #200]	; (402948 <hif_receive+0xe8>)
  40287e:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  402880:	4b32      	ldr	r3, [pc, #200]	; (40294c <hif_receive+0xec>)
  402882:	4798      	blx	r3
  402884:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  402886:	4618      	mov	r0, r3
  402888:	b003      	add	sp, #12
  40288a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
  40288e:	f240 2269 	movw	r2, #617	; 0x269
  402892:	492f      	ldr	r1, [pc, #188]	; (402950 <hif_receive+0xf0>)
  402894:	482f      	ldr	r0, [pc, #188]	; (402954 <hif_receive+0xf4>)
  402896:	4c30      	ldr	r4, [pc, #192]	; (402958 <hif_receive+0xf8>)
  402898:	47a0      	blx	r4
  40289a:	4830      	ldr	r0, [pc, #192]	; (40295c <hif_receive+0xfc>)
  40289c:	47a0      	blx	r4
  40289e:	4830      	ldr	r0, [pc, #192]	; (402960 <hif_receive+0x100>)
  4028a0:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  4028a2:	f06f 030b 	mvn.w	r3, #11
  4028a6:	e7ee      	b.n	402886 <hif_receive+0x26>
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  4028a8:	4669      	mov	r1, sp
  4028aa:	f241 0070 	movw	r0, #4208	; 0x1070
  4028ae:	4b2d      	ldr	r3, [pc, #180]	; (402964 <hif_receive+0x104>)
  4028b0:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4028b2:	4603      	mov	r3, r0
  4028b4:	2800      	cmp	r0, #0
  4028b6:	d1e6      	bne.n	402886 <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  4028b8:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  4028bc:	a901      	add	r1, sp, #4
  4028be:	f241 0084 	movw	r0, #4228	; 0x1084
  4028c2:	4b28      	ldr	r3, [pc, #160]	; (402964 <hif_receive+0x104>)
  4028c4:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4028c6:	4603      	mov	r3, r0
  4028c8:	2800      	cmp	r0, #0
  4028ca:	d1dc      	bne.n	402886 <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  4028cc:	f3c8 088b 	ubfx	r8, r8, #2, #12
	if(u16Sz > size)
  4028d0:	4546      	cmp	r6, r8
  4028d2:	d81c      	bhi.n	40290e <hif_receive+0xae>
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  4028d4:	9b01      	ldr	r3, [sp, #4]
  4028d6:	429d      	cmp	r5, r3
  4028d8:	d328      	bcc.n	40292c <hif_receive+0xcc>
  4028da:	eb05 0906 	add.w	r9, r5, r6
  4028de:	4443      	add	r3, r8
  4028e0:	4599      	cmp	r9, r3
  4028e2:	d823      	bhi.n	40292c <hif_receive+0xcc>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  4028e4:	4632      	mov	r2, r6
  4028e6:	4639      	mov	r1, r7
  4028e8:	4628      	mov	r0, r5
  4028ea:	4b1f      	ldr	r3, [pc, #124]	; (402968 <hif_receive+0x108>)
  4028ec:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4028ee:	4603      	mov	r3, r0
  4028f0:	2800      	cmp	r0, #0
  4028f2:	d1c8      	bne.n	402886 <hif_receive+0x26>
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  4028f4:	9a01      	ldr	r2, [sp, #4]
  4028f6:	4490      	add	r8, r2
  4028f8:	45c8      	cmp	r8, r9
  4028fa:	d001      	beq.n	402900 <hif_receive+0xa0>
  4028fc:	2c00      	cmp	r4, #0
  4028fe:	d0c2      	beq.n	402886 <hif_receive+0x26>
		gu8HifSizeDone = 1;
  402900:	2201      	movs	r2, #1
  402902:	4b11      	ldr	r3, [pc, #68]	; (402948 <hif_receive+0xe8>)
  402904:	701a      	strb	r2, [r3, #0]
		ret = hif_set_rx_done();
  402906:	4b11      	ldr	r3, [pc, #68]	; (40294c <hif_receive+0xec>)
  402908:	4798      	blx	r3
  40290a:	4603      	mov	r3, r0
  40290c:	e7bb      	b.n	402886 <hif_receive+0x26>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  40290e:	f240 227a 	movw	r2, #634	; 0x27a
  402912:	490f      	ldr	r1, [pc, #60]	; (402950 <hif_receive+0xf0>)
  402914:	480f      	ldr	r0, [pc, #60]	; (402954 <hif_receive+0xf4>)
  402916:	4c10      	ldr	r4, [pc, #64]	; (402958 <hif_receive+0xf8>)
  402918:	47a0      	blx	r4
  40291a:	4642      	mov	r2, r8
  40291c:	4631      	mov	r1, r6
  40291e:	4813      	ldr	r0, [pc, #76]	; (40296c <hif_receive+0x10c>)
  402920:	47a0      	blx	r4
  402922:	480f      	ldr	r0, [pc, #60]	; (402960 <hif_receive+0x100>)
  402924:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402926:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  40292a:	e7ac      	b.n	402886 <hif_receive+0x26>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  40292c:	f44f 7220 	mov.w	r2, #640	; 0x280
  402930:	4907      	ldr	r1, [pc, #28]	; (402950 <hif_receive+0xf0>)
  402932:	4808      	ldr	r0, [pc, #32]	; (402954 <hif_receive+0xf4>)
  402934:	4c08      	ldr	r4, [pc, #32]	; (402958 <hif_receive+0xf8>)
  402936:	47a0      	blx	r4
  402938:	480d      	ldr	r0, [pc, #52]	; (402970 <hif_receive+0x110>)
  40293a:	47a0      	blx	r4
  40293c:	4808      	ldr	r0, [pc, #32]	; (402960 <hif_receive+0x100>)
  40293e:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402940:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  402944:	e79f      	b.n	402886 <hif_receive+0x26>
  402946:	bf00      	nop
  402948:	2040c342 	.word	0x2040c342
  40294c:	00402249 	.word	0x00402249
  402950:	00408d00 	.word	0x00408d00
  402954:	00408cac 	.word	0x00408cac
  402958:	00405d39 	.word	0x00405d39
  40295c:	00408e7c 	.word	0x00408e7c
  402960:	00408cd8 	.word	0x00408cd8
  402964:	00403565 	.word	0x00403565
  402968:	0040357d 	.word	0x0040357d
  40296c:	00408e9c 	.word	0x00408e9c
  402970:	00408ee0 	.word	0x00408ee0

00402974 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  402974:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  402976:	1e43      	subs	r3, r0, #1
  402978:	2b06      	cmp	r3, #6
  40297a:	d81d      	bhi.n	4029b8 <hif_register_cb+0x44>
  40297c:	e8df f003 	tbb	[pc, r3]
  402980:	0c100408 	.word	0x0c100408
  402984:	141c      	.short	0x141c
  402986:	18          	.byte	0x18
  402987:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  402988:	4b13      	ldr	r3, [pc, #76]	; (4029d8 <hif_register_cb+0x64>)
  40298a:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  40298c:	2000      	movs	r0, #0
			break;
  40298e:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  402990:	4b12      	ldr	r3, [pc, #72]	; (4029dc <hif_register_cb+0x68>)
  402992:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402994:	2000      	movs	r0, #0
			break;
  402996:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  402998:	4b11      	ldr	r3, [pc, #68]	; (4029e0 <hif_register_cb+0x6c>)
  40299a:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  40299c:	2000      	movs	r0, #0
			break;
  40299e:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  4029a0:	4b10      	ldr	r3, [pc, #64]	; (4029e4 <hif_register_cb+0x70>)
  4029a2:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  4029a4:	2000      	movs	r0, #0
			break;
  4029a6:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  4029a8:	4b0f      	ldr	r3, [pc, #60]	; (4029e8 <hif_register_cb+0x74>)
  4029aa:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  4029ac:	2000      	movs	r0, #0
			break;
  4029ae:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  4029b0:	4b0e      	ldr	r3, [pc, #56]	; (4029ec <hif_register_cb+0x78>)
  4029b2:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  4029b4:	2000      	movs	r0, #0
			break;
  4029b6:	bd38      	pop	{r3, r4, r5, pc}
  4029b8:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  4029ba:	f240 22b9 	movw	r2, #697	; 0x2b9
  4029be:	490c      	ldr	r1, [pc, #48]	; (4029f0 <hif_register_cb+0x7c>)
  4029c0:	480c      	ldr	r0, [pc, #48]	; (4029f4 <hif_register_cb+0x80>)
  4029c2:	4d0d      	ldr	r5, [pc, #52]	; (4029f8 <hif_register_cb+0x84>)
  4029c4:	47a8      	blx	r5
  4029c6:	4621      	mov	r1, r4
  4029c8:	480c      	ldr	r0, [pc, #48]	; (4029fc <hif_register_cb+0x88>)
  4029ca:	47a8      	blx	r5
  4029cc:	480c      	ldr	r0, [pc, #48]	; (402a00 <hif_register_cb+0x8c>)
  4029ce:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  4029d0:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  4029d4:	bd38      	pop	{r3, r4, r5, pc}
  4029d6:	bf00      	nop
  4029d8:	2040c34c 	.word	0x2040c34c
  4029dc:	2040c358 	.word	0x2040c358
  4029e0:	2040c350 	.word	0x2040c350
  4029e4:	2040c348 	.word	0x2040c348
  4029e8:	2040c344 	.word	0x2040c344
  4029ec:	2040c354 	.word	0x2040c354
  4029f0:	00408d0c 	.word	0x00408d0c
  4029f4:	00408cac 	.word	0x00408cac
  4029f8:	00405d39 	.word	0x00405d39
  4029fc:	00408f24 	.word	0x00408f24
  402a00:	00408cd8 	.word	0x00408cd8

00402a04 <hif_init>:
{
  402a04:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  402a06:	2400      	movs	r4, #0
  402a08:	4b09      	ldr	r3, [pc, #36]	; (402a30 <hif_init+0x2c>)
  402a0a:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  402a0c:	4b09      	ldr	r3, [pc, #36]	; (402a34 <hif_init+0x30>)
  402a0e:	601c      	str	r4, [r3, #0]
	gu8ChipSleep = 0;
  402a10:	4b09      	ldr	r3, [pc, #36]	; (402a38 <hif_init+0x34>)
  402a12:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  402a14:	4b09      	ldr	r3, [pc, #36]	; (402a3c <hif_init+0x38>)
  402a16:	701c      	strb	r4, [r3, #0]
	gu8Interrupt = 0;
  402a18:	4b09      	ldr	r3, [pc, #36]	; (402a40 <hif_init+0x3c>)
  402a1a:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  402a1c:	4809      	ldr	r0, [pc, #36]	; (402a44 <hif_init+0x40>)
  402a1e:	4b0a      	ldr	r3, [pc, #40]	; (402a48 <hif_init+0x44>)
  402a20:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  402a22:	490a      	ldr	r1, [pc, #40]	; (402a4c <hif_init+0x48>)
  402a24:	2003      	movs	r0, #3
  402a26:	4b0a      	ldr	r3, [pc, #40]	; (402a50 <hif_init+0x4c>)
  402a28:	4798      	blx	r3
}
  402a2a:	4620      	mov	r0, r4
  402a2c:	bd10      	pop	{r4, pc}
  402a2e:	bf00      	nop
  402a30:	2040c358 	.word	0x2040c358
  402a34:	2040c34c 	.word	0x2040c34c
  402a38:	2040c341 	.word	0x2040c341
  402a3c:	2040c340 	.word	0x2040c340
  402a40:	2040c343 	.word	0x2040c343
  402a44:	00402235 	.word	0x00402235
  402a48:	00401f21 	.word	0x00401f21
  402a4c:	00402245 	.word	0x00402245
  402a50:	00402975 	.word	0x00402975

00402a54 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  402a54:	b530      	push	{r4, r5, lr}
  402a56:	b09f      	sub	sp, #124	; 0x7c
  402a58:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  402a5a:	282c      	cmp	r0, #44	; 0x2c
  402a5c:	d02e      	beq.n	402abc <m2m_wifi_cb+0x68>
  402a5e:	4604      	mov	r4, r0
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  402a60:	281b      	cmp	r0, #27
  402a62:	d03b      	beq.n	402adc <m2m_wifi_cb+0x88>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  402a64:	2806      	cmp	r0, #6
  402a66:	d049      	beq.n	402afc <m2m_wifi_cb+0xa8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  402a68:	280e      	cmp	r0, #14
  402a6a:	d025      	beq.n	402ab8 <m2m_wifi_cb+0x64>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  402a6c:	2832      	cmp	r0, #50	; 0x32
  402a6e:	d055      	beq.n	402b1c <m2m_wifi_cb+0xc8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  402a70:	282f      	cmp	r0, #47	; 0x2f
  402a72:	d063      	beq.n	402b3c <m2m_wifi_cb+0xe8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  402a74:	2834      	cmp	r0, #52	; 0x34
  402a76:	d076      	beq.n	402b66 <m2m_wifi_cb+0x112>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  402a78:	2811      	cmp	r0, #17
  402a7a:	f000 8093 	beq.w	402ba4 <m2m_wifi_cb+0x150>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  402a7e:	2813      	cmp	r0, #19
  402a80:	f000 80a8 	beq.w	402bd4 <m2m_wifi_cb+0x180>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  402a84:	2804      	cmp	r0, #4
  402a86:	f000 80b7 	beq.w	402bf8 <m2m_wifi_cb+0x1a4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  402a8a:	2865      	cmp	r0, #101	; 0x65
  402a8c:	f000 80c6 	beq.w	402c1c <m2m_wifi_cb+0x1c8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  402a90:	2809      	cmp	r0, #9
  402a92:	f000 80d5 	beq.w	402c40 <m2m_wifi_cb+0x1ec>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  402a96:	282a      	cmp	r0, #42	; 0x2a
  402a98:	f000 80e4 	beq.w	402c64 <m2m_wifi_cb+0x210>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  402a9c:	2820      	cmp	r0, #32
  402a9e:	f000 80f3 	beq.w	402c88 <m2m_wifi_cb+0x234>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  402aa2:	f44f 7295 	mov.w	r2, #298	; 0x12a
  402aa6:	4986      	ldr	r1, [pc, #536]	; (402cc0 <m2m_wifi_cb+0x26c>)
  402aa8:	4886      	ldr	r0, [pc, #536]	; (402cc4 <m2m_wifi_cb+0x270>)
  402aaa:	4d87      	ldr	r5, [pc, #540]	; (402cc8 <m2m_wifi_cb+0x274>)
  402aac:	47a8      	blx	r5
  402aae:	4621      	mov	r1, r4
  402ab0:	4886      	ldr	r0, [pc, #536]	; (402ccc <m2m_wifi_cb+0x278>)
  402ab2:	47a8      	blx	r5
  402ab4:	4886      	ldr	r0, [pc, #536]	; (402cd0 <m2m_wifi_cb+0x27c>)
  402ab6:	47a8      	blx	r5
	}
}
  402ab8:	b01f      	add	sp, #124	; 0x7c
  402aba:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  402abc:	2300      	movs	r3, #0
  402abe:	2204      	movs	r2, #4
  402ac0:	a903      	add	r1, sp, #12
  402ac2:	4628      	mov	r0, r5
  402ac4:	4c83      	ldr	r4, [pc, #524]	; (402cd4 <m2m_wifi_cb+0x280>)
  402ac6:	47a0      	blx	r4
  402ac8:	2800      	cmp	r0, #0
  402aca:	d1f5      	bne.n	402ab8 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402acc:	4b82      	ldr	r3, [pc, #520]	; (402cd8 <m2m_wifi_cb+0x284>)
  402ace:	681b      	ldr	r3, [r3, #0]
  402ad0:	2b00      	cmp	r3, #0
  402ad2:	d0f1      	beq.n	402ab8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  402ad4:	a903      	add	r1, sp, #12
  402ad6:	202c      	movs	r0, #44	; 0x2c
  402ad8:	4798      	blx	r3
  402ada:	e7ed      	b.n	402ab8 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  402adc:	2300      	movs	r3, #0
  402ade:	2208      	movs	r2, #8
  402ae0:	a903      	add	r1, sp, #12
  402ae2:	4628      	mov	r0, r5
  402ae4:	4c7b      	ldr	r4, [pc, #492]	; (402cd4 <m2m_wifi_cb+0x280>)
  402ae6:	47a0      	blx	r4
  402ae8:	2800      	cmp	r0, #0
  402aea:	d1e5      	bne.n	402ab8 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402aec:	4b7a      	ldr	r3, [pc, #488]	; (402cd8 <m2m_wifi_cb+0x284>)
  402aee:	681b      	ldr	r3, [r3, #0]
  402af0:	2b00      	cmp	r3, #0
  402af2:	d0e1      	beq.n	402ab8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  402af4:	a903      	add	r1, sp, #12
  402af6:	201b      	movs	r0, #27
  402af8:	4798      	blx	r3
  402afa:	e7dd      	b.n	402ab8 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  402afc:	2301      	movs	r3, #1
  402afe:	2230      	movs	r2, #48	; 0x30
  402b00:	a903      	add	r1, sp, #12
  402b02:	4628      	mov	r0, r5
  402b04:	4c73      	ldr	r4, [pc, #460]	; (402cd4 <m2m_wifi_cb+0x280>)
  402b06:	47a0      	blx	r4
  402b08:	2800      	cmp	r0, #0
  402b0a:	d1d5      	bne.n	402ab8 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  402b0c:	4b72      	ldr	r3, [pc, #456]	; (402cd8 <m2m_wifi_cb+0x284>)
  402b0e:	681b      	ldr	r3, [r3, #0]
  402b10:	2b00      	cmp	r3, #0
  402b12:	d0d1      	beq.n	402ab8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  402b14:	a903      	add	r1, sp, #12
  402b16:	2006      	movs	r0, #6
  402b18:	4798      	blx	r3
  402b1a:	e7cd      	b.n	402ab8 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  402b1c:	2300      	movs	r3, #0
  402b1e:	2210      	movs	r2, #16
  402b20:	a903      	add	r1, sp, #12
  402b22:	4628      	mov	r0, r5
  402b24:	4c6b      	ldr	r4, [pc, #428]	; (402cd4 <m2m_wifi_cb+0x280>)
  402b26:	47a0      	blx	r4
  402b28:	2800      	cmp	r0, #0
  402b2a:	d1c5      	bne.n	402ab8 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402b2c:	4b6a      	ldr	r3, [pc, #424]	; (402cd8 <m2m_wifi_cb+0x284>)
  402b2e:	681b      	ldr	r3, [r3, #0]
  402b30:	2b00      	cmp	r3, #0
  402b32:	d0c1      	beq.n	402ab8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  402b34:	a903      	add	r1, sp, #12
  402b36:	2032      	movs	r0, #50	; 0x32
  402b38:	4798      	blx	r3
  402b3a:	e7bd      	b.n	402ab8 <m2m_wifi_cb+0x64>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  402b3c:	2264      	movs	r2, #100	; 0x64
  402b3e:	2100      	movs	r1, #0
  402b40:	a803      	add	r0, sp, #12
  402b42:	4b66      	ldr	r3, [pc, #408]	; (402cdc <m2m_wifi_cb+0x288>)
  402b44:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  402b46:	2300      	movs	r3, #0
  402b48:	2264      	movs	r2, #100	; 0x64
  402b4a:	a903      	add	r1, sp, #12
  402b4c:	4628      	mov	r0, r5
  402b4e:	4c61      	ldr	r4, [pc, #388]	; (402cd4 <m2m_wifi_cb+0x280>)
  402b50:	47a0      	blx	r4
  402b52:	2800      	cmp	r0, #0
  402b54:	d1b0      	bne.n	402ab8 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402b56:	4b60      	ldr	r3, [pc, #384]	; (402cd8 <m2m_wifi_cb+0x284>)
  402b58:	681b      	ldr	r3, [r3, #0]
  402b5a:	2b00      	cmp	r3, #0
  402b5c:	d0ac      	beq.n	402ab8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  402b5e:	a903      	add	r1, sp, #12
  402b60:	202f      	movs	r0, #47	; 0x2f
  402b62:	4798      	blx	r3
  402b64:	e7a8      	b.n	402ab8 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  402b66:	2300      	movs	r3, #0
  402b68:	2204      	movs	r2, #4
  402b6a:	a903      	add	r1, sp, #12
  402b6c:	4628      	mov	r0, r5
  402b6e:	4c59      	ldr	r4, [pc, #356]	; (402cd4 <m2m_wifi_cb+0x280>)
  402b70:	47a0      	blx	r4
  402b72:	2800      	cmp	r0, #0
  402b74:	d1a0      	bne.n	402ab8 <m2m_wifi_cb+0x64>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  402b76:	485a      	ldr	r0, [pc, #360]	; (402ce0 <m2m_wifi_cb+0x28c>)
  402b78:	4c53      	ldr	r4, [pc, #332]	; (402cc8 <m2m_wifi_cb+0x274>)
  402b7a:	47a0      	blx	r4
  402b7c:	9903      	ldr	r1, [sp, #12]
  402b7e:	b2cb      	uxtb	r3, r1
  402b80:	9300      	str	r3, [sp, #0]
  402b82:	f3c1 2307 	ubfx	r3, r1, #8, #8
  402b86:	f3c1 4207 	ubfx	r2, r1, #16, #8
  402b8a:	0e09      	lsrs	r1, r1, #24
  402b8c:	4855      	ldr	r0, [pc, #340]	; (402ce4 <m2m_wifi_cb+0x290>)
  402b8e:	47a0      	blx	r4
  402b90:	484f      	ldr	r0, [pc, #316]	; (402cd0 <m2m_wifi_cb+0x27c>)
  402b92:	47a0      	blx	r4
			if (gpfAppWifiCb)
  402b94:	4b50      	ldr	r3, [pc, #320]	; (402cd8 <m2m_wifi_cb+0x284>)
  402b96:	681b      	ldr	r3, [r3, #0]
  402b98:	2b00      	cmp	r3, #0
  402b9a:	d08d      	beq.n	402ab8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  402b9c:	2100      	movs	r1, #0
  402b9e:	2034      	movs	r0, #52	; 0x34
  402ba0:	4798      	blx	r3
  402ba2:	e789      	b.n	402ab8 <m2m_wifi_cb+0x64>
		gu8scanInProgress = 0;
  402ba4:	2300      	movs	r3, #0
  402ba6:	4a50      	ldr	r2, [pc, #320]	; (402ce8 <m2m_wifi_cb+0x294>)
  402ba8:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  402baa:	2204      	movs	r2, #4
  402bac:	a903      	add	r1, sp, #12
  402bae:	4628      	mov	r0, r5
  402bb0:	4c48      	ldr	r4, [pc, #288]	; (402cd4 <m2m_wifi_cb+0x280>)
  402bb2:	47a0      	blx	r4
  402bb4:	2800      	cmp	r0, #0
  402bb6:	f47f af7f 	bne.w	402ab8 <m2m_wifi_cb+0x64>
			gu8ChNum = strState.u8NumofCh;
  402bba:	f89d 200c 	ldrb.w	r2, [sp, #12]
  402bbe:	4b4b      	ldr	r3, [pc, #300]	; (402cec <m2m_wifi_cb+0x298>)
  402bc0:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  402bc2:	4b45      	ldr	r3, [pc, #276]	; (402cd8 <m2m_wifi_cb+0x284>)
  402bc4:	681b      	ldr	r3, [r3, #0]
  402bc6:	2b00      	cmp	r3, #0
  402bc8:	f43f af76 	beq.w	402ab8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  402bcc:	a903      	add	r1, sp, #12
  402bce:	2011      	movs	r0, #17
  402bd0:	4798      	blx	r3
  402bd2:	e771      	b.n	402ab8 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  402bd4:	2300      	movs	r3, #0
  402bd6:	222c      	movs	r2, #44	; 0x2c
  402bd8:	a903      	add	r1, sp, #12
  402bda:	4628      	mov	r0, r5
  402bdc:	4c3d      	ldr	r4, [pc, #244]	; (402cd4 <m2m_wifi_cb+0x280>)
  402bde:	47a0      	blx	r4
  402be0:	2800      	cmp	r0, #0
  402be2:	f47f af69 	bne.w	402ab8 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402be6:	4b3c      	ldr	r3, [pc, #240]	; (402cd8 <m2m_wifi_cb+0x284>)
  402be8:	681b      	ldr	r3, [r3, #0]
  402bea:	2b00      	cmp	r3, #0
  402bec:	f43f af64 	beq.w	402ab8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  402bf0:	a903      	add	r1, sp, #12
  402bf2:	2013      	movs	r0, #19
  402bf4:	4798      	blx	r3
  402bf6:	e75f      	b.n	402ab8 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  402bf8:	2300      	movs	r3, #0
  402bfa:	2204      	movs	r2, #4
  402bfc:	a91c      	add	r1, sp, #112	; 0x70
  402bfe:	4628      	mov	r0, r5
  402c00:	4c34      	ldr	r4, [pc, #208]	; (402cd4 <m2m_wifi_cb+0x280>)
  402c02:	47a0      	blx	r4
  402c04:	2800      	cmp	r0, #0
  402c06:	f47f af57 	bne.w	402ab8 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402c0a:	4b33      	ldr	r3, [pc, #204]	; (402cd8 <m2m_wifi_cb+0x284>)
  402c0c:	681b      	ldr	r3, [r3, #0]
  402c0e:	2b00      	cmp	r3, #0
  402c10:	f43f af52 	beq.w	402ab8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  402c14:	a91c      	add	r1, sp, #112	; 0x70
  402c16:	2004      	movs	r0, #4
  402c18:	4798      	blx	r3
  402c1a:	e74d      	b.n	402ab8 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  402c1c:	2300      	movs	r3, #0
  402c1e:	2204      	movs	r2, #4
  402c20:	a91c      	add	r1, sp, #112	; 0x70
  402c22:	4628      	mov	r0, r5
  402c24:	4c2b      	ldr	r4, [pc, #172]	; (402cd4 <m2m_wifi_cb+0x280>)
  402c26:	47a0      	blx	r4
  402c28:	2800      	cmp	r0, #0
  402c2a:	f47f af45 	bne.w	402ab8 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402c2e:	4b2a      	ldr	r3, [pc, #168]	; (402cd8 <m2m_wifi_cb+0x284>)
  402c30:	681b      	ldr	r3, [r3, #0]
  402c32:	2b00      	cmp	r3, #0
  402c34:	f43f af40 	beq.w	402ab8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  402c38:	a91c      	add	r1, sp, #112	; 0x70
  402c3a:	2065      	movs	r0, #101	; 0x65
  402c3c:	4798      	blx	r3
  402c3e:	e73b      	b.n	402ab8 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  402c40:	2301      	movs	r3, #1
  402c42:	2264      	movs	r2, #100	; 0x64
  402c44:	a903      	add	r1, sp, #12
  402c46:	4628      	mov	r0, r5
  402c48:	4c22      	ldr	r4, [pc, #136]	; (402cd4 <m2m_wifi_cb+0x280>)
  402c4a:	47a0      	blx	r4
  402c4c:	2800      	cmp	r0, #0
  402c4e:	f47f af33 	bne.w	402ab8 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  402c52:	4b21      	ldr	r3, [pc, #132]	; (402cd8 <m2m_wifi_cb+0x284>)
  402c54:	681b      	ldr	r3, [r3, #0]
  402c56:	2b00      	cmp	r3, #0
  402c58:	f43f af2e 	beq.w	402ab8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  402c5c:	a903      	add	r1, sp, #12
  402c5e:	2009      	movs	r0, #9
  402c60:	4798      	blx	r3
  402c62:	e729      	b.n	402ab8 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  402c64:	2301      	movs	r3, #1
  402c66:	2204      	movs	r2, #4
  402c68:	a903      	add	r1, sp, #12
  402c6a:	4628      	mov	r0, r5
  402c6c:	4c19      	ldr	r4, [pc, #100]	; (402cd4 <m2m_wifi_cb+0x280>)
  402c6e:	47a0      	blx	r4
  402c70:	2800      	cmp	r0, #0
  402c72:	f47f af21 	bne.w	402ab8 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  402c76:	4b18      	ldr	r3, [pc, #96]	; (402cd8 <m2m_wifi_cb+0x284>)
  402c78:	681b      	ldr	r3, [r3, #0]
  402c7a:	2b00      	cmp	r3, #0
  402c7c:	f43f af1c 	beq.w	402ab8 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  402c80:	a903      	add	r1, sp, #12
  402c82:	202a      	movs	r0, #42	; 0x2a
  402c84:	4798      	blx	r3
  402c86:	e717      	b.n	402ab8 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  402c88:	2300      	movs	r3, #0
  402c8a:	2208      	movs	r2, #8
  402c8c:	a903      	add	r1, sp, #12
  402c8e:	4628      	mov	r0, r5
  402c90:	4c10      	ldr	r4, [pc, #64]	; (402cd4 <m2m_wifi_cb+0x280>)
  402c92:	47a0      	blx	r4
  402c94:	2800      	cmp	r0, #0
  402c96:	f47f af0f 	bne.w	402ab8 <m2m_wifi_cb+0x64>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  402c9a:	2301      	movs	r3, #1
  402c9c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  402ca0:	9903      	ldr	r1, [sp, #12]
  402ca2:	f105 0008 	add.w	r0, r5, #8
  402ca6:	47a0      	blx	r4
  402ca8:	2800      	cmp	r0, #0
  402caa:	f47f af05 	bne.w	402ab8 <m2m_wifi_cb+0x64>
				if(gpfAppWifiCb)
  402cae:	4b0a      	ldr	r3, [pc, #40]	; (402cd8 <m2m_wifi_cb+0x284>)
  402cb0:	681b      	ldr	r3, [r3, #0]
  402cb2:	2b00      	cmp	r3, #0
  402cb4:	f43f af00 	beq.w	402ab8 <m2m_wifi_cb+0x64>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  402cb8:	a903      	add	r1, sp, #12
  402cba:	2020      	movs	r0, #32
  402cbc:	4798      	blx	r3
  402cbe:	e6fb      	b.n	402ab8 <m2m_wifi_cb+0x64>
  402cc0:	00408f50 	.word	0x00408f50
  402cc4:	00408cac 	.word	0x00408cac
  402cc8:	00405d39 	.word	0x00405d39
  402ccc:	00408fac 	.word	0x00408fac
  402cd0:	00408cd8 	.word	0x00408cd8
  402cd4:	00402861 	.word	0x00402861
  402cd8:	2040c35c 	.word	0x2040c35c
  402cdc:	0040220d 	.word	0x0040220d
  402ce0:	00408f80 	.word	0x00408f80
  402ce4:	00408f8c 	.word	0x00408f8c
  402ce8:	2040c361 	.word	0x2040c361
  402cec:	2040c360 	.word	0x2040c360

00402cf0 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  402cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
  402cf2:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  402cf4:	2301      	movs	r3, #1
  402cf6:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  402cfa:	2800      	cmp	r0, #0
  402cfc:	d050      	beq.n	402da0 <m2m_wifi_init+0xb0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  402cfe:	6802      	ldr	r2, [r0, #0]
  402d00:	4b29      	ldr	r3, [pc, #164]	; (402da8 <m2m_wifi_init+0xb8>)
  402d02:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  402d04:	2200      	movs	r2, #0
  402d06:	4b29      	ldr	r3, [pc, #164]	; (402dac <m2m_wifi_init+0xbc>)
  402d08:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  402d0a:	f10d 0007 	add.w	r0, sp, #7
  402d0e:	4b28      	ldr	r3, [pc, #160]	; (402db0 <m2m_wifi_init+0xc0>)
  402d10:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  402d12:	4604      	mov	r4, r0
  402d14:	b110      	cbz	r0, 402d1c <m2m_wifi_init+0x2c>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  402d16:	4620      	mov	r0, r4
  402d18:	b00b      	add	sp, #44	; 0x2c
  402d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
  402d1c:	4b25      	ldr	r3, [pc, #148]	; (402db4 <m2m_wifi_init+0xc4>)
  402d1e:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  402d20:	4604      	mov	r4, r0
  402d22:	2800      	cmp	r0, #0
  402d24:	d138      	bne.n	402d98 <m2m_wifi_init+0xa8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  402d26:	4924      	ldr	r1, [pc, #144]	; (402db8 <m2m_wifi_init+0xc8>)
  402d28:	2001      	movs	r0, #1
  402d2a:	4b24      	ldr	r3, [pc, #144]	; (402dbc <m2m_wifi_init+0xcc>)
  402d2c:	4798      	blx	r3
	ret = nm_get_firmware_info(&strtmp);
  402d2e:	a802      	add	r0, sp, #8
  402d30:	4b23      	ldr	r3, [pc, #140]	; (402dc0 <m2m_wifi_init+0xd0>)
  402d32:	4798      	blx	r3
  402d34:	4604      	mov	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  402d36:	4f23      	ldr	r7, [pc, #140]	; (402dc4 <m2m_wifi_init+0xd4>)
  402d38:	4638      	mov	r0, r7
  402d3a:	4d23      	ldr	r5, [pc, #140]	; (402dc8 <m2m_wifi_init+0xd8>)
  402d3c:	47a8      	blx	r5
  402d3e:	f89d 300e 	ldrb.w	r3, [sp, #14]
  402d42:	f89d 200d 	ldrb.w	r2, [sp, #13]
  402d46:	f89d 100c 	ldrb.w	r1, [sp, #12]
  402d4a:	4820      	ldr	r0, [pc, #128]	; (402dcc <m2m_wifi_init+0xdc>)
  402d4c:	47a8      	blx	r5
  402d4e:	4e20      	ldr	r6, [pc, #128]	; (402dd0 <m2m_wifi_init+0xe0>)
  402d50:	4630      	mov	r0, r6
  402d52:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  402d54:	4638      	mov	r0, r7
  402d56:	47a8      	blx	r5
  402d58:	f89d 3011 	ldrb.w	r3, [sp, #17]
  402d5c:	f89d 2010 	ldrb.w	r2, [sp, #16]
  402d60:	f89d 100f 	ldrb.w	r1, [sp, #15]
  402d64:	481b      	ldr	r0, [pc, #108]	; (402dd4 <m2m_wifi_init+0xe4>)
  402d66:	47a8      	blx	r5
  402d68:	4630      	mov	r0, r6
  402d6a:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  402d6c:	4638      	mov	r0, r7
  402d6e:	47a8      	blx	r5
  402d70:	2300      	movs	r3, #0
  402d72:	2203      	movs	r2, #3
  402d74:	2113      	movs	r1, #19
  402d76:	4818      	ldr	r0, [pc, #96]	; (402dd8 <m2m_wifi_init+0xe8>)
  402d78:	47a8      	blx	r5
  402d7a:	4630      	mov	r0, r6
  402d7c:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  402d7e:	f114 0f0d 	cmn.w	r4, #13
  402d82:	d1c8      	bne.n	402d16 <m2m_wifi_init+0x26>
		M2M_ERR("Mismatch Firmawre Version\n");
  402d84:	f240 12d5 	movw	r2, #469	; 0x1d5
  402d88:	4914      	ldr	r1, [pc, #80]	; (402ddc <m2m_wifi_init+0xec>)
  402d8a:	4815      	ldr	r0, [pc, #84]	; (402de0 <m2m_wifi_init+0xf0>)
  402d8c:	47a8      	blx	r5
  402d8e:	4815      	ldr	r0, [pc, #84]	; (402de4 <m2m_wifi_init+0xf4>)
  402d90:	47a8      	blx	r5
  402d92:	4630      	mov	r0, r6
  402d94:	47a8      	blx	r5
  402d96:	e7be      	b.n	402d16 <m2m_wifi_init+0x26>
	nm_drv_deinit(NULL);
  402d98:	2000      	movs	r0, #0
  402d9a:	4b13      	ldr	r3, [pc, #76]	; (402de8 <m2m_wifi_init+0xf8>)
  402d9c:	4798      	blx	r3
  402d9e:	e7ba      	b.n	402d16 <m2m_wifi_init+0x26>
		ret = M2M_ERR_FAIL;
  402da0:	f06f 040b 	mvn.w	r4, #11
  402da4:	e7b7      	b.n	402d16 <m2m_wifi_init+0x26>
  402da6:	bf00      	nop
  402da8:	2040c35c 	.word	0x2040c35c
  402dac:	2040c361 	.word	0x2040c361
  402db0:	004036e5 	.word	0x004036e5
  402db4:	00402a05 	.word	0x00402a05
  402db8:	00402a55 	.word	0x00402a55
  402dbc:	00402975 	.word	0x00402975
  402dc0:	00403635 	.word	0x00403635
  402dc4:	00408f80 	.word	0x00408f80
  402dc8:	00405d39 	.word	0x00405d39
  402dcc:	0040906c 	.word	0x0040906c
  402dd0:	00408cd8 	.word	0x00408cd8
  402dd4:	00409088 	.word	0x00409088
  402dd8:	004090a4 	.word	0x004090a4
  402ddc:	00408f5c 	.word	0x00408f5c
  402de0:	00408cac 	.word	0x00408cac
  402de4:	004090c0 	.word	0x004090c0
  402de8:	004037b1 	.word	0x004037b1

00402dec <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  402dec:	b508      	push	{r3, lr}
	return hif_handle_isr();
  402dee:	4b01      	ldr	r3, [pc, #4]	; (402df4 <m2m_wifi_handle_events+0x8>)
  402df0:	4798      	blx	r3
}
  402df2:	bd08      	pop	{r3, pc}
  402df4:	00402551 	.word	0x00402551

00402df8 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  402df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402dfc:	b0a0      	sub	sp, #128	; 0x80
  402dfe:	4680      	mov	r8, r0
  402e00:	460d      	mov	r5, r1
  402e02:	4614      	mov	r4, r2
  402e04:	461e      	mov	r6, r3
  402e06:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  402e0a:	2a01      	cmp	r2, #1
  402e0c:	d003      	beq.n	402e16 <m2m_wifi_connect_sc+0x1e>
	{
		if(pvAuthInfo == NULL)
  402e0e:	2b00      	cmp	r3, #0
  402e10:	d037      	beq.n	402e82 <m2m_wifi_connect_sc+0x8a>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  402e12:	2a02      	cmp	r2, #2
  402e14:	d042      	beq.n	402e9c <m2m_wifi_connect_sc+0xa4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  402e16:	1e6b      	subs	r3, r5, #1
  402e18:	b2db      	uxtb	r3, r3
  402e1a:	2b1f      	cmp	r3, #31
  402e1c:	d875      	bhi.n	402f0a <m2m_wifi_connect_sc+0x112>
		goto ERR1;
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  402e1e:	2fff      	cmp	r7, #255	; 0xff
  402e20:	d001      	beq.n	402e26 <m2m_wifi_connect_sc+0x2e>
  402e22:	2f0d      	cmp	r7, #13
  402e24:	d87e      	bhi.n	402f24 <m2m_wifi_connect_sc+0x12c>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  402e26:	462a      	mov	r2, r5
  402e28:	4641      	mov	r1, r8
  402e2a:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  402e2e:	4b77      	ldr	r3, [pc, #476]	; (40300c <m2m_wifi_connect_sc+0x214>)
  402e30:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  402e32:	ab20      	add	r3, sp, #128	; 0x80
  402e34:	441d      	add	r5, r3
  402e36:	2300      	movs	r3, #0
  402e38:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  402e3c:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  402e40:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  402e44:	3300      	adds	r3, #0
  402e46:	bf18      	it	ne
  402e48:	2301      	movne	r3, #1
  402e4a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  402e4e:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  402e52:	2c03      	cmp	r4, #3
  402e54:	d073      	beq.n	402f3e <m2m_wifi_connect_sc+0x146>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  402e56:	2c02      	cmp	r4, #2
  402e58:	f000 80aa 	beq.w	402fb0 <m2m_wifi_connect_sc+0x1b8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  402e5c:	2c04      	cmp	r4, #4
  402e5e:	f000 80c1 	beq.w	402fe4 <m2m_wifi_connect_sc+0x1ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  402e62:	2c01      	cmp	r4, #1
  402e64:	f040 80c4 	bne.w	402ff0 <m2m_wifi_connect_sc+0x1f8>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  402e68:	2300      	movs	r3, #0
  402e6a:	9302      	str	r3, [sp, #8]
  402e6c:	9301      	str	r3, [sp, #4]
  402e6e:	9300      	str	r3, [sp, #0]
  402e70:	236c      	movs	r3, #108	; 0x6c
  402e72:	aa05      	add	r2, sp, #20
  402e74:	2128      	movs	r1, #40	; 0x28
  402e76:	2001      	movs	r0, #1
  402e78:	4c65      	ldr	r4, [pc, #404]	; (403010 <m2m_wifi_connect_sc+0x218>)
  402e7a:	47a0      	blx	r4

ERR1:
	return ret;
}
  402e7c:	b020      	add	sp, #128	; 0x80
  402e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			M2M_ERR("Key is not valid\n");
  402e82:	f240 2203 	movw	r2, #515	; 0x203
  402e86:	4963      	ldr	r1, [pc, #396]	; (403014 <m2m_wifi_connect_sc+0x21c>)
  402e88:	4863      	ldr	r0, [pc, #396]	; (403018 <m2m_wifi_connect_sc+0x220>)
  402e8a:	4c64      	ldr	r4, [pc, #400]	; (40301c <m2m_wifi_connect_sc+0x224>)
  402e8c:	47a0      	blx	r4
  402e8e:	4864      	ldr	r0, [pc, #400]	; (403020 <m2m_wifi_connect_sc+0x228>)
  402e90:	47a0      	blx	r4
  402e92:	4864      	ldr	r0, [pc, #400]	; (403024 <m2m_wifi_connect_sc+0x22c>)
  402e94:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402e96:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402e9a:	e7ef      	b.n	402e7c <m2m_wifi_connect_sc+0x84>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  402e9c:	4618      	mov	r0, r3
  402e9e:	4b62      	ldr	r3, [pc, #392]	; (403028 <m2m_wifi_connect_sc+0x230>)
  402ea0:	4798      	blx	r3
  402ea2:	2840      	cmp	r0, #64	; 0x40
  402ea4:	d1b7      	bne.n	402e16 <m2m_wifi_connect_sc+0x1e>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  402ea6:	7833      	ldrb	r3, [r6, #0]
  402ea8:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  402eac:	b2d2      	uxtb	r2, r2
  402eae:	2a06      	cmp	r2, #6
  402eb0:	d91e      	bls.n	402ef0 <m2m_wifi_connect_sc+0xf8>
  402eb2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402eb6:	b2d2      	uxtb	r2, r2
  402eb8:	2a36      	cmp	r2, #54	; 0x36
  402eba:	d819      	bhi.n	402ef0 <m2m_wifi_connect_sc+0xf8>
  402ebc:	3b47      	subs	r3, #71	; 0x47
  402ebe:	b2db      	uxtb	r3, r3
  402ec0:	2b19      	cmp	r3, #25
  402ec2:	d915      	bls.n	402ef0 <m2m_wifi_connect_sc+0xf8>
  402ec4:	4631      	mov	r1, r6
  402ec6:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  402eca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  402ece:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  402ed2:	b2d2      	uxtb	r2, r2
  402ed4:	2a06      	cmp	r2, #6
  402ed6:	d90b      	bls.n	402ef0 <m2m_wifi_connect_sc+0xf8>
  402ed8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402edc:	b2d2      	uxtb	r2, r2
  402ede:	2a36      	cmp	r2, #54	; 0x36
  402ee0:	d806      	bhi.n	402ef0 <m2m_wifi_connect_sc+0xf8>
  402ee2:	3b47      	subs	r3, #71	; 0x47
  402ee4:	b2db      	uxtb	r3, r3
  402ee6:	2b19      	cmp	r3, #25
  402ee8:	d902      	bls.n	402ef0 <m2m_wifi_connect_sc+0xf8>
			while(i < (M2M_MAX_PSK_LEN-1))
  402eea:	4288      	cmp	r0, r1
  402eec:	d1ed      	bne.n	402eca <m2m_wifi_connect_sc+0xd2>
  402eee:	e792      	b.n	402e16 <m2m_wifi_connect_sc+0x1e>
					M2M_ERR("Invalid Key\n");
  402ef0:	f240 220f 	movw	r2, #527	; 0x20f
  402ef4:	4947      	ldr	r1, [pc, #284]	; (403014 <m2m_wifi_connect_sc+0x21c>)
  402ef6:	4848      	ldr	r0, [pc, #288]	; (403018 <m2m_wifi_connect_sc+0x220>)
  402ef8:	4c48      	ldr	r4, [pc, #288]	; (40301c <m2m_wifi_connect_sc+0x224>)
  402efa:	47a0      	blx	r4
  402efc:	484b      	ldr	r0, [pc, #300]	; (40302c <m2m_wifi_connect_sc+0x234>)
  402efe:	47a0      	blx	r4
  402f00:	4848      	ldr	r0, [pc, #288]	; (403024 <m2m_wifi_connect_sc+0x22c>)
  402f02:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  402f04:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  402f08:	e7b8      	b.n	402e7c <m2m_wifi_connect_sc+0x84>
		M2M_ERR("SSID LEN INVALID\n");
  402f0a:	f240 2219 	movw	r2, #537	; 0x219
  402f0e:	4941      	ldr	r1, [pc, #260]	; (403014 <m2m_wifi_connect_sc+0x21c>)
  402f10:	4841      	ldr	r0, [pc, #260]	; (403018 <m2m_wifi_connect_sc+0x220>)
  402f12:	4c42      	ldr	r4, [pc, #264]	; (40301c <m2m_wifi_connect_sc+0x224>)
  402f14:	47a0      	blx	r4
  402f16:	4846      	ldr	r0, [pc, #280]	; (403030 <m2m_wifi_connect_sc+0x238>)
  402f18:	47a0      	blx	r4
  402f1a:	4842      	ldr	r0, [pc, #264]	; (403024 <m2m_wifi_connect_sc+0x22c>)
  402f1c:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402f1e:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  402f22:	e7ab      	b.n	402e7c <m2m_wifi_connect_sc+0x84>
			M2M_ERR("CH INVALID\n");
  402f24:	f240 2222 	movw	r2, #546	; 0x222
  402f28:	493a      	ldr	r1, [pc, #232]	; (403014 <m2m_wifi_connect_sc+0x21c>)
  402f2a:	483b      	ldr	r0, [pc, #236]	; (403018 <m2m_wifi_connect_sc+0x220>)
  402f2c:	4c3b      	ldr	r4, [pc, #236]	; (40301c <m2m_wifi_connect_sc+0x224>)
  402f2e:	47a0      	blx	r4
  402f30:	4840      	ldr	r0, [pc, #256]	; (403034 <m2m_wifi_connect_sc+0x23c>)
  402f32:	47a0      	blx	r4
  402f34:	483b      	ldr	r0, [pc, #236]	; (403024 <m2m_wifi_connect_sc+0x22c>)
  402f36:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402f38:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402f3c:	e79e      	b.n	402e7c <m2m_wifi_connect_sc+0x84>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  402f3e:	7833      	ldrb	r3, [r6, #0]
  402f40:	3b01      	subs	r3, #1
  402f42:	b2db      	uxtb	r3, r3
  402f44:	f88d 3014 	strb.w	r3, [sp, #20]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  402f48:	2b03      	cmp	r3, #3
  402f4a:	d813      	bhi.n	402f74 <m2m_wifi_connect_sc+0x17c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  402f4c:	7872      	ldrb	r2, [r6, #1]
  402f4e:	1e53      	subs	r3, r2, #1
  402f50:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  402f54:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  402f58:	2b0b      	cmp	r3, #11
  402f5a:	d11a      	bne.n	402f92 <m2m_wifi_connect_sc+0x19a>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  402f5c:	1cb1      	adds	r1, r6, #2
  402f5e:	f10d 0016 	add.w	r0, sp, #22
  402f62:	4b2a      	ldr	r3, [pc, #168]	; (40300c <m2m_wifi_connect_sc+0x214>)
  402f64:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  402f66:	7873      	ldrb	r3, [r6, #1]
  402f68:	aa20      	add	r2, sp, #128	; 0x80
  402f6a:	4413      	add	r3, r2
  402f6c:	2200      	movs	r2, #0
  402f6e:	f803 2c6a 	strb.w	r2, [r3, #-106]
  402f72:	e779      	b.n	402e68 <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  402f74:	f240 2239 	movw	r2, #569	; 0x239
  402f78:	4926      	ldr	r1, [pc, #152]	; (403014 <m2m_wifi_connect_sc+0x21c>)
  402f7a:	4827      	ldr	r0, [pc, #156]	; (403018 <m2m_wifi_connect_sc+0x220>)
  402f7c:	4c27      	ldr	r4, [pc, #156]	; (40301c <m2m_wifi_connect_sc+0x224>)
  402f7e:	47a0      	blx	r4
  402f80:	f89d 1014 	ldrb.w	r1, [sp, #20]
  402f84:	482c      	ldr	r0, [pc, #176]	; (403038 <m2m_wifi_connect_sc+0x240>)
  402f86:	47a0      	blx	r4
  402f88:	4826      	ldr	r0, [pc, #152]	; (403024 <m2m_wifi_connect_sc+0x22c>)
  402f8a:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402f8c:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402f90:	e774      	b.n	402e7c <m2m_wifi_connect_sc+0x84>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  402f92:	f44f 7210 	mov.w	r2, #576	; 0x240
  402f96:	491f      	ldr	r1, [pc, #124]	; (403014 <m2m_wifi_connect_sc+0x21c>)
  402f98:	481f      	ldr	r0, [pc, #124]	; (403018 <m2m_wifi_connect_sc+0x220>)
  402f9a:	4c20      	ldr	r4, [pc, #128]	; (40301c <m2m_wifi_connect_sc+0x224>)
  402f9c:	47a0      	blx	r4
  402f9e:	f89d 1015 	ldrb.w	r1, [sp, #21]
  402fa2:	4826      	ldr	r0, [pc, #152]	; (40303c <m2m_wifi_connect_sc+0x244>)
  402fa4:	47a0      	blx	r4
  402fa6:	481f      	ldr	r0, [pc, #124]	; (403024 <m2m_wifi_connect_sc+0x22c>)
  402fa8:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402faa:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402fae:	e765      	b.n	402e7c <m2m_wifi_connect_sc+0x84>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  402fb0:	4630      	mov	r0, r6
  402fb2:	4b1d      	ldr	r3, [pc, #116]	; (403028 <m2m_wifi_connect_sc+0x230>)
  402fb4:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  402fb6:	1e43      	subs	r3, r0, #1
  402fb8:	b29b      	uxth	r3, r3
  402fba:	2b3f      	cmp	r3, #63	; 0x3f
  402fbc:	d805      	bhi.n	402fca <m2m_wifi_connect_sc+0x1d2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  402fbe:	1c42      	adds	r2, r0, #1
  402fc0:	4631      	mov	r1, r6
  402fc2:	a805      	add	r0, sp, #20
  402fc4:	4b11      	ldr	r3, [pc, #68]	; (40300c <m2m_wifi_connect_sc+0x214>)
  402fc6:	4798      	blx	r3
  402fc8:	e74e      	b.n	402e68 <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Incorrect PSK key length\n");
  402fca:	f240 224f 	movw	r2, #591	; 0x24f
  402fce:	4911      	ldr	r1, [pc, #68]	; (403014 <m2m_wifi_connect_sc+0x21c>)
  402fd0:	4811      	ldr	r0, [pc, #68]	; (403018 <m2m_wifi_connect_sc+0x220>)
  402fd2:	4c12      	ldr	r4, [pc, #72]	; (40301c <m2m_wifi_connect_sc+0x224>)
  402fd4:	47a0      	blx	r4
  402fd6:	481a      	ldr	r0, [pc, #104]	; (403040 <m2m_wifi_connect_sc+0x248>)
  402fd8:	47a0      	blx	r4
  402fda:	4812      	ldr	r0, [pc, #72]	; (403024 <m2m_wifi_connect_sc+0x22c>)
  402fdc:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402fde:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402fe2:	e74b      	b.n	402e7c <m2m_wifi_connect_sc+0x84>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  402fe4:	223e      	movs	r2, #62	; 0x3e
  402fe6:	4631      	mov	r1, r6
  402fe8:	a805      	add	r0, sp, #20
  402fea:	4b08      	ldr	r3, [pc, #32]	; (40300c <m2m_wifi_connect_sc+0x214>)
  402fec:	4798      	blx	r3
  402fee:	e73b      	b.n	402e68 <m2m_wifi_connect_sc+0x70>
		M2M_ERR("undefined sec type\n");
  402ff0:	f240 225f 	movw	r2, #607	; 0x25f
  402ff4:	4907      	ldr	r1, [pc, #28]	; (403014 <m2m_wifi_connect_sc+0x21c>)
  402ff6:	4808      	ldr	r0, [pc, #32]	; (403018 <m2m_wifi_connect_sc+0x220>)
  402ff8:	4c08      	ldr	r4, [pc, #32]	; (40301c <m2m_wifi_connect_sc+0x224>)
  402ffa:	47a0      	blx	r4
  402ffc:	4811      	ldr	r0, [pc, #68]	; (403044 <m2m_wifi_connect_sc+0x24c>)
  402ffe:	47a0      	blx	r4
  403000:	4808      	ldr	r0, [pc, #32]	; (403024 <m2m_wifi_connect_sc+0x22c>)
  403002:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  403004:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  403008:	e738      	b.n	402e7c <m2m_wifi_connect_sc+0x84>
  40300a:	bf00      	nop
  40300c:	004021f9 	.word	0x004021f9
  403010:	00402371 	.word	0x00402371
  403014:	00408f6c 	.word	0x00408f6c
  403018:	00408cac 	.word	0x00408cac
  40301c:	00405d39 	.word	0x00405d39
  403020:	00408fc0 	.word	0x00408fc0
  403024:	00408cd8 	.word	0x00408cd8
  403028:	0040221b 	.word	0x0040221b
  40302c:	00408fd4 	.word	0x00408fd4
  403030:	00408fe4 	.word	0x00408fe4
  403034:	00408ff8 	.word	0x00408ff8
  403038:	00409004 	.word	0x00409004
  40303c:	00409020 	.word	0x00409020
  403040:	0040903c 	.word	0x0040903c
  403044:	00409058 	.word	0x00409058

00403048 <m2m_wifi_connect>:
{
  403048:	b510      	push	{r4, lr}
  40304a:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  40304c:	2400      	movs	r4, #0
  40304e:	9401      	str	r4, [sp, #4]
  403050:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  403054:	9400      	str	r4, [sp, #0]
  403056:	4c02      	ldr	r4, [pc, #8]	; (403060 <m2m_wifi_connect+0x18>)
  403058:	47a0      	blx	r4
}
  40305a:	b002      	add	sp, #8
  40305c:	bd10      	pop	{r4, pc}
  40305e:	bf00      	nop
  403060:	00402df9 	.word	0x00402df9

00403064 <m2m_wifi_set_mac_address>:
sint8 m2m_wifi_disconnect(void)
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISCONNECT, NULL, 0, NULL, 0,0);
}
sint8 m2m_wifi_set_mac_address(uint8 au8MacAddress[6])
{
  403064:	b510      	push	{r4, lr}
  403066:	b086      	sub	sp, #24
	tstrM2mSetMacAddress strTmp;
	m2m_memcpy((uint8*) strTmp.au8Mac, (uint8*) au8MacAddress, 6);
  403068:	2206      	movs	r2, #6
  40306a:	4601      	mov	r1, r0
  40306c:	a804      	add	r0, sp, #16
  40306e:	4b07      	ldr	r3, [pc, #28]	; (40308c <m2m_wifi_set_mac_address+0x28>)
  403070:	4798      	blx	r3
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_MAC_ADDRESS,
  403072:	2300      	movs	r3, #0
  403074:	9302      	str	r3, [sp, #8]
  403076:	9301      	str	r3, [sp, #4]
  403078:	9300      	str	r3, [sp, #0]
  40307a:	2308      	movs	r3, #8
  40307c:	aa04      	add	r2, sp, #16
  40307e:	2102      	movs	r1, #2
  403080:	2001      	movs	r0, #1
  403082:	4c03      	ldr	r4, [pc, #12]	; (403090 <m2m_wifi_set_mac_address+0x2c>)
  403084:	47a0      	blx	r4
		(uint8*) &strTmp, sizeof(tstrM2mSetMacAddress), NULL, 0,0);
}
  403086:	b006      	add	sp, #24
  403088:	bd10      	pop	{r4, pc}
  40308a:	bf00      	nop
  40308c:	004021f9 	.word	0x004021f9
  403090:	00402371 	.word	0x00402371

00403094 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  403094:	2000      	movs	r0, #0
  403096:	4770      	bx	lr

00403098 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  403098:	b5f0      	push	{r4, r5, r6, r7, lr}
  40309a:	b083      	sub	sp, #12
  40309c:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  40309e:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  4030a2:	4e0a      	ldr	r6, [pc, #40]	; (4030cc <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4030a4:	4f0a      	ldr	r7, [pc, #40]	; (4030d0 <chip_apply_conf+0x38>)
		nm_write_reg(rNMI_GP_REG_1, val32);
  4030a6:	4621      	mov	r1, r4
  4030a8:	4628      	mov	r0, r5
  4030aa:	47b0      	blx	r6
		if(val32 != 0) {		
  4030ac:	b154      	cbz	r4, 4030c4 <chip_apply_conf+0x2c>
			uint32 reg = 0;
  4030ae:	a902      	add	r1, sp, #8
  4030b0:	2300      	movs	r3, #0
  4030b2:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4030b6:	4628      	mov	r0, r5
  4030b8:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  4030ba:	2800      	cmp	r0, #0
  4030bc:	d1f3      	bne.n	4030a6 <chip_apply_conf+0xe>
				if(reg == val32)
  4030be:	9b01      	ldr	r3, [sp, #4]
  4030c0:	429c      	cmp	r4, r3
  4030c2:	d1f0      	bne.n	4030a6 <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  4030c4:	2000      	movs	r0, #0
  4030c6:	b003      	add	sp, #12
  4030c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4030ca:	bf00      	nop
  4030cc:	00403571 	.word	0x00403571
  4030d0:	00403565 	.word	0x00403565

004030d4 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  4030d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4030d8:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  4030da:	2001      	movs	r0, #1
  4030dc:	4b3c      	ldr	r3, [pc, #240]	; (4031d0 <nm_clkless_wake+0xfc>)
  4030de:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  4030e0:	a901      	add	r1, sp, #4
  4030e2:	2001      	movs	r0, #1
  4030e4:	4b3b      	ldr	r3, [pc, #236]	; (4031d4 <nm_clkless_wake+0x100>)
  4030e6:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  4030e8:	4682      	mov	sl, r0
  4030ea:	b938      	cbnz	r0, 4030fc <nm_clkless_wake+0x28>
  4030ec:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  4030ee:	f04f 0801 	mov.w	r8, #1
  4030f2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 4031fc <nm_clkless_wake+0x128>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  4030f6:	4d36      	ldr	r5, [pc, #216]	; (4031d0 <nm_clkless_wake+0xfc>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4030f8:	4f37      	ldr	r7, [pc, #220]	; (4031d8 <nm_clkless_wake+0x104>)
  4030fa:	e020      	b.n	40313e <nm_clkless_wake+0x6a>
		M2M_ERR("Bus error (1). Wake up failed\n");
  4030fc:	2272      	movs	r2, #114	; 0x72
  4030fe:	4937      	ldr	r1, [pc, #220]	; (4031dc <nm_clkless_wake+0x108>)
  403100:	4837      	ldr	r0, [pc, #220]	; (4031e0 <nm_clkless_wake+0x10c>)
  403102:	4c38      	ldr	r4, [pc, #224]	; (4031e4 <nm_clkless_wake+0x110>)
  403104:	47a0      	blx	r4
  403106:	4838      	ldr	r0, [pc, #224]	; (4031e8 <nm_clkless_wake+0x114>)
  403108:	47a0      	blx	r4
  40310a:	4838      	ldr	r0, [pc, #224]	; (4031ec <nm_clkless_wake+0x118>)
  40310c:	47a0      	blx	r4
		goto _WAKE_EXIT;
  40310e:	e009      	b.n	403124 <nm_clkless_wake+0x50>
					M2M_ERR("Bus error (2). Wake up failed\n");
  403110:	2296      	movs	r2, #150	; 0x96
  403112:	4932      	ldr	r1, [pc, #200]	; (4031dc <nm_clkless_wake+0x108>)
  403114:	4832      	ldr	r0, [pc, #200]	; (4031e0 <nm_clkless_wake+0x10c>)
  403116:	4c33      	ldr	r4, [pc, #204]	; (4031e4 <nm_clkless_wake+0x110>)
  403118:	47a0      	blx	r4
  40311a:	4835      	ldr	r0, [pc, #212]	; (4031f0 <nm_clkless_wake+0x11c>)
  40311c:	47a0      	blx	r4
  40311e:	4833      	ldr	r0, [pc, #204]	; (4031ec <nm_clkless_wake+0x118>)
  403120:	47a0      	blx	r4
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403122:	46b2      	mov	sl, r6
		}
	} while((clk_status_reg & 0x4) == 0);

_WAKE_EXIT:
	return ret;
}
  403124:	4650      	mov	r0, sl
  403126:	b003      	add	sp, #12
  403128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nm_write_reg(0x1, reg | (1 << 1));
  40312c:	9901      	ldr	r1, [sp, #4]
  40312e:	f041 0102 	orr.w	r1, r1, #2
  403132:	4640      	mov	r0, r8
  403134:	47c8      	blx	r9
	} while((clk_status_reg & 0x4) == 0);
  403136:	9b00      	ldr	r3, [sp, #0]
  403138:	f013 0f04 	tst.w	r3, #4
  40313c:	d1f2      	bne.n	403124 <nm_clkless_wake+0x50>
		nm_write_reg(0x1, reg | (1 << 1));
  40313e:	9901      	ldr	r1, [sp, #4]
  403140:	f041 0102 	orr.w	r1, r1, #2
  403144:	4640      	mov	r0, r8
  403146:	47c8      	blx	r9
		nm_bsp_sleep(1);
  403148:	4640      	mov	r0, r8
  40314a:	47a8      	blx	r5
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40314c:	4669      	mov	r1, sp
  40314e:	4b29      	ldr	r3, [pc, #164]	; (4031f4 <nm_clkless_wake+0x120>)
  403150:	6818      	ldr	r0, [r3, #0]
  403152:	4b20      	ldr	r3, [pc, #128]	; (4031d4 <nm_clkless_wake+0x100>)
  403154:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  403156:	b908      	cbnz	r0, 40315c <nm_clkless_wake+0x88>
  403158:	9b00      	ldr	r3, [sp, #0]
  40315a:	b9bb      	cbnz	r3, 40318c <nm_clkless_wake+0xb8>
			clk_status_reg_adr = 0xe;
  40315c:	4e25      	ldr	r6, [pc, #148]	; (4031f4 <nm_clkless_wake+0x120>)
  40315e:	230e      	movs	r3, #14
  403160:	6033      	str	r3, [r6, #0]
			nm_bsp_sleep(1);
  403162:	4640      	mov	r0, r8
  403164:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403166:	4669      	mov	r1, sp
  403168:	6830      	ldr	r0, [r6, #0]
  40316a:	4b1a      	ldr	r3, [pc, #104]	; (4031d4 <nm_clkless_wake+0x100>)
  40316c:	4798      	blx	r3
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  40316e:	b908      	cbnz	r0, 403174 <nm_clkless_wake+0xa0>
  403170:	9b00      	ldr	r3, [sp, #0]
  403172:	b95b      	cbnz	r3, 40318c <nm_clkless_wake+0xb8>
				clk_status_reg_adr = 0x13;
  403174:	4e1f      	ldr	r6, [pc, #124]	; (4031f4 <nm_clkless_wake+0x120>)
  403176:	2313      	movs	r3, #19
  403178:	6033      	str	r3, [r6, #0]
				nm_bsp_sleep(1);
  40317a:	4640      	mov	r0, r8
  40317c:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40317e:	4669      	mov	r1, sp
  403180:	6830      	ldr	r0, [r6, #0]
  403182:	4b14      	ldr	r3, [pc, #80]	; (4031d4 <nm_clkless_wake+0x100>)
  403184:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  403186:	4606      	mov	r6, r0
  403188:	2800      	cmp	r0, #0
  40318a:	d1c1      	bne.n	403110 <nm_clkless_wake+0x3c>
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40318c:	4e19      	ldr	r6, [pc, #100]	; (4031f4 <nm_clkless_wake+0x120>)
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  40318e:	9b00      	ldr	r3, [sp, #0]
  403190:	f013 0f04 	tst.w	r3, #4
  403194:	d1c6      	bne.n	403124 <nm_clkless_wake+0x50>
  403196:	3401      	adds	r4, #1
  403198:	fba7 2304 	umull	r2, r3, r7, r4
  40319c:	085b      	lsrs	r3, r3, #1
  40319e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4031a2:	429c      	cmp	r4, r3
  4031a4:	d1c2      	bne.n	40312c <nm_clkless_wake+0x58>
			nm_bsp_sleep(2);
  4031a6:	2002      	movs	r0, #2
  4031a8:	47a8      	blx	r5
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4031aa:	4669      	mov	r1, sp
  4031ac:	6830      	ldr	r0, [r6, #0]
  4031ae:	4b09      	ldr	r3, [pc, #36]	; (4031d4 <nm_clkless_wake+0x100>)
  4031b0:	4798      	blx	r3
			if((clk_status_reg & 0x4) == 0)
  4031b2:	9b00      	ldr	r3, [sp, #0]
  4031b4:	f013 0f04 	tst.w	r3, #4
  4031b8:	d1e9      	bne.n	40318e <nm_clkless_wake+0xba>
				M2M_ERR("clocks still OFF. Wake up failed\n");
  4031ba:	22aa      	movs	r2, #170	; 0xaa
  4031bc:	4907      	ldr	r1, [pc, #28]	; (4031dc <nm_clkless_wake+0x108>)
  4031be:	4808      	ldr	r0, [pc, #32]	; (4031e0 <nm_clkless_wake+0x10c>)
  4031c0:	f8df b020 	ldr.w	fp, [pc, #32]	; 4031e4 <nm_clkless_wake+0x110>
  4031c4:	47d8      	blx	fp
  4031c6:	480c      	ldr	r0, [pc, #48]	; (4031f8 <nm_clkless_wake+0x124>)
  4031c8:	47d8      	blx	fp
  4031ca:	4808      	ldr	r0, [pc, #32]	; (4031ec <nm_clkless_wake+0x118>)
  4031cc:	47d8      	blx	fp
  4031ce:	e7de      	b.n	40318e <nm_clkless_wake+0xba>
  4031d0:	00401e55 	.word	0x00401e55
  4031d4:	00403565 	.word	0x00403565
  4031d8:	aaaaaaab 	.word	0xaaaaaaab
  4031dc:	004090dc 	.word	0x004090dc
  4031e0:	00408cac 	.word	0x00408cac
  4031e4:	00405d39 	.word	0x00405d39
  4031e8:	0040914c 	.word	0x0040914c
  4031ec:	00408cd8 	.word	0x00408cd8
  4031f0:	0040916c 	.word	0x0040916c
  4031f4:	20400014 	.word	0x20400014
  4031f8:	0040918c 	.word	0x0040918c
  4031fc:	00403571 	.word	0x00403571

00403200 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  403200:	b500      	push	{lr}
  403202:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  403204:	a901      	add	r1, sp, #4
  403206:	f241 4008 	movw	r0, #5128	; 0x1408
  40320a:	4b15      	ldr	r3, [pc, #84]	; (403260 <enable_interrupts+0x60>)
  40320c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40320e:	b9e8      	cbnz	r0, 40324c <enable_interrupts+0x4c>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  403210:	9901      	ldr	r1, [sp, #4]
  403212:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  403216:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  403218:	f241 4008 	movw	r0, #5128	; 0x1408
  40321c:	4b11      	ldr	r3, [pc, #68]	; (403264 <enable_interrupts+0x64>)
  40321e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403220:	b9b8      	cbnz	r0, 403252 <enable_interrupts+0x52>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  403222:	a901      	add	r1, sp, #4
  403224:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  403228:	4b0d      	ldr	r3, [pc, #52]	; (403260 <enable_interrupts+0x60>)
  40322a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40322c:	b9a0      	cbnz	r0, 403258 <enable_interrupts+0x58>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  40322e:	9901      	ldr	r1, [sp, #4]
  403230:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  403234:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  403236:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  40323a:	4b0a      	ldr	r3, [pc, #40]	; (403264 <enable_interrupts+0x64>)
  40323c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40323e:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
  403240:	bf18      	it	ne
  403242:	f06f 0005 	mvnne.w	r0, #5
	}
	return M2M_SUCCESS;
}
  403246:	b003      	add	sp, #12
  403248:	f85d fb04 	ldr.w	pc, [sp], #4
		return M2M_ERR_BUS_FAIL;
  40324c:	f06f 0005 	mvn.w	r0, #5
  403250:	e7f9      	b.n	403246 <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  403252:	f06f 0005 	mvn.w	r0, #5
  403256:	e7f6      	b.n	403246 <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  403258:	f06f 0005 	mvn.w	r0, #5
  40325c:	e7f3      	b.n	403246 <enable_interrupts+0x46>
  40325e:	bf00      	nop
  403260:	00403565 	.word	0x00403565
  403264:	00403571 	.word	0x00403571

00403268 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  403268:	b510      	push	{r4, lr}
  40326a:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  40326c:	4b25      	ldr	r3, [pc, #148]	; (403304 <nmi_get_chipid+0x9c>)
  40326e:	681c      	ldr	r4, [r3, #0]
  403270:	b124      	cbz	r4, 40327c <nmi_get_chipid+0x14>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
  403272:	4b24      	ldr	r3, [pc, #144]	; (403304 <nmi_get_chipid+0x9c>)
  403274:	681c      	ldr	r4, [r3, #0]
}
  403276:	4620      	mov	r0, r4
  403278:	b002      	add	sp, #8
  40327a:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  40327c:	4619      	mov	r1, r3
  40327e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  403282:	4b21      	ldr	r3, [pc, #132]	; (403308 <nmi_get_chipid+0xa0>)
  403284:	4798      	blx	r3
  403286:	b118      	cbz	r0, 403290 <nmi_get_chipid+0x28>
			chipid = 0;
  403288:	2200      	movs	r2, #0
  40328a:	4b1e      	ldr	r3, [pc, #120]	; (403304 <nmi_get_chipid+0x9c>)
  40328c:	601a      	str	r2, [r3, #0]
			return 0;
  40328e:	e7f2      	b.n	403276 <nmi_get_chipid+0xe>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  403290:	a901      	add	r1, sp, #4
  403292:	f241 30f4 	movw	r0, #5108	; 0x13f4
  403296:	4b1c      	ldr	r3, [pc, #112]	; (403308 <nmi_get_chipid+0xa0>)
  403298:	4798      	blx	r3
  40329a:	b118      	cbz	r0, 4032a4 <nmi_get_chipid+0x3c>
			chipid = 0;
  40329c:	2200      	movs	r2, #0
  40329e:	4b19      	ldr	r3, [pc, #100]	; (403304 <nmi_get_chipid+0x9c>)
  4032a0:	601a      	str	r2, [r3, #0]
			return 0;
  4032a2:	e7e8      	b.n	403276 <nmi_get_chipid+0xe>
		if (chipid == 0x1002a0)  {
  4032a4:	4b17      	ldr	r3, [pc, #92]	; (403304 <nmi_get_chipid+0x9c>)
  4032a6:	681b      	ldr	r3, [r3, #0]
  4032a8:	4a18      	ldr	r2, [pc, #96]	; (40330c <nmi_get_chipid+0xa4>)
  4032aa:	4293      	cmp	r3, r2
  4032ac:	d00d      	beq.n	4032ca <nmi_get_chipid+0x62>
		} else if(chipid == 0x1002b0) {
  4032ae:	4a18      	ldr	r2, [pc, #96]	; (403310 <nmi_get_chipid+0xa8>)
  4032b0:	4293      	cmp	r3, r2
  4032b2:	d011      	beq.n	4032d8 <nmi_get_chipid+0x70>
		} else if(chipid == 0x1000F0) { 
  4032b4:	4a17      	ldr	r2, [pc, #92]	; (403314 <nmi_get_chipid+0xac>)
  4032b6:	4293      	cmp	r3, r2
  4032b8:	d018      	beq.n	4032ec <nmi_get_chipid+0x84>
		chipid |= 0x050000;
  4032ba:	4a12      	ldr	r2, [pc, #72]	; (403304 <nmi_get_chipid+0x9c>)
		chipid &= ~(0x0f0000);
  4032bc:	6813      	ldr	r3, [r2, #0]
  4032be:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
		chipid |= 0x050000;
  4032c2:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  4032c6:	6013      	str	r3, [r2, #0]
  4032c8:	e7d3      	b.n	403272 <nmi_get_chipid+0xa>
			if (rfrevid == 0x1) { /* 1002A0 */
  4032ca:	9b01      	ldr	r3, [sp, #4]
  4032cc:	2b01      	cmp	r3, #1
  4032ce:	d0f4      	beq.n	4032ba <nmi_get_chipid+0x52>
				chipid = 0x1002a1;
  4032d0:	3201      	adds	r2, #1
  4032d2:	4b0c      	ldr	r3, [pc, #48]	; (403304 <nmi_get_chipid+0x9c>)
  4032d4:	601a      	str	r2, [r3, #0]
  4032d6:	e7f0      	b.n	4032ba <nmi_get_chipid+0x52>
			if(rfrevid == 3) { /* 1002B0 */
  4032d8:	9b01      	ldr	r3, [sp, #4]
  4032da:	2b03      	cmp	r3, #3
  4032dc:	d0ed      	beq.n	4032ba <nmi_get_chipid+0x52>
			} else if(rfrevid == 4) { /* 1002B1 */
  4032de:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  4032e0:	bf0c      	ite	eq
  4032e2:	3201      	addeq	r2, #1
				chipid = 0x1002b2;
  4032e4:	4a0c      	ldrne	r2, [pc, #48]	; (403318 <nmi_get_chipid+0xb0>)
  4032e6:	4b07      	ldr	r3, [pc, #28]	; (403304 <nmi_get_chipid+0x9c>)
  4032e8:	601a      	str	r2, [r3, #0]
  4032ea:	e7e6      	b.n	4032ba <nmi_get_chipid+0x52>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  4032ec:	4905      	ldr	r1, [pc, #20]	; (403304 <nmi_get_chipid+0x9c>)
  4032ee:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  4032f2:	4b05      	ldr	r3, [pc, #20]	; (403308 <nmi_get_chipid+0xa0>)
  4032f4:	4798      	blx	r3
  4032f6:	2800      	cmp	r0, #0
  4032f8:	d0df      	beq.n	4032ba <nmi_get_chipid+0x52>
			chipid = 0;
  4032fa:	2200      	movs	r2, #0
  4032fc:	4b01      	ldr	r3, [pc, #4]	; (403304 <nmi_get_chipid+0x9c>)
  4032fe:	601a      	str	r2, [r3, #0]
			return 0;
  403300:	e7b9      	b.n	403276 <nmi_get_chipid+0xe>
  403302:	bf00      	nop
  403304:	2040c364 	.word	0x2040c364
  403308:	00403565 	.word	0x00403565
  40330c:	001002a0 	.word	0x001002a0
  403310:	001002b0 	.word	0x001002b0
  403314:	001000f0 	.word	0x001000f0
  403318:	001002b2 	.word	0x001002b2

0040331c <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  40331c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403320:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  403322:	f241 0514 	movw	r5, #4116	; 0x1014
  403326:	4c28      	ldr	r4, [pc, #160]	; (4033c8 <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  403328:	4e28      	ldr	r6, [pc, #160]	; (4033cc <wait_for_bootrom+0xb0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40332a:	4628      	mov	r0, r5
  40332c:	47a0      	blx	r4
		if (reg & 0x80000000) {
  40332e:	2800      	cmp	r0, #0
  403330:	db02      	blt.n	403338 <wait_for_bootrom+0x1c>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  403332:	2001      	movs	r0, #1
  403334:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  403336:	e7f8      	b.n	40332a <wait_for_bootrom+0xe>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  403338:	4825      	ldr	r0, [pc, #148]	; (4033d0 <wait_for_bootrom+0xb4>)
  40333a:	4b23      	ldr	r3, [pc, #140]	; (4033c8 <wait_for_bootrom+0xac>)
  40333c:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  40333e:	f010 0f01 	tst.w	r0, #1
  403342:	d110      	bne.n	403366 <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  403344:	f8df 8084 	ldr.w	r8, [pc, #132]	; 4033cc <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  403348:	4e1f      	ldr	r6, [pc, #124]	; (4033c8 <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  40334a:	4d22      	ldr	r5, [pc, #136]	; (4033d4 <wait_for_bootrom+0xb8>)
			nm_bsp_sleep(1);
  40334c:	2001      	movs	r0, #1
  40334e:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  403350:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  403354:	47b0      	blx	r6
  403356:	4604      	mov	r4, r0
			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  403358:	462a      	mov	r2, r5
  40335a:	4601      	mov	r1, r0
  40335c:	481e      	ldr	r0, [pc, #120]	; (4033d8 <wait_for_bootrom+0xbc>)
  40335e:	4b1f      	ldr	r3, [pc, #124]	; (4033dc <wait_for_bootrom+0xc0>)
  403360:	4798      	blx	r3
		while(reg != M2M_FINISH_BOOT_ROM)
  403362:	42ac      	cmp	r4, r5
  403364:	d1f2      	bne.n	40334c <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  403366:	2f02      	cmp	r7, #2
  403368:	d019      	beq.n	40339e <wait_for_bootrom+0x82>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  40336a:	2f03      	cmp	r7, #3
  40336c:	d022      	beq.n	4033b4 <wait_for_bootrom+0x98>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  40336e:	2f04      	cmp	r7, #4
  403370:	bf14      	ite	ne
  403372:	2400      	movne	r4, #0
  403374:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  403376:	4b1a      	ldr	r3, [pc, #104]	; (4033e0 <wait_for_bootrom+0xc4>)
  403378:	4798      	blx	r3
  40337a:	f3c0 000b 	ubfx	r0, r0, #0, #12
  40337e:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  403382:	bf0c      	ite	eq
  403384:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  403388:	4620      	movne	r0, r4
  40338a:	4b16      	ldr	r3, [pc, #88]	; (4033e4 <wait_for_bootrom+0xc8>)
  40338c:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  40338e:	4916      	ldr	r1, [pc, #88]	; (4033e8 <wait_for_bootrom+0xcc>)
  403390:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  403394:	4b15      	ldr	r3, [pc, #84]	; (4033ec <wait_for_bootrom+0xd0>)
  403396:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  403398:	2000      	movs	r0, #0
  40339a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  40339e:	4914      	ldr	r1, [pc, #80]	; (4033f0 <wait_for_bootrom+0xd4>)
  4033a0:	4814      	ldr	r0, [pc, #80]	; (4033f4 <wait_for_bootrom+0xd8>)
  4033a2:	4c12      	ldr	r4, [pc, #72]	; (4033ec <wait_for_bootrom+0xd0>)
  4033a4:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  4033a6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4033aa:	f241 008c 	movw	r0, #4236	; 0x108c
  4033ae:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  4033b0:	2400      	movs	r4, #0
  4033b2:	e7e0      	b.n	403376 <wait_for_bootrom+0x5a>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4033b4:	490e      	ldr	r1, [pc, #56]	; (4033f0 <wait_for_bootrom+0xd4>)
  4033b6:	480f      	ldr	r0, [pc, #60]	; (4033f4 <wait_for_bootrom+0xd8>)
  4033b8:	4c0c      	ldr	r4, [pc, #48]	; (4033ec <wait_for_bootrom+0xd0>)
  4033ba:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  4033bc:	2100      	movs	r1, #0
  4033be:	f241 008c 	movw	r0, #4236	; 0x108c
  4033c2:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  4033c4:	2400      	movs	r4, #0
  4033c6:	e7d6      	b.n	403376 <wait_for_bootrom+0x5a>
  4033c8:	00403559 	.word	0x00403559
  4033cc:	00401e55 	.word	0x00401e55
  4033d0:	000207bc 	.word	0x000207bc
  4033d4:	10add09e 	.word	0x10add09e
  4033d8:	004091b0 	.word	0x004091b0
  4033dc:	00405d39 	.word	0x00405d39
  4033e0:	00403269 	.word	0x00403269
  4033e4:	00403099 	.word	0x00403099
  4033e8:	ef522f61 	.word	0xef522f61
  4033ec:	00403571 	.word	0x00403571
  4033f0:	3c1cd57d 	.word	0x3c1cd57d
  4033f4:	000207ac 	.word	0x000207ac

004033f8 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  4033f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4033fa:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  4033fc:	f241 038c 	movw	r3, #4236	; 0x108c
  403400:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  403402:	4b18      	ldr	r3, [pc, #96]	; (403464 <wait_for_firmware_start+0x6c>)
  403404:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  403406:	3802      	subs	r0, #2
  403408:	b2c0      	uxtb	r0, r0
  40340a:	2801      	cmp	r0, #1
  40340c:	d911      	bls.n	403432 <wait_for_firmware_start+0x3a>
{
  40340e:	f04f 34ff 	mov.w	r4, #4294967295
  403412:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  403414:	2702      	movs	r7, #2
  403416:	4e14      	ldr	r6, [pc, #80]	; (403468 <wait_for_firmware_start+0x70>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  403418:	4d14      	ldr	r5, [pc, #80]	; (40346c <wait_for_firmware_start+0x74>)
	while (checkValue != reg)
  40341a:	9b00      	ldr	r3, [sp, #0]
  40341c:	4298      	cmp	r0, r3
  40341e:	d012      	beq.n	403446 <wait_for_firmware_start+0x4e>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  403420:	4638      	mov	r0, r7
  403422:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
  403424:	9801      	ldr	r0, [sp, #4]
  403426:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  403428:	3c01      	subs	r4, #1
  40342a:	d1f6      	bne.n	40341a <wait_for_firmware_start+0x22>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  40342c:	f06f 0004 	mvn.w	r0, #4
  403430:	e00e      	b.n	403450 <wait_for_firmware_start+0x58>
		regAddress = NMI_REV_REG;
  403432:	4b0f      	ldr	r3, [pc, #60]	; (403470 <wait_for_firmware_start+0x78>)
  403434:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  403436:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  40343a:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  40343e:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  403442:	9300      	str	r3, [sp, #0]
  403444:	e7e3      	b.n	40340e <wait_for_firmware_start+0x16>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  403446:	9a00      	ldr	r2, [sp, #0]
  403448:	4b06      	ldr	r3, [pc, #24]	; (403464 <wait_for_firmware_start+0x6c>)
  40344a:	429a      	cmp	r2, r3
  40344c:	d002      	beq.n	403454 <wait_for_firmware_start+0x5c>
	sint8 ret = M2M_SUCCESS;
  40344e:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  403450:	b003      	add	sp, #12
  403452:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nm_write_reg(NMI_STATE_REG, 0);
  403454:	2100      	movs	r1, #0
  403456:	f241 008c 	movw	r0, #4236	; 0x108c
  40345a:	4b06      	ldr	r3, [pc, #24]	; (403474 <wait_for_firmware_start+0x7c>)
  40345c:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
  40345e:	2000      	movs	r0, #0
  403460:	e7f6      	b.n	403450 <wait_for_firmware_start+0x58>
  403462:	bf00      	nop
  403464:	02532636 	.word	0x02532636
  403468:	00401e55 	.word	0x00401e55
  40346c:	00403559 	.word	0x00403559
  403470:	000207ac 	.word	0x000207ac
  403474:	00403571 	.word	0x00403571

00403478 <chip_deinit>:

sint8 chip_deinit(void)
{
  403478:	b5f0      	push	{r4, r5, r6, r7, lr}
  40347a:	b083      	sub	sp, #12
	uint32 reg = 0;
  40347c:	a902      	add	r1, sp, #8
  40347e:	2300      	movs	r3, #0
  403480:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  403484:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  403488:	4b24      	ldr	r3, [pc, #144]	; (40351c <chip_deinit+0xa4>)
  40348a:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  40348c:	bb20      	cbnz	r0, 4034d8 <chip_deinit+0x60>
		M2M_ERR("failed to de-initialize\n");
	}
	reg &= ~(1 << 10);
  40348e:	9901      	ldr	r1, [sp, #4]
  403490:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  403494:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  403496:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  40349a:	4b21      	ldr	r3, [pc, #132]	; (403520 <chip_deinit+0xa8>)
  40349c:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  40349e:	4605      	mov	r5, r0
  4034a0:	bb28      	cbnz	r0, 4034ee <chip_deinit+0x76>
  4034a2:	240a      	movs	r4, #10
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4034a4:	4e1d      	ldr	r6, [pc, #116]	; (40351c <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4034a6:	4f1e      	ldr	r7, [pc, #120]	; (403520 <chip_deinit+0xa8>)
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4034a8:	a901      	add	r1, sp, #4
  4034aa:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4034ae:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  4034b0:	4605      	mov	r5, r0
  4034b2:	bb38      	cbnz	r0, 403504 <chip_deinit+0x8c>
		if ((reg & (1 << 10))) {
  4034b4:	9901      	ldr	r1, [sp, #4]
  4034b6:	f411 6f80 	tst.w	r1, #1024	; 0x400
  4034ba:	d00a      	beq.n	4034d2 <chip_deinit+0x5a>
			reg &= ~(1 << 10);
  4034bc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4034c0:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4034c2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4034c6:	47b8      	blx	r7
  4034c8:	4605      	mov	r5, r0
  4034ca:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  4034cc:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4034d0:	d1ea      	bne.n	4034a8 <chip_deinit+0x30>

	return ret;
}
  4034d2:	4628      	mov	r0, r5
  4034d4:	b003      	add	sp, #12
  4034d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("failed to de-initialize\n");
  4034d8:	f240 2231 	movw	r2, #561	; 0x231
  4034dc:	4911      	ldr	r1, [pc, #68]	; (403524 <chip_deinit+0xac>)
  4034de:	4812      	ldr	r0, [pc, #72]	; (403528 <chip_deinit+0xb0>)
  4034e0:	4c12      	ldr	r4, [pc, #72]	; (40352c <chip_deinit+0xb4>)
  4034e2:	47a0      	blx	r4
  4034e4:	4812      	ldr	r0, [pc, #72]	; (403530 <chip_deinit+0xb8>)
  4034e6:	47a0      	blx	r4
  4034e8:	4812      	ldr	r0, [pc, #72]	; (403534 <chip_deinit+0xbc>)
  4034ea:	47a0      	blx	r4
  4034ec:	e7cf      	b.n	40348e <chip_deinit+0x16>
		M2M_ERR("Error while writing reg\n");
  4034ee:	f240 2237 	movw	r2, #567	; 0x237
  4034f2:	490c      	ldr	r1, [pc, #48]	; (403524 <chip_deinit+0xac>)
  4034f4:	480c      	ldr	r0, [pc, #48]	; (403528 <chip_deinit+0xb0>)
  4034f6:	4c0d      	ldr	r4, [pc, #52]	; (40352c <chip_deinit+0xb4>)
  4034f8:	47a0      	blx	r4
  4034fa:	480f      	ldr	r0, [pc, #60]	; (403538 <chip_deinit+0xc0>)
  4034fc:	47a0      	blx	r4
  4034fe:	480d      	ldr	r0, [pc, #52]	; (403534 <chip_deinit+0xbc>)
  403500:	47a0      	blx	r4
		return ret;
  403502:	e7e6      	b.n	4034d2 <chip_deinit+0x5a>
			M2M_ERR("Error while reading reg\n");
  403504:	f240 223e 	movw	r2, #574	; 0x23e
  403508:	4906      	ldr	r1, [pc, #24]	; (403524 <chip_deinit+0xac>)
  40350a:	4807      	ldr	r0, [pc, #28]	; (403528 <chip_deinit+0xb0>)
  40350c:	4c07      	ldr	r4, [pc, #28]	; (40352c <chip_deinit+0xb4>)
  40350e:	47a0      	blx	r4
  403510:	480a      	ldr	r0, [pc, #40]	; (40353c <chip_deinit+0xc4>)
  403512:	47a0      	blx	r4
  403514:	4807      	ldr	r0, [pc, #28]	; (403534 <chip_deinit+0xbc>)
  403516:	47a0      	blx	r4
			return ret;
  403518:	e7db      	b.n	4034d2 <chip_deinit+0x5a>
  40351a:	bf00      	nop
  40351c:	00403565 	.word	0x00403565
  403520:	00403571 	.word	0x00403571
  403524:	004090ec 	.word	0x004090ec
  403528:	00408cac 	.word	0x00408cac
  40352c:	00405d39 	.word	0x00405d39
  403530:	004090f8 	.word	0x004090f8
  403534:	00408cd8 	.word	0x00408cd8
  403538:	00409114 	.word	0x00409114
  40353c:	00409130 	.word	0x00409130

00403540 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  403540:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  403542:	4b01      	ldr	r3, [pc, #4]	; (403548 <nm_bus_iface_init+0x8>)
  403544:	4798      	blx	r3

	return ret;
}
  403546:	bd08      	pop	{r3, pc}
  403548:	00401fc9 	.word	0x00401fc9

0040354c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  40354c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  40354e:	4b01      	ldr	r3, [pc, #4]	; (403554 <nm_bus_iface_deinit+0x8>)
  403550:	4798      	blx	r3

	return ret;
}
  403552:	bd08      	pop	{r3, pc}
  403554:	004021b9 	.word	0x004021b9

00403558 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  403558:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  40355a:	4b01      	ldr	r3, [pc, #4]	; (403560 <nm_read_reg+0x8>)
  40355c:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  40355e:	bd08      	pop	{r3, pc}
  403560:	00403dad 	.word	0x00403dad

00403564 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  403564:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  403566:	4b01      	ldr	r3, [pc, #4]	; (40356c <nm_read_reg_with_ret+0x8>)
  403568:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  40356a:	bd08      	pop	{r3, pc}
  40356c:	00403dc5 	.word	0x00403dc5

00403570 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  403570:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  403572:	4b01      	ldr	r3, [pc, #4]	; (403578 <nm_write_reg+0x8>)
  403574:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  403576:	bd08      	pop	{r3, pc}
  403578:	00403ddd 	.word	0x00403ddd

0040357c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  40357c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403580:	4607      	mov	r7, r0
  403582:	4689      	mov	r9, r1
  403584:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  403586:	4b12      	ldr	r3, [pc, #72]	; (4035d0 <nm_read_block+0x54>)
  403588:	f8b3 8000 	ldrh.w	r8, [r3]
  40358c:	f1a8 0808 	sub.w	r8, r8, #8
  403590:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  403594:	4542      	cmp	r2, r8
  403596:	d919      	bls.n	4035cc <nm_read_block+0x50>
  403598:	4644      	mov	r4, r8
  40359a:	2600      	movs	r6, #0
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  40359c:	f8df a034 	ldr.w	sl, [pc, #52]	; 4035d4 <nm_read_block+0x58>
  4035a0:	4642      	mov	r2, r8
  4035a2:	eb09 0106 	add.w	r1, r9, r6
  4035a6:	4638      	mov	r0, r7
  4035a8:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  4035aa:	4603      	mov	r3, r0
  4035ac:	b958      	cbnz	r0, 4035c6 <nm_read_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  4035ae:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  4035b0:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  4035b2:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  4035b4:	42a5      	cmp	r5, r4
  4035b6:	d8f3      	bhi.n	4035a0 <nm_read_block+0x24>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4035b8:	b2aa      	uxth	r2, r5
  4035ba:	eb09 0106 	add.w	r1, r9, r6
  4035be:	4638      	mov	r0, r7
  4035c0:	4b04      	ldr	r3, [pc, #16]	; (4035d4 <nm_read_block+0x58>)
  4035c2:	4798      	blx	r3
  4035c4:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  4035c6:	4618      	mov	r0, r3
  4035c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  4035cc:	2600      	movs	r6, #0
  4035ce:	e7f3      	b.n	4035b8 <nm_read_block+0x3c>
  4035d0:	20400010 	.word	0x20400010
  4035d4:	00403f09 	.word	0x00403f09

004035d8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  4035d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4035dc:	4607      	mov	r7, r0
  4035de:	4689      	mov	r9, r1
  4035e0:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  4035e2:	4b12      	ldr	r3, [pc, #72]	; (40362c <nm_write_block+0x54>)
  4035e4:	f8b3 8000 	ldrh.w	r8, [r3]
  4035e8:	f1a8 0808 	sub.w	r8, r8, #8
  4035ec:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4035f0:	4542      	cmp	r2, r8
  4035f2:	d919      	bls.n	403628 <nm_write_block+0x50>
  4035f4:	4644      	mov	r4, r8
  4035f6:	2600      	movs	r6, #0
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  4035f8:	f8df a034 	ldr.w	sl, [pc, #52]	; 403630 <nm_write_block+0x58>
  4035fc:	4642      	mov	r2, r8
  4035fe:	eb09 0106 	add.w	r1, r9, r6
  403602:	4638      	mov	r0, r7
  403604:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  403606:	4603      	mov	r3, r0
  403608:	b958      	cbnz	r0, 403622 <nm_write_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  40360a:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  40360c:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  40360e:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  403610:	42a5      	cmp	r5, r4
  403612:	d8f3      	bhi.n	4035fc <nm_write_block+0x24>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  403614:	b2aa      	uxth	r2, r5
  403616:	eb09 0106 	add.w	r1, r9, r6
  40361a:	4638      	mov	r0, r7
  40361c:	4b04      	ldr	r3, [pc, #16]	; (403630 <nm_write_block+0x58>)
  40361e:	4798      	blx	r3
  403620:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  403622:	4618      	mov	r0, r3
  403624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  403628:	2600      	movs	r6, #0
  40362a:	e7f3      	b.n	403614 <nm_write_block+0x3c>
  40362c:	20400010 	.word	0x20400010
  403630:	00403fd1 	.word	0x00403fd1

00403634 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  403634:	b530      	push	{r4, r5, lr}
  403636:	b083      	sub	sp, #12
  403638:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  40363a:	a902      	add	r1, sp, #8
  40363c:	2300      	movs	r3, #0
  40363e:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  403642:	4824      	ldr	r0, [pc, #144]	; (4036d4 <nm_get_firmware_info+0xa0>)
  403644:	4b24      	ldr	r3, [pc, #144]	; (4036d8 <nm_get_firmware_info+0xa4>)
  403646:	4798      	blx	r3
  403648:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  40364a:	9a01      	ldr	r2, [sp, #4]
  40364c:	4b23      	ldr	r3, [pc, #140]	; (4036dc <nm_get_firmware_info+0xa8>)
  40364e:	429a      	cmp	r2, r3
  403650:	d039      	beq.n	4036c6 <nm_get_firmware_info+0x92>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  403652:	9b01      	ldr	r3, [sp, #4]
  403654:	0c1a      	lsrs	r2, r3, #16
  403656:	b291      	uxth	r1, r2
  403658:	0a08      	lsrs	r0, r1, #8
  40365a:	71e0      	strb	r0, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  40365c:	f3c1 1103 	ubfx	r1, r1, #4, #4
  403660:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  403662:	f002 020f 	and.w	r2, r2, #15
  403666:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  403668:	b29a      	uxth	r2, r3
  40366a:	0a11      	lsrs	r1, r2, #8
  40366c:	7121      	strb	r1, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  40366e:	f3c2 1203 	ubfx	r2, r2, #4, #4
  403672:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  403674:	f003 030f 	and.w	r3, r3, #15
  403678:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  40367a:	4b19      	ldr	r3, [pc, #100]	; (4036e0 <nm_get_firmware_info+0xac>)
  40367c:	4798      	blx	r3
  40367e:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  403680:	7922      	ldrb	r2, [r4, #4]
  403682:	79a3      	ldrb	r3, [r4, #6]
  403684:	f003 030f 	and.w	r3, r3, #15
  403688:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40368c:	7962      	ldrb	r2, [r4, #5]
  40368e:	0112      	lsls	r2, r2, #4
  403690:	b2d2      	uxtb	r2, r2
  403692:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
  403694:	79e1      	ldrb	r1, [r4, #7]
  403696:	7a62      	ldrb	r2, [r4, #9]
  403698:	f002 020f 	and.w	r2, r2, #15
  40369c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  4036a0:	7a21      	ldrb	r1, [r4, #8]
  4036a2:	0109      	lsls	r1, r1, #4
  4036a4:	b2c9      	uxtb	r1, r1
	if(curr_drv_ver <  min_req_drv_ver) {
  4036a6:	430a      	orrs	r2, r1
  4036a8:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  4036ac:	428a      	cmp	r2, r1
  4036ae:	bf88      	it	hi
  4036b0:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  4036b4:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  4036b8:	4293      	cmp	r3, r2
	}
	return ret;
}
  4036ba:	bf8c      	ite	hi
  4036bc:	4628      	movhi	r0, r5
  4036be:	f06f 000c 	mvnls.w	r0, #12
  4036c2:	b003      	add	sp, #12
  4036c4:	bd30      	pop	{r4, r5, pc}
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  4036c6:	a901      	add	r1, sp, #4
  4036c8:	f241 0048 	movw	r0, #4168	; 0x1048
  4036cc:	4b02      	ldr	r3, [pc, #8]	; (4036d8 <nm_get_firmware_info+0xa4>)
  4036ce:	4798      	blx	r3
  4036d0:	4605      	mov	r5, r0
  4036d2:	e7be      	b.n	403652 <nm_get_firmware_info+0x1e>
  4036d4:	000207ac 	.word	0x000207ac
  4036d8:	00403565 	.word	0x00403565
  4036dc:	d75dc1c3 	.word	0xd75dc1c3
  4036e0:	00403269 	.word	0x00403269

004036e4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  4036e4:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  4036e6:	2800      	cmp	r0, #0
  4036e8:	d037      	beq.n	40375a <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
  4036ea:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  4036ec:	1e63      	subs	r3, r4, #1
  4036ee:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  4036f0:	2b04      	cmp	r3, #4
  4036f2:	bf28      	it	cs
  4036f4:	2401      	movcs	r4, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
  4036f6:	2000      	movs	r0, #0
  4036f8:	4b1e      	ldr	r3, [pc, #120]	; (403774 <nm_drv_init+0x90>)
  4036fa:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4036fc:	4605      	mov	r5, r0
  4036fe:	2800      	cmp	r0, #0
  403700:	d12d      	bne.n	40375e <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  403702:	481d      	ldr	r0, [pc, #116]	; (403778 <nm_drv_init+0x94>)
  403704:	4d1d      	ldr	r5, [pc, #116]	; (40377c <nm_drv_init+0x98>)
  403706:	47a8      	blx	r5
  403708:	4b1d      	ldr	r3, [pc, #116]	; (403780 <nm_drv_init+0x9c>)
  40370a:	4798      	blx	r3
  40370c:	4601      	mov	r1, r0
  40370e:	481d      	ldr	r0, [pc, #116]	; (403784 <nm_drv_init+0xa0>)
  403710:	47a8      	blx	r5
  403712:	481d      	ldr	r0, [pc, #116]	; (403788 <nm_drv_init+0xa4>)
  403714:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  403716:	4b1d      	ldr	r3, [pc, #116]	; (40378c <nm_drv_init+0xa8>)
  403718:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  40371a:	4620      	mov	r0, r4
  40371c:	4b1c      	ldr	r3, [pc, #112]	; (403790 <nm_drv_init+0xac>)
  40371e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403720:	4605      	mov	r5, r0
  403722:	b9b0      	cbnz	r0, 403752 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  403724:	4620      	mov	r0, r4
  403726:	4b1b      	ldr	r3, [pc, #108]	; (403794 <nm_drv_init+0xb0>)
  403728:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40372a:	4605      	mov	r5, r0
  40372c:	b988      	cbnz	r0, 403752 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  40372e:	3c02      	subs	r4, #2
  403730:	b2e4      	uxtb	r4, r4
  403732:	2c01      	cmp	r4, #1
  403734:	d90f      	bls.n	403756 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  403736:	4b18      	ldr	r3, [pc, #96]	; (403798 <nm_drv_init+0xb4>)
  403738:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40373a:	4605      	mov	r5, r0
  40373c:	b158      	cbz	r0, 403756 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
  40373e:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  403742:	4916      	ldr	r1, [pc, #88]	; (40379c <nm_drv_init+0xb8>)
  403744:	4816      	ldr	r0, [pc, #88]	; (4037a0 <nm_drv_init+0xbc>)
  403746:	4c0d      	ldr	r4, [pc, #52]	; (40377c <nm_drv_init+0x98>)
  403748:	47a0      	blx	r4
  40374a:	4816      	ldr	r0, [pc, #88]	; (4037a4 <nm_drv_init+0xc0>)
  40374c:	47a0      	blx	r4
  40374e:	480e      	ldr	r0, [pc, #56]	; (403788 <nm_drv_init+0xa4>)
  403750:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  403752:	4b15      	ldr	r3, [pc, #84]	; (4037a8 <nm_drv_init+0xc4>)
  403754:	4798      	blx	r3
ERR1:
	return ret;
}
  403756:	4628      	mov	r0, r5
  403758:	bd38      	pop	{r3, r4, r5, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
  40375a:	2401      	movs	r4, #1
  40375c:	e7cb      	b.n	4036f6 <nm_drv_init+0x12>
		M2M_ERR("[nmi start]: fail init bus\n");
  40375e:	f44f 7292 	mov.w	r2, #292	; 0x124
  403762:	490e      	ldr	r1, [pc, #56]	; (40379c <nm_drv_init+0xb8>)
  403764:	480e      	ldr	r0, [pc, #56]	; (4037a0 <nm_drv_init+0xbc>)
  403766:	4c05      	ldr	r4, [pc, #20]	; (40377c <nm_drv_init+0x98>)
  403768:	47a0      	blx	r4
  40376a:	4810      	ldr	r0, [pc, #64]	; (4037ac <nm_drv_init+0xc8>)
  40376c:	47a0      	blx	r4
  40376e:	4806      	ldr	r0, [pc, #24]	; (403788 <nm_drv_init+0xa4>)
  403770:	47a0      	blx	r4
		goto ERR1;
  403772:	e7f0      	b.n	403756 <nm_drv_init+0x72>
  403774:	00403541 	.word	0x00403541
  403778:	00408f80 	.word	0x00408f80
  40377c:	00405d39 	.word	0x00405d39
  403780:	00403269 	.word	0x00403269
  403784:	00409278 	.word	0x00409278
  403788:	00408cd8 	.word	0x00408cd8
  40378c:	00403df5 	.word	0x00403df5
  403790:	0040331d 	.word	0x0040331d
  403794:	004033f9 	.word	0x004033f9
  403798:	00403201 	.word	0x00403201
  40379c:	004091c0 	.word	0x004091c0
  4037a0:	00408cac 	.word	0x00408cac
  4037a4:	0040923c 	.word	0x0040923c
  4037a8:	0040354d 	.word	0x0040354d
  4037ac:	0040925c 	.word	0x0040925c

004037b0 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  4037b0:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  4037b2:	4b19      	ldr	r3, [pc, #100]	; (403818 <nm_drv_deinit+0x68>)
  4037b4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4037b6:	b958      	cbnz	r0, 4037d0 <nm_drv_deinit+0x20>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  4037b8:	2000      	movs	r0, #0
  4037ba:	4b18      	ldr	r3, [pc, #96]	; (40381c <nm_drv_deinit+0x6c>)
  4037bc:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4037be:	4604      	mov	r4, r0
  4037c0:	b998      	cbnz	r0, 4037ea <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
  4037c2:	4b17      	ldr	r3, [pc, #92]	; (403820 <nm_drv_deinit+0x70>)
  4037c4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  4037c6:	4604      	mov	r4, r0
  4037c8:	b9d0      	cbnz	r0, 403800 <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  4037ca:	4b16      	ldr	r3, [pc, #88]	; (403824 <nm_drv_deinit+0x74>)
  4037cc:	4798      	blx	r3
  4037ce:	e00a      	b.n	4037e6 <nm_drv_deinit+0x36>
  4037d0:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  4037d2:	f44f 72ba 	mov.w	r2, #372	; 0x174
  4037d6:	4914      	ldr	r1, [pc, #80]	; (403828 <nm_drv_deinit+0x78>)
  4037d8:	4814      	ldr	r0, [pc, #80]	; (40382c <nm_drv_deinit+0x7c>)
  4037da:	4d15      	ldr	r5, [pc, #84]	; (403830 <nm_drv_deinit+0x80>)
  4037dc:	47a8      	blx	r5
  4037de:	4815      	ldr	r0, [pc, #84]	; (403834 <nm_drv_deinit+0x84>)
  4037e0:	47a8      	blx	r5
  4037e2:	4815      	ldr	r0, [pc, #84]	; (403838 <nm_drv_deinit+0x88>)
  4037e4:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
  4037e6:	4620      	mov	r0, r4
  4037e8:	bd38      	pop	{r3, r4, r5, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  4037ea:	f240 127b 	movw	r2, #379	; 0x17b
  4037ee:	490e      	ldr	r1, [pc, #56]	; (403828 <nm_drv_deinit+0x78>)
  4037f0:	480e      	ldr	r0, [pc, #56]	; (40382c <nm_drv_deinit+0x7c>)
  4037f2:	4d0f      	ldr	r5, [pc, #60]	; (403830 <nm_drv_deinit+0x80>)
  4037f4:	47a8      	blx	r5
  4037f6:	4811      	ldr	r0, [pc, #68]	; (40383c <nm_drv_deinit+0x8c>)
  4037f8:	47a8      	blx	r5
  4037fa:	480f      	ldr	r0, [pc, #60]	; (403838 <nm_drv_deinit+0x88>)
  4037fc:	47a8      	blx	r5
		goto ERR1;
  4037fe:	e7f2      	b.n	4037e6 <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
  403800:	f240 1281 	movw	r2, #385	; 0x181
  403804:	4908      	ldr	r1, [pc, #32]	; (403828 <nm_drv_deinit+0x78>)
  403806:	4809      	ldr	r0, [pc, #36]	; (40382c <nm_drv_deinit+0x7c>)
  403808:	4d09      	ldr	r5, [pc, #36]	; (403830 <nm_drv_deinit+0x80>)
  40380a:	47a8      	blx	r5
  40380c:	480c      	ldr	r0, [pc, #48]	; (403840 <nm_drv_deinit+0x90>)
  40380e:	47a8      	blx	r5
  403810:	4809      	ldr	r0, [pc, #36]	; (403838 <nm_drv_deinit+0x88>)
  403812:	47a8      	blx	r5
		goto ERR1;
  403814:	e7e7      	b.n	4037e6 <nm_drv_deinit+0x36>
  403816:	bf00      	nop
  403818:	00403479 	.word	0x00403479
  40381c:	00404855 	.word	0x00404855
  403820:	0040354d 	.word	0x0040354d
  403824:	00403da1 	.word	0x00403da1
  403828:	004091cc 	.word	0x004091cc
  40382c:	00408cac 	.word	0x00408cac
  403830:	00405d39 	.word	0x00405d39
  403834:	004091dc 	.word	0x004091dc
  403838:	00408cd8 	.word	0x00408cd8
  40383c:	004091fc 	.word	0x004091fc
  403840:	00409220 	.word	0x00409220

00403844 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  403844:	b500      	push	{lr}
  403846:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  403848:	2300      	movs	r3, #0
  40384a:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  40384c:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  40384e:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  403852:	a901      	add	r1, sp, #4
  403854:	2003      	movs	r0, #3
  403856:	4b02      	ldr	r3, [pc, #8]	; (403860 <nmi_spi_read+0x1c>)
  403858:	4798      	blx	r3
}
  40385a:	b005      	add	sp, #20
  40385c:	f85d fb04 	ldr.w	pc, [sp], #4
  403860:	004020e5 	.word	0x004020e5

00403864 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  403864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403868:	b082      	sub	sp, #8
  40386a:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  40386c:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  403870:	b2db      	uxtb	r3, r3
  403872:	2b01      	cmp	r3, #1
  403874:	d927      	bls.n	4038c6 <spi_cmd_rsp+0x62>
  403876:	28cf      	cmp	r0, #207	; 0xcf
  403878:	d025      	beq.n	4038c6 <spi_cmd_rsp+0x62>
{
  40387a:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  40387c:	f04f 0801 	mov.w	r8, #1
  403880:	4f23      	ldr	r7, [pc, #140]	; (403910 <spi_cmd_rsp+0xac>)
  403882:	4641      	mov	r1, r8
  403884:	f10d 0007 	add.w	r0, sp, #7
  403888:	47b8      	blx	r7
  40388a:	4606      	mov	r6, r0
  40388c:	bb20      	cbnz	r0, 4038d8 <spi_cmd_rsp+0x74>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  40388e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  403892:	42ab      	cmp	r3, r5
  403894:	d02c      	beq.n	4038f0 <spi_cmd_rsp+0x8c>
  403896:	1e63      	subs	r3, r4, #1
  403898:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  40389c:	d1f1      	bne.n	403882 <spi_cmd_rsp+0x1e>
  40389e:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  4038a0:	2701      	movs	r7, #1
  4038a2:	4d1b      	ldr	r5, [pc, #108]	; (403910 <spi_cmd_rsp+0xac>)
  4038a4:	4639      	mov	r1, r7
  4038a6:	f10d 0007 	add.w	r0, sp, #7
  4038aa:	47a8      	blx	r5
  4038ac:	bb10      	cbnz	r0, 4038f4 <spi_cmd_rsp+0x90>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  4038ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4038b2:	b353      	cbz	r3, 40390a <spi_cmd_rsp+0xa6>
  4038b4:	1e63      	subs	r3, r4, #1
  4038b6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4038ba:	d1f3      	bne.n	4038a4 <spi_cmd_rsp+0x40>
	sint8 result = N_OK;
  4038bc:	2601      	movs	r6, #1

_fail_:

	return result;
}
  4038be:	4630      	mov	r0, r6
  4038c0:	b002      	add	sp, #8
  4038c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  4038c6:	2101      	movs	r1, #1
  4038c8:	f10d 0007 	add.w	r0, sp, #7
  4038cc:	4b10      	ldr	r3, [pc, #64]	; (403910 <spi_cmd_rsp+0xac>)
  4038ce:	4798      	blx	r3
  4038d0:	2800      	cmp	r0, #0
  4038d2:	d0d2      	beq.n	40387a <spi_cmd_rsp+0x16>
			result = N_FAIL;
  4038d4:	2600      	movs	r6, #0
  4038d6:	e7f2      	b.n	4038be <spi_cmd_rsp+0x5a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  4038d8:	f240 1227 	movw	r2, #295	; 0x127
  4038dc:	490d      	ldr	r1, [pc, #52]	; (403914 <spi_cmd_rsp+0xb0>)
  4038de:	480e      	ldr	r0, [pc, #56]	; (403918 <spi_cmd_rsp+0xb4>)
  4038e0:	4c0e      	ldr	r4, [pc, #56]	; (40391c <spi_cmd_rsp+0xb8>)
  4038e2:	47a0      	blx	r4
  4038e4:	480e      	ldr	r0, [pc, #56]	; (403920 <spi_cmd_rsp+0xbc>)
  4038e6:	47a0      	blx	r4
  4038e8:	480e      	ldr	r0, [pc, #56]	; (403924 <spi_cmd_rsp+0xc0>)
  4038ea:	47a0      	blx	r4
			result = N_FAIL;
  4038ec:	2600      	movs	r6, #0
			goto _fail_;
  4038ee:	e7e6      	b.n	4038be <spi_cmd_rsp+0x5a>
  4038f0:	240b      	movs	r4, #11
  4038f2:	e7d5      	b.n	4038a0 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  4038f4:	f240 1235 	movw	r2, #309	; 0x135
  4038f8:	4906      	ldr	r1, [pc, #24]	; (403914 <spi_cmd_rsp+0xb0>)
  4038fa:	4807      	ldr	r0, [pc, #28]	; (403918 <spi_cmd_rsp+0xb4>)
  4038fc:	4c07      	ldr	r4, [pc, #28]	; (40391c <spi_cmd_rsp+0xb8>)
  4038fe:	47a0      	blx	r4
  403900:	4807      	ldr	r0, [pc, #28]	; (403920 <spi_cmd_rsp+0xbc>)
  403902:	47a0      	blx	r4
  403904:	4807      	ldr	r0, [pc, #28]	; (403924 <spi_cmd_rsp+0xc0>)
  403906:	47a0      	blx	r4
			goto _fail_;
  403908:	e7d9      	b.n	4038be <spi_cmd_rsp+0x5a>
	sint8 result = N_OK;
  40390a:	2601      	movs	r6, #1
  40390c:	e7d7      	b.n	4038be <spi_cmd_rsp+0x5a>
  40390e:	bf00      	nop
  403910:	00403845 	.word	0x00403845
  403914:	00409290 	.word	0x00409290
  403918:	00408cac 	.word	0x00408cac
  40391c:	00405d39 	.word	0x00405d39
  403920:	004096d0 	.word	0x004096d0
  403924:	00408cd8 	.word	0x00408cd8

00403928 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  403928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40392c:	b085      	sub	sp, #20
  40392e:	4683      	mov	fp, r0
  403930:	468a      	mov	sl, r1
  403932:	4617      	mov	r7, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  403934:	f04f 0900 	mov.w	r9, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403938:	4d37      	ldr	r5, [pc, #220]	; (403a18 <spi_data_read+0xf0>)
  40393a:	e027      	b.n	40398c <spi_data_read+0x64>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  40393c:	f240 1257 	movw	r2, #343	; 0x157
  403940:	4936      	ldr	r1, [pc, #216]	; (403a1c <spi_data_read+0xf4>)
  403942:	4837      	ldr	r0, [pc, #220]	; (403a20 <spi_data_read+0xf8>)
  403944:	4c37      	ldr	r4, [pc, #220]	; (403a24 <spi_data_read+0xfc>)
  403946:	47a0      	blx	r4
  403948:	4837      	ldr	r0, [pc, #220]	; (403a28 <spi_data_read+0x100>)
  40394a:	47a0      	blx	r4
  40394c:	4837      	ldr	r0, [pc, #220]	; (403a2c <spi_data_read+0x104>)
  40394e:	47a0      	blx	r4
  403950:	2300      	movs	r3, #0
  403952:	9301      	str	r3, [sp, #4]
		sz -= nbytes;

	} while (sz);

	return result;
}
  403954:	9801      	ldr	r0, [sp, #4]
  403956:	b005      	add	sp, #20
  403958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (retry <= 0) {
  40395c:	2c00      	cmp	r4, #0
  40395e:	dd2e      	ble.n	4039be <spi_data_read+0x96>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  403960:	4641      	mov	r1, r8
  403962:	eb0b 0009 	add.w	r0, fp, r9
  403966:	47a8      	blx	r5
  403968:	4604      	mov	r4, r0
  40396a:	2800      	cmp	r0, #0
  40396c:	d134      	bne.n	4039d8 <spi_data_read+0xb0>
		if(!clockless)
  40396e:	b91f      	cbnz	r7, 403978 <spi_data_read+0x50>
			if (!gu8Crc_off) {
  403970:	4b2f      	ldr	r3, [pc, #188]	; (403a30 <spi_data_read+0x108>)
  403972:	781b      	ldrb	r3, [r3, #0]
  403974:	2b00      	cmp	r3, #0
  403976:	d03a      	beq.n	4039ee <spi_data_read+0xc6>
		ix += nbytes;
  403978:	44c1      	add	r9, r8
  40397a:	fa0f f989 	sxth.w	r9, r9
		sz -= nbytes;
  40397e:	ebaa 0a08 	sub.w	sl, sl, r8
  403982:	fa1f fa8a 	uxth.w	sl, sl
	} while (sz);
  403986:	f1ba 0f00 	cmp.w	sl, #0
  40398a:	d041      	beq.n	403a10 <spi_data_read+0xe8>
  40398c:	46d0      	mov	r8, sl
  40398e:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
  403992:	bf28      	it	cs
  403994:	f44f 5800 	movcs.w	r8, #8192	; 0x2000
		retry = 10;
  403998:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  40399a:	2601      	movs	r6, #1
  40399c:	4631      	mov	r1, r6
  40399e:	f10d 000b 	add.w	r0, sp, #11
  4039a2:	47a8      	blx	r5
  4039a4:	9001      	str	r0, [sp, #4]
  4039a6:	2800      	cmp	r0, #0
  4039a8:	d1c8      	bne.n	40393c <spi_data_read+0x14>
			if (((rsp >> 4) & 0xf) == 0xf)
  4039aa:	f89d 300b 	ldrb.w	r3, [sp, #11]
  4039ae:	091b      	lsrs	r3, r3, #4
  4039b0:	2b0f      	cmp	r3, #15
  4039b2:	d0d3      	beq.n	40395c <spi_data_read+0x34>
  4039b4:	3c01      	subs	r4, #1
  4039b6:	b224      	sxth	r4, r4
		} while (retry--);
  4039b8:	f1b4 3fff 	cmp.w	r4, #4294967295
  4039bc:	d1ee      	bne.n	40399c <spi_data_read+0x74>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  4039be:	f240 1263 	movw	r2, #355	; 0x163
  4039c2:	4916      	ldr	r1, [pc, #88]	; (403a1c <spi_data_read+0xf4>)
  4039c4:	4816      	ldr	r0, [pc, #88]	; (403a20 <spi_data_read+0xf8>)
  4039c6:	4c17      	ldr	r4, [pc, #92]	; (403a24 <spi_data_read+0xfc>)
  4039c8:	47a0      	blx	r4
  4039ca:	f89d 100b 	ldrb.w	r1, [sp, #11]
  4039ce:	4819      	ldr	r0, [pc, #100]	; (403a34 <spi_data_read+0x10c>)
  4039d0:	47a0      	blx	r4
  4039d2:	4816      	ldr	r0, [pc, #88]	; (403a2c <spi_data_read+0x104>)
  4039d4:	47a0      	blx	r4
			break;
  4039d6:	e7bd      	b.n	403954 <spi_data_read+0x2c>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  4039d8:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  4039dc:	490f      	ldr	r1, [pc, #60]	; (403a1c <spi_data_read+0xf4>)
  4039de:	4810      	ldr	r0, [pc, #64]	; (403a20 <spi_data_read+0xf8>)
  4039e0:	4c10      	ldr	r4, [pc, #64]	; (403a24 <spi_data_read+0xfc>)
  4039e2:	47a0      	blx	r4
  4039e4:	4814      	ldr	r0, [pc, #80]	; (403a38 <spi_data_read+0x110>)
  4039e6:	47a0      	blx	r4
  4039e8:	4810      	ldr	r0, [pc, #64]	; (403a2c <spi_data_read+0x104>)
  4039ea:	47a0      	blx	r4
			break;
  4039ec:	e7b2      	b.n	403954 <spi_data_read+0x2c>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  4039ee:	2102      	movs	r1, #2
  4039f0:	a803      	add	r0, sp, #12
  4039f2:	47a8      	blx	r5
  4039f4:	2800      	cmp	r0, #0
  4039f6:	d0bf      	beq.n	403978 <spi_data_read+0x50>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  4039f8:	f240 1277 	movw	r2, #375	; 0x177
  4039fc:	4907      	ldr	r1, [pc, #28]	; (403a1c <spi_data_read+0xf4>)
  4039fe:	4808      	ldr	r0, [pc, #32]	; (403a20 <spi_data_read+0xf8>)
  403a00:	4d08      	ldr	r5, [pc, #32]	; (403a24 <spi_data_read+0xfc>)
  403a02:	47a8      	blx	r5
  403a04:	480d      	ldr	r0, [pc, #52]	; (403a3c <spi_data_read+0x114>)
  403a06:	47a8      	blx	r5
  403a08:	4808      	ldr	r0, [pc, #32]	; (403a2c <spi_data_read+0x104>)
  403a0a:	47a8      	blx	r5
					result = N_FAIL;
  403a0c:	9401      	str	r4, [sp, #4]
					break;
  403a0e:	e7a1      	b.n	403954 <spi_data_read+0x2c>
  403a10:	2301      	movs	r3, #1
  403a12:	9301      	str	r3, [sp, #4]
  403a14:	e79e      	b.n	403954 <spi_data_read+0x2c>
  403a16:	bf00      	nop
  403a18:	00403845 	.word	0x00403845
  403a1c:	0040929c 	.word	0x0040929c
  403a20:	00408cac 	.word	0x00408cac
  403a24:	00405d39 	.word	0x00405d39
  403a28:	00409704 	.word	0x00409704
  403a2c:	00408cd8 	.word	0x00408cd8
  403a30:	2040c368 	.word	0x2040c368
  403a34:	00409738 	.word	0x00409738
  403a38:	00409768 	.word	0x00409768
  403a3c:	0040979c 	.word	0x0040979c

00403a40 <nmi_spi_write>:
{
  403a40:	b500      	push	{lr}
  403a42:	b085      	sub	sp, #20
	spi.pu8InBuf = b;
  403a44:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  403a46:	2300      	movs	r3, #0
  403a48:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  403a4a:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  403a4e:	a901      	add	r1, sp, #4
  403a50:	2003      	movs	r0, #3
  403a52:	4b02      	ldr	r3, [pc, #8]	; (403a5c <nmi_spi_write+0x1c>)
  403a54:	4798      	blx	r3
}
  403a56:	b005      	add	sp, #20
  403a58:	f85d fb04 	ldr.w	pc, [sp], #4
  403a5c:	004020e5 	.word	0x004020e5

00403a60 <spi_cmd>:
{
  403a60:	b570      	push	{r4, r5, r6, lr}
  403a62:	b084      	sub	sp, #16
  403a64:	f89d 4020 	ldrb.w	r4, [sp, #32]
	bc[0] = cmd;
  403a68:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  403a6c:	38c1      	subs	r0, #193	; 0xc1
  403a6e:	280e      	cmp	r0, #14
  403a70:	f200 80a2 	bhi.w	403bb8 <spi_cmd+0x158>
  403a74:	e8df f000 	tbb	[pc, r0]
  403a78:	19664545 	.word	0x19664545
  403a7c:	5454332a 	.word	0x5454332a
  403a80:	a0a0087f 	.word	0xa0a0087f
  403a84:	a0a0      	.short	0xa0a0
  403a86:	3c          	.byte	0x3c
  403a87:	00          	.byte	0x00
		bc[1] = (uint8)(adr >> 16);
  403a88:	0c0b      	lsrs	r3, r1, #16
  403a8a:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403a8e:	0a0b      	lsrs	r3, r1, #8
  403a90:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  403a94:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  403a98:	2105      	movs	r1, #5
		if (!gu8Crc_off)
  403a9a:	4b55      	ldr	r3, [pc, #340]	; (403bf0 <spi_cmd+0x190>)
  403a9c:	781b      	ldrb	r3, [r3, #0]
  403a9e:	2b00      	cmp	r3, #0
  403aa0:	f000 808c 	beq.w	403bbc <spi_cmd+0x15c>
			len-=1;
  403aa4:	3901      	subs	r1, #1
  403aa6:	b2c9      	uxtb	r1, r1
  403aa8:	e09a      	b.n	403be0 <spi_cmd+0x180>
		bc[1] = (uint8)(adr >> 8);
  403aaa:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  403aae:	b944      	cbnz	r4, 403ac2 <spi_cmd+0x62>
		bc[1] = (uint8)(adr >> 8);
  403ab0:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  403ab4:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  403ab8:	2300      	movs	r3, #0
  403aba:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403abe:	2105      	movs	r1, #5
		break;
  403ac0:	e7eb      	b.n	403a9a <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  403ac2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403ac6:	f88d 3005 	strb.w	r3, [sp, #5]
  403aca:	e7f3      	b.n	403ab4 <spi_cmd+0x54>
		bc[1] = 0x00;
  403acc:	2300      	movs	r3, #0
  403ace:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  403ad2:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  403ad6:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403ada:	2105      	movs	r1, #5
		break;
  403adc:	e7dd      	b.n	403a9a <spi_cmd+0x3a>
		bc[1] = 0x00;
  403ade:	2300      	movs	r3, #0
  403ae0:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  403ae4:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  403ae8:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403aec:	2105      	movs	r1, #5
		break;
  403aee:	e7d4      	b.n	403a9a <spi_cmd+0x3a>
		bc[1] = 0xff;
  403af0:	23ff      	movs	r3, #255	; 0xff
  403af2:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  403af6:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  403afa:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403afe:	2105      	movs	r1, #5
		break;
  403b00:	e7cb      	b.n	403a9a <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  403b02:	0c0a      	lsrs	r2, r1, #16
  403b04:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403b08:	0a0a      	lsrs	r2, r1, #8
  403b0a:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  403b0e:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  403b12:	0a1a      	lsrs	r2, r3, #8
  403b14:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  403b18:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  403b1c:	2107      	movs	r1, #7
		break;
  403b1e:	e7bc      	b.n	403a9a <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  403b20:	0c0a      	lsrs	r2, r1, #16
  403b22:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403b26:	0a0a      	lsrs	r2, r1, #8
  403b28:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  403b2c:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  403b30:	0c1a      	lsrs	r2, r3, #16
  403b32:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  403b36:	0a1a      	lsrs	r2, r3, #8
  403b38:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  403b3c:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  403b40:	2108      	movs	r1, #8
		break;
  403b42:	e7aa      	b.n	403a9a <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 8);
  403b44:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  403b48:	b984      	cbnz	r4, 403b6c <spi_cmd+0x10c>
		bc[1] = (uint8)(adr >> 8);
  403b4a:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  403b4e:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  403b52:	0e13      	lsrs	r3, r2, #24
  403b54:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  403b58:	0c13      	lsrs	r3, r2, #16
  403b5a:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  403b5e:	0a13      	lsrs	r3, r2, #8
  403b60:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  403b64:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  403b68:	2108      	movs	r1, #8
		break;
  403b6a:	e796      	b.n	403a9a <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  403b6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403b70:	f88d 3005 	strb.w	r3, [sp, #5]
  403b74:	e7eb      	b.n	403b4e <spi_cmd+0xee>
		bc[1] = (uint8)(adr >> 16);
  403b76:	0c0b      	lsrs	r3, r1, #16
  403b78:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403b7c:	0a0b      	lsrs	r3, r1, #8
  403b7e:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  403b82:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  403b86:	0e13      	lsrs	r3, r2, #24
  403b88:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  403b8c:	0c13      	lsrs	r3, r2, #16
  403b8e:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  403b92:	0a13      	lsrs	r3, r2, #8
  403b94:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  403b98:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  403b9c:	2109      	movs	r1, #9
		break;
  403b9e:	e77c      	b.n	403a9a <spi_cmd+0x3a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  403ba0:	f44f 7284 	mov.w	r2, #264	; 0x108
  403ba4:	4913      	ldr	r1, [pc, #76]	; (403bf4 <spi_cmd+0x194>)
  403ba6:	4814      	ldr	r0, [pc, #80]	; (403bf8 <spi_cmd+0x198>)
  403ba8:	4c14      	ldr	r4, [pc, #80]	; (403bfc <spi_cmd+0x19c>)
  403baa:	47a0      	blx	r4
  403bac:	4814      	ldr	r0, [pc, #80]	; (403c00 <spi_cmd+0x1a0>)
  403bae:	47a0      	blx	r4
  403bb0:	4814      	ldr	r0, [pc, #80]	; (403c04 <spi_cmd+0x1a4>)
  403bb2:	47a0      	blx	r4
			result = N_FAIL;
  403bb4:	2000      	movs	r0, #0
  403bb6:	e019      	b.n	403bec <spi_cmd+0x18c>
	switch (cmd) {
  403bb8:	2000      	movs	r0, #0
  403bba:	e017      	b.n	403bec <spi_cmd+0x18c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  403bbc:	1e4e      	subs	r6, r1, #1
  403bbe:	ab01      	add	r3, sp, #4
  403bc0:	199d      	adds	r5, r3, r6
  403bc2:	207f      	movs	r0, #127	; 0x7f
  403bc4:	461a      	mov	r2, r3
	return crc7_syndrome_table[(crc << 1) ^ data];
  403bc6:	4c10      	ldr	r4, [pc, #64]	; (403c08 <spi_cmd+0x1a8>)
  403bc8:	f812 3b01 	ldrb.w	r3, [r2], #1
  403bcc:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  403bd0:	5ce0      	ldrb	r0, [r4, r3]
	while (len--)
  403bd2:	4295      	cmp	r5, r2
  403bd4:	d1f8      	bne.n	403bc8 <spi_cmd+0x168>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  403bd6:	ab04      	add	r3, sp, #16
  403bd8:	441e      	add	r6, r3
  403bda:	0043      	lsls	r3, r0, #1
  403bdc:	f806 3c0c 	strb.w	r3, [r6, #-12]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  403be0:	a801      	add	r0, sp, #4
  403be2:	4b0a      	ldr	r3, [pc, #40]	; (403c0c <spi_cmd+0x1ac>)
  403be4:	4798      	blx	r3
  403be6:	2800      	cmp	r0, #0
  403be8:	d1da      	bne.n	403ba0 <spi_cmd+0x140>
  403bea:	2001      	movs	r0, #1
}
  403bec:	b004      	add	sp, #16
  403bee:	bd70      	pop	{r4, r5, r6, pc}
  403bf0:	2040c368 	.word	0x2040c368
  403bf4:	00409288 	.word	0x00409288
  403bf8:	00408cac 	.word	0x00408cac
  403bfc:	00405d39 	.word	0x00405d39
  403c00:	004096a4 	.word	0x004096a4
  403c04:	00408cd8 	.word	0x00408cd8
  403c08:	00409304 	.word	0x00409304
  403c0c:	00403a41 	.word	0x00403a41

00403c10 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  403c10:	b570      	push	{r4, r5, r6, lr}
  403c12:	b082      	sub	sp, #8
  403c14:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  403c16:	2831      	cmp	r0, #49	; 0x31
  403c18:	bf35      	itete	cc
  403c1a:	2301      	movcc	r3, #1
  403c1c:	2300      	movcs	r3, #0
  403c1e:	25c3      	movcc	r5, #195	; 0xc3
  403c20:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  403c22:	9300      	str	r3, [sp, #0]
  403c24:	2304      	movs	r3, #4
  403c26:	460a      	mov	r2, r1
  403c28:	4601      	mov	r1, r0
  403c2a:	4628      	mov	r0, r5
  403c2c:	4e15      	ldr	r6, [pc, #84]	; (403c84 <spi_write_reg+0x74>)
  403c2e:	47b0      	blx	r6
	if (result != N_OK) {
  403c30:	2801      	cmp	r0, #1
  403c32:	d00d      	beq.n	403c50 <spi_write_reg+0x40>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  403c34:	f240 12eb 	movw	r2, #491	; 0x1eb
  403c38:	4913      	ldr	r1, [pc, #76]	; (403c88 <spi_write_reg+0x78>)
  403c3a:	4814      	ldr	r0, [pc, #80]	; (403c8c <spi_write_reg+0x7c>)
  403c3c:	4d14      	ldr	r5, [pc, #80]	; (403c90 <spi_write_reg+0x80>)
  403c3e:	47a8      	blx	r5
  403c40:	4621      	mov	r1, r4
  403c42:	4814      	ldr	r0, [pc, #80]	; (403c94 <spi_write_reg+0x84>)
  403c44:	47a8      	blx	r5
  403c46:	4814      	ldr	r0, [pc, #80]	; (403c98 <spi_write_reg+0x88>)
  403c48:	47a8      	blx	r5
		return N_FAIL;
  403c4a:	2000      	movs	r0, #0
	}

	return result;

#endif
}
  403c4c:	b002      	add	sp, #8
  403c4e:	bd70      	pop	{r4, r5, r6, pc}
	result = spi_cmd_rsp(cmd);
  403c50:	4628      	mov	r0, r5
  403c52:	4b12      	ldr	r3, [pc, #72]	; (403c9c <spi_write_reg+0x8c>)
  403c54:	4798      	blx	r3
	if (result != N_OK) {
  403c56:	2801      	cmp	r0, #1
  403c58:	d0f8      	beq.n	403c4c <spi_write_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  403c5a:	f240 12f1 	movw	r2, #497	; 0x1f1
  403c5e:	490a      	ldr	r1, [pc, #40]	; (403c88 <spi_write_reg+0x78>)
  403c60:	480a      	ldr	r0, [pc, #40]	; (403c8c <spi_write_reg+0x7c>)
  403c62:	4d0b      	ldr	r5, [pc, #44]	; (403c90 <spi_write_reg+0x80>)
  403c64:	47a8      	blx	r5
  403c66:	4621      	mov	r1, r4
  403c68:	480d      	ldr	r0, [pc, #52]	; (403ca0 <spi_write_reg+0x90>)
  403c6a:	47a8      	blx	r5
  403c6c:	480a      	ldr	r0, [pc, #40]	; (403c98 <spi_write_reg+0x88>)
  403c6e:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403c70:	2400      	movs	r4, #0
  403c72:	9400      	str	r4, [sp, #0]
  403c74:	4623      	mov	r3, r4
  403c76:	4622      	mov	r2, r4
  403c78:	4621      	mov	r1, r4
  403c7a:	20cf      	movs	r0, #207	; 0xcf
  403c7c:	4d01      	ldr	r5, [pc, #4]	; (403c84 <spi_write_reg+0x74>)
  403c7e:	47a8      	blx	r5
		return N_FAIL;
  403c80:	4620      	mov	r0, r4
  403c82:	e7e3      	b.n	403c4c <spi_write_reg+0x3c>
  403c84:	00403a61 	.word	0x00403a61
  403c88:	004092bc 	.word	0x004092bc
  403c8c:	00408cac 	.word	0x00408cac
  403c90:	00405d39 	.word	0x00405d39
  403c94:	00409854 	.word	0x00409854
  403c98:	00408cd8 	.word	0x00408cd8
  403c9c:	00403865 	.word	0x00403865
  403ca0:	00409880 	.word	0x00409880

00403ca4 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  403ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403ca8:	b084      	sub	sp, #16
  403caa:	4604      	mov	r4, r0
  403cac:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  403cae:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  403cb2:	bf35      	itete	cc
  403cb4:	2601      	movcc	r6, #1
  403cb6:	2600      	movcs	r6, #0
  403cb8:	25c4      	movcc	r5, #196	; 0xc4
  403cba:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  403cbc:	9600      	str	r6, [sp, #0]
  403cbe:	2304      	movs	r3, #4
  403cc0:	2200      	movs	r2, #0
  403cc2:	4601      	mov	r1, r0
  403cc4:	4628      	mov	r0, r5
  403cc6:	4f2c      	ldr	r7, [pc, #176]	; (403d78 <spi_read_reg+0xd4>)
  403cc8:	47b8      	blx	r7
	if (result != N_OK) {
  403cca:	2801      	cmp	r0, #1
  403ccc:	d00e      	beq.n	403cec <spi_read_reg+0x48>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  403cce:	f240 2245 	movw	r2, #581	; 0x245
  403cd2:	492a      	ldr	r1, [pc, #168]	; (403d7c <spi_read_reg+0xd8>)
  403cd4:	482a      	ldr	r0, [pc, #168]	; (403d80 <spi_read_reg+0xdc>)
  403cd6:	4d2b      	ldr	r5, [pc, #172]	; (403d84 <spi_read_reg+0xe0>)
  403cd8:	47a8      	blx	r5
  403cda:	4621      	mov	r1, r4
  403cdc:	482a      	ldr	r0, [pc, #168]	; (403d88 <spi_read_reg+0xe4>)
  403cde:	47a8      	blx	r5
  403ce0:	482a      	ldr	r0, [pc, #168]	; (403d8c <spi_read_reg+0xe8>)
  403ce2:	47a8      	blx	r5
		return N_FAIL;
  403ce4:	2000      	movs	r0, #0
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
}
  403ce6:	b004      	add	sp, #16
  403ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	result = spi_cmd_rsp(cmd);
  403cec:	4628      	mov	r0, r5
  403cee:	4b28      	ldr	r3, [pc, #160]	; (403d90 <spi_read_reg+0xec>)
  403cf0:	4798      	blx	r3
	if (result != N_OK) {
  403cf2:	2801      	cmp	r0, #1
  403cf4:	d014      	beq.n	403d20 <spi_read_reg+0x7c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  403cf6:	f240 224b 	movw	r2, #587	; 0x24b
  403cfa:	4920      	ldr	r1, [pc, #128]	; (403d7c <spi_read_reg+0xd8>)
  403cfc:	4820      	ldr	r0, [pc, #128]	; (403d80 <spi_read_reg+0xdc>)
  403cfe:	4d21      	ldr	r5, [pc, #132]	; (403d84 <spi_read_reg+0xe0>)
  403d00:	47a8      	blx	r5
  403d02:	4621      	mov	r1, r4
  403d04:	4823      	ldr	r0, [pc, #140]	; (403d94 <spi_read_reg+0xf0>)
  403d06:	47a8      	blx	r5
  403d08:	4820      	ldr	r0, [pc, #128]	; (403d8c <spi_read_reg+0xe8>)
  403d0a:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403d0c:	2400      	movs	r4, #0
  403d0e:	9400      	str	r4, [sp, #0]
  403d10:	4623      	mov	r3, r4
  403d12:	4622      	mov	r2, r4
  403d14:	4621      	mov	r1, r4
  403d16:	20cf      	movs	r0, #207	; 0xcf
  403d18:	4d17      	ldr	r5, [pc, #92]	; (403d78 <spi_read_reg+0xd4>)
  403d1a:	47a8      	blx	r5
		return N_FAIL;
  403d1c:	4620      	mov	r0, r4
  403d1e:	e7e2      	b.n	403ce6 <spi_read_reg+0x42>
	result = spi_data_read(&tmp[0], 4, clockless);
  403d20:	4632      	mov	r2, r6
  403d22:	2104      	movs	r1, #4
  403d24:	a803      	add	r0, sp, #12
  403d26:	4b1c      	ldr	r3, [pc, #112]	; (403d98 <spi_read_reg+0xf4>)
  403d28:	4798      	blx	r3
	if (result != N_OK) {
  403d2a:	2801      	cmp	r0, #1
  403d2c:	d110      	bne.n	403d50 <spi_read_reg+0xac>
		((uint32)tmp[1] << 8) |
  403d2e:	f89d 200d 	ldrb.w	r2, [sp, #13]
		((uint32)tmp[2] << 16) |
  403d32:	f89d 300e 	ldrb.w	r3, [sp, #14]
  403d36:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
  403d38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	*u32data = tmp[0] |
  403d3c:	f89d 200c 	ldrb.w	r2, [sp, #12]
		((uint32)tmp[1] << 8) |
  403d40:	4313      	orrs	r3, r2
		((uint32)tmp[3] << 24);
  403d42:	f89d 200f 	ldrb.w	r2, [sp, #15]
		((uint32)tmp[2] << 16) |
  403d46:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	*u32data = tmp[0] |
  403d4a:	f8c8 3000 	str.w	r3, [r8]
	return N_OK;
  403d4e:	e7ca      	b.n	403ce6 <spi_read_reg+0x42>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  403d50:	f240 2253 	movw	r2, #595	; 0x253
  403d54:	4909      	ldr	r1, [pc, #36]	; (403d7c <spi_read_reg+0xd8>)
  403d56:	480a      	ldr	r0, [pc, #40]	; (403d80 <spi_read_reg+0xdc>)
  403d58:	4c0a      	ldr	r4, [pc, #40]	; (403d84 <spi_read_reg+0xe0>)
  403d5a:	47a0      	blx	r4
  403d5c:	480f      	ldr	r0, [pc, #60]	; (403d9c <spi_read_reg+0xf8>)
  403d5e:	47a0      	blx	r4
  403d60:	480a      	ldr	r0, [pc, #40]	; (403d8c <spi_read_reg+0xe8>)
  403d62:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403d64:	2400      	movs	r4, #0
  403d66:	9400      	str	r4, [sp, #0]
  403d68:	4623      	mov	r3, r4
  403d6a:	4622      	mov	r2, r4
  403d6c:	4621      	mov	r1, r4
  403d6e:	20cf      	movs	r0, #207	; 0xcf
  403d70:	4d01      	ldr	r5, [pc, #4]	; (403d78 <spi_read_reg+0xd4>)
  403d72:	47a8      	blx	r5
		return N_FAIL;
  403d74:	4620      	mov	r0, r4
  403d76:	e7b6      	b.n	403ce6 <spi_read_reg+0x42>
  403d78:	00403a61 	.word	0x00403a61
  403d7c:	004092dc 	.word	0x004092dc
  403d80:	00408cac 	.word	0x00408cac
  403d84:	00405d39 	.word	0x00405d39
  403d88:	004097d4 	.word	0x004097d4
  403d8c:	00408cd8 	.word	0x00408cd8
  403d90:	00403865 	.word	0x00403865
  403d94:	00409800 	.word	0x00409800
  403d98:	00403929 	.word	0x00403929
  403d9c:	00409834 	.word	0x00409834

00403da0 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  403da0:	2000      	movs	r0, #0
  403da2:	4b01      	ldr	r3, [pc, #4]	; (403da8 <nm_spi_deinit+0x8>)
  403da4:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  403da6:	4770      	bx	lr
  403da8:	2040c368 	.word	0x2040c368

00403dac <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  403dac:	b500      	push	{lr}
  403dae:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  403db0:	a901      	add	r1, sp, #4
  403db2:	4b03      	ldr	r3, [pc, #12]	; (403dc0 <nm_spi_read_reg+0x14>)
  403db4:	4798      	blx	r3

	return u32Val;
}
  403db6:	9801      	ldr	r0, [sp, #4]
  403db8:	b003      	add	sp, #12
  403dba:	f85d fb04 	ldr.w	pc, [sp], #4
  403dbe:	bf00      	nop
  403dc0:	00403ca5 	.word	0x00403ca5

00403dc4 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  403dc4:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  403dc6:	4b04      	ldr	r3, [pc, #16]	; (403dd8 <nm_spi_read_reg_with_ret+0x14>)
  403dc8:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  403dca:	2801      	cmp	r0, #1

	return s8Ret;
}
  403dcc:	bf0c      	ite	eq
  403dce:	2000      	moveq	r0, #0
  403dd0:	f06f 0005 	mvnne.w	r0, #5
  403dd4:	bd08      	pop	{r3, pc}
  403dd6:	bf00      	nop
  403dd8:	00403ca5 	.word	0x00403ca5

00403ddc <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  403ddc:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  403dde:	4b04      	ldr	r3, [pc, #16]	; (403df0 <nm_spi_write_reg+0x14>)
  403de0:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  403de2:	2801      	cmp	r0, #1

	return s8Ret;
}
  403de4:	bf0c      	ite	eq
  403de6:	2000      	moveq	r0, #0
  403de8:	f06f 0005 	mvnne.w	r0, #5
  403dec:	bd08      	pop	{r3, pc}
  403dee:	bf00      	nop
  403df0:	00403c11 	.word	0x00403c11

00403df4 <nm_spi_init>:
{
  403df4:	b530      	push	{r4, r5, lr}
  403df6:	b083      	sub	sp, #12
	uint32 reg =0;
  403df8:	2300      	movs	r3, #0
  403dfa:	a902      	add	r1, sp, #8
  403dfc:	f841 3d08 	str.w	r3, [r1, #-8]!
	gu8Crc_off = 0;
  403e00:	4a34      	ldr	r2, [pc, #208]	; (403ed4 <nm_spi_init+0xe0>)
  403e02:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  403e04:	f64e 0024 	movw	r0, #59428	; 0xe824
  403e08:	4b33      	ldr	r3, [pc, #204]	; (403ed8 <nm_spi_init+0xe4>)
  403e0a:	4798      	blx	r3
  403e0c:	b348      	cbz	r0, 403e62 <nm_spi_init+0x6e>
	if(gu8Crc_off == 0)
  403e0e:	4b31      	ldr	r3, [pc, #196]	; (403ed4 <nm_spi_init+0xe0>)
  403e10:	781b      	ldrb	r3, [r3, #0]
  403e12:	b97b      	cbnz	r3, 403e34 <nm_spi_init+0x40>
		reg &= ~0x70;
  403e14:	9900      	ldr	r1, [sp, #0]
  403e16:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
		reg |= (0x5 << 4);
  403e1a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  403e1e:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  403e20:	f64e 0024 	movw	r0, #59428	; 0xe824
  403e24:	4b2d      	ldr	r3, [pc, #180]	; (403edc <nm_spi_init+0xe8>)
  403e26:	4798      	blx	r3
  403e28:	4604      	mov	r4, r0
  403e2a:	2800      	cmp	r0, #0
  403e2c:	d039      	beq.n	403ea2 <nm_spi_init+0xae>
		gu8Crc_off = 1;
  403e2e:	2201      	movs	r2, #1
  403e30:	4b28      	ldr	r3, [pc, #160]	; (403ed4 <nm_spi_init+0xe0>)
  403e32:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
  403e34:	a901      	add	r1, sp, #4
  403e36:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  403e3a:	4b27      	ldr	r3, [pc, #156]	; (403ed8 <nm_spi_init+0xe4>)
  403e3c:	4798      	blx	r3
  403e3e:	2800      	cmp	r0, #0
  403e40:	d03a      	beq.n	403eb8 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  403e42:	f64e 0024 	movw	r0, #59428	; 0xe824
  403e46:	4b26      	ldr	r3, [pc, #152]	; (403ee0 <nm_spi_init+0xec>)
  403e48:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  403e4a:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  403e4e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  403e52:	f64e 0024 	movw	r0, #59428	; 0xe824
  403e56:	4b23      	ldr	r3, [pc, #140]	; (403ee4 <nm_spi_init+0xf0>)
  403e58:	4798      	blx	r3
	return M2M_SUCCESS;
  403e5a:	2400      	movs	r4, #0
}
  403e5c:	4620      	mov	r0, r4
  403e5e:	b003      	add	sp, #12
  403e60:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
  403e62:	2201      	movs	r2, #1
  403e64:	4b1b      	ldr	r3, [pc, #108]	; (403ed4 <nm_spi_init+0xe0>)
  403e66:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  403e68:	f240 22c5 	movw	r2, #709	; 0x2c5
  403e6c:	491e      	ldr	r1, [pc, #120]	; (403ee8 <nm_spi_init+0xf4>)
  403e6e:	481f      	ldr	r0, [pc, #124]	; (403eec <nm_spi_init+0xf8>)
  403e70:	4c1f      	ldr	r4, [pc, #124]	; (403ef0 <nm_spi_init+0xfc>)
  403e72:	47a0      	blx	r4
  403e74:	481f      	ldr	r0, [pc, #124]	; (403ef4 <nm_spi_init+0x100>)
  403e76:	47a0      	blx	r4
  403e78:	481f      	ldr	r0, [pc, #124]	; (403ef8 <nm_spi_init+0x104>)
  403e7a:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  403e7c:	4669      	mov	r1, sp
  403e7e:	f64e 0024 	movw	r0, #59428	; 0xe824
  403e82:	4b15      	ldr	r3, [pc, #84]	; (403ed8 <nm_spi_init+0xe4>)
  403e84:	4798      	blx	r3
  403e86:	4604      	mov	r4, r0
  403e88:	2800      	cmp	r0, #0
  403e8a:	d1c0      	bne.n	403e0e <nm_spi_init+0x1a>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  403e8c:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  403e90:	4915      	ldr	r1, [pc, #84]	; (403ee8 <nm_spi_init+0xf4>)
  403e92:	4816      	ldr	r0, [pc, #88]	; (403eec <nm_spi_init+0xf8>)
  403e94:	4d16      	ldr	r5, [pc, #88]	; (403ef0 <nm_spi_init+0xfc>)
  403e96:	47a8      	blx	r5
  403e98:	4818      	ldr	r0, [pc, #96]	; (403efc <nm_spi_init+0x108>)
  403e9a:	47a8      	blx	r5
  403e9c:	4816      	ldr	r0, [pc, #88]	; (403ef8 <nm_spi_init+0x104>)
  403e9e:	47a8      	blx	r5
			return 0;
  403ea0:	e7dc      	b.n	403e5c <nm_spi_init+0x68>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  403ea2:	f240 22d2 	movw	r2, #722	; 0x2d2
  403ea6:	4910      	ldr	r1, [pc, #64]	; (403ee8 <nm_spi_init+0xf4>)
  403ea8:	4810      	ldr	r0, [pc, #64]	; (403eec <nm_spi_init+0xf8>)
  403eaa:	4d11      	ldr	r5, [pc, #68]	; (403ef0 <nm_spi_init+0xfc>)
  403eac:	47a8      	blx	r5
  403eae:	4814      	ldr	r0, [pc, #80]	; (403f00 <nm_spi_init+0x10c>)
  403eb0:	47a8      	blx	r5
  403eb2:	4811      	ldr	r0, [pc, #68]	; (403ef8 <nm_spi_init+0x104>)
  403eb4:	47a8      	blx	r5
			return 0;
  403eb6:	e7d1      	b.n	403e5c <nm_spi_init+0x68>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  403eb8:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  403ebc:	490a      	ldr	r1, [pc, #40]	; (403ee8 <nm_spi_init+0xf4>)
  403ebe:	480b      	ldr	r0, [pc, #44]	; (403eec <nm_spi_init+0xf8>)
  403ec0:	4c0b      	ldr	r4, [pc, #44]	; (403ef0 <nm_spi_init+0xfc>)
  403ec2:	47a0      	blx	r4
  403ec4:	480f      	ldr	r0, [pc, #60]	; (403f04 <nm_spi_init+0x110>)
  403ec6:	47a0      	blx	r4
  403ec8:	480b      	ldr	r0, [pc, #44]	; (403ef8 <nm_spi_init+0x104>)
  403eca:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  403ecc:	f06f 0405 	mvn.w	r4, #5
  403ed0:	e7c4      	b.n	403e5c <nm_spi_init+0x68>
  403ed2:	bf00      	nop
  403ed4:	2040c368 	.word	0x2040c368
  403ed8:	00403ca5 	.word	0x00403ca5
  403edc:	00403c11 	.word	0x00403c11
  403ee0:	00403dad 	.word	0x00403dad
  403ee4:	00403ddd 	.word	0x00403ddd
  403ee8:	004092f8 	.word	0x004092f8
  403eec:	00408cac 	.word	0x00408cac
  403ef0:	00405d39 	.word	0x00405d39
  403ef4:	00409404 	.word	0x00409404
  403ef8:	00408cd8 	.word	0x00408cd8
  403efc:	00409454 	.word	0x00409454
  403f00:	00409484 	.word	0x00409484
  403f04:	004094b8 	.word	0x004094b8

00403f08 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  403f08:	b5f0      	push	{r4, r5, r6, r7, lr}
  403f0a:	b083      	sub	sp, #12
  403f0c:	4604      	mov	r4, r0
  403f0e:	460f      	mov	r7, r1
  403f10:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  403f12:	2200      	movs	r2, #0
  403f14:	9200      	str	r2, [sp, #0]
  403f16:	462b      	mov	r3, r5
  403f18:	4601      	mov	r1, r0
  403f1a:	20c8      	movs	r0, #200	; 0xc8
  403f1c:	4e22      	ldr	r6, [pc, #136]	; (403fa8 <nm_spi_read_block+0xa0>)
  403f1e:	47b0      	blx	r6
	if (result != N_OK) {
  403f20:	2801      	cmp	r0, #1
  403f22:	d00e      	beq.n	403f42 <nm_spi_read_block+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  403f24:	f44f 721d 	mov.w	r2, #628	; 0x274
  403f28:	4920      	ldr	r1, [pc, #128]	; (403fac <nm_spi_read_block+0xa4>)
  403f2a:	4821      	ldr	r0, [pc, #132]	; (403fb0 <nm_spi_read_block+0xa8>)
  403f2c:	4d21      	ldr	r5, [pc, #132]	; (403fb4 <nm_spi_read_block+0xac>)
  403f2e:	47a8      	blx	r5
  403f30:	4621      	mov	r1, r4
  403f32:	4821      	ldr	r0, [pc, #132]	; (403fb8 <nm_spi_read_block+0xb0>)
  403f34:	47a8      	blx	r5
  403f36:	4821      	ldr	r0, [pc, #132]	; (403fbc <nm_spi_read_block+0xb4>)
  403f38:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  403f3a:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  403f3e:	b003      	add	sp, #12
  403f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = spi_cmd_rsp(cmd);
  403f42:	20c8      	movs	r0, #200	; 0xc8
  403f44:	4b1e      	ldr	r3, [pc, #120]	; (403fc0 <nm_spi_read_block+0xb8>)
  403f46:	4798      	blx	r3
	if (result != N_OK) {
  403f48:	2801      	cmp	r0, #1
  403f4a:	d012      	beq.n	403f72 <nm_spi_read_block+0x6a>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  403f4c:	f240 227a 	movw	r2, #634	; 0x27a
  403f50:	4916      	ldr	r1, [pc, #88]	; (403fac <nm_spi_read_block+0xa4>)
  403f52:	4817      	ldr	r0, [pc, #92]	; (403fb0 <nm_spi_read_block+0xa8>)
  403f54:	4d17      	ldr	r5, [pc, #92]	; (403fb4 <nm_spi_read_block+0xac>)
  403f56:	47a8      	blx	r5
  403f58:	4621      	mov	r1, r4
  403f5a:	481a      	ldr	r0, [pc, #104]	; (403fc4 <nm_spi_read_block+0xbc>)
  403f5c:	47a8      	blx	r5
  403f5e:	4817      	ldr	r0, [pc, #92]	; (403fbc <nm_spi_read_block+0xb4>)
  403f60:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403f62:	2100      	movs	r1, #0
  403f64:	9100      	str	r1, [sp, #0]
  403f66:	460b      	mov	r3, r1
  403f68:	460a      	mov	r2, r1
  403f6a:	20cf      	movs	r0, #207	; 0xcf
  403f6c:	4c0e      	ldr	r4, [pc, #56]	; (403fa8 <nm_spi_read_block+0xa0>)
  403f6e:	47a0      	blx	r4
  403f70:	e7e3      	b.n	403f3a <nm_spi_read_block+0x32>
	result = spi_data_read(buf, size,0);
  403f72:	2200      	movs	r2, #0
  403f74:	4629      	mov	r1, r5
  403f76:	4638      	mov	r0, r7
  403f78:	4b13      	ldr	r3, [pc, #76]	; (403fc8 <nm_spi_read_block+0xc0>)
  403f7a:	4798      	blx	r3
	if (result != N_OK) {
  403f7c:	2801      	cmp	r0, #1
  403f7e:	d011      	beq.n	403fa4 <nm_spi_read_block+0x9c>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  403f80:	f44f 7221 	mov.w	r2, #644	; 0x284
  403f84:	4909      	ldr	r1, [pc, #36]	; (403fac <nm_spi_read_block+0xa4>)
  403f86:	480a      	ldr	r0, [pc, #40]	; (403fb0 <nm_spi_read_block+0xa8>)
  403f88:	4c0a      	ldr	r4, [pc, #40]	; (403fb4 <nm_spi_read_block+0xac>)
  403f8a:	47a0      	blx	r4
  403f8c:	480f      	ldr	r0, [pc, #60]	; (403fcc <nm_spi_read_block+0xc4>)
  403f8e:	47a0      	blx	r4
  403f90:	480a      	ldr	r0, [pc, #40]	; (403fbc <nm_spi_read_block+0xb4>)
  403f92:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403f94:	2100      	movs	r1, #0
  403f96:	9100      	str	r1, [sp, #0]
  403f98:	460b      	mov	r3, r1
  403f9a:	460a      	mov	r2, r1
  403f9c:	20cf      	movs	r0, #207	; 0xcf
  403f9e:	4c02      	ldr	r4, [pc, #8]	; (403fa8 <nm_spi_read_block+0xa0>)
  403fa0:	47a0      	blx	r4
  403fa2:	e7ca      	b.n	403f3a <nm_spi_read_block+0x32>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  403fa4:	2000      	movs	r0, #0
  403fa6:	e7ca      	b.n	403f3e <nm_spi_read_block+0x36>
  403fa8:	00403a61 	.word	0x00403a61
  403fac:	004092ec 	.word	0x004092ec
  403fb0:	00408cac 	.word	0x00408cac
  403fb4:	00405d39 	.word	0x00405d39
  403fb8:	004094e0 	.word	0x004094e0
  403fbc:	00408cd8 	.word	0x00408cd8
  403fc0:	00403865 	.word	0x00403865
  403fc4:	00409510 	.word	0x00409510
  403fc8:	00403929 	.word	0x00403929
  403fcc:	00409548 	.word	0x00409548

00403fd0 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  403fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403fd4:	b085      	sub	sp, #20
  403fd6:	4604      	mov	r4, r0
  403fd8:	4688      	mov	r8, r1
  403fda:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  403fdc:	2200      	movs	r2, #0
  403fde:	9200      	str	r2, [sp, #0]
  403fe0:	462b      	mov	r3, r5
  403fe2:	4601      	mov	r1, r0
  403fe4:	20c7      	movs	r0, #199	; 0xc7
  403fe6:	4e4d      	ldr	r6, [pc, #308]	; (40411c <nm_spi_write_block+0x14c>)
  403fe8:	47b0      	blx	r6
	if (result != N_OK) {
  403fea:	2801      	cmp	r0, #1
  403fec:	d00f      	beq.n	40400e <nm_spi_write_block+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  403fee:	f240 220f 	movw	r2, #527	; 0x20f
  403ff2:	494b      	ldr	r1, [pc, #300]	; (404120 <nm_spi_write_block+0x150>)
  403ff4:	484b      	ldr	r0, [pc, #300]	; (404124 <nm_spi_write_block+0x154>)
  403ff6:	4d4c      	ldr	r5, [pc, #304]	; (404128 <nm_spi_write_block+0x158>)
  403ff8:	47a8      	blx	r5
  403ffa:	4621      	mov	r1, r4
  403ffc:	484b      	ldr	r0, [pc, #300]	; (40412c <nm_spi_write_block+0x15c>)
  403ffe:	47a8      	blx	r5
  404000:	484b      	ldr	r0, [pc, #300]	; (404130 <nm_spi_write_block+0x160>)
  404002:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  404004:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  404008:	b005      	add	sp, #20
  40400a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	result = spi_cmd_rsp(cmd);
  40400e:	20c7      	movs	r0, #199	; 0xc7
  404010:	4b48      	ldr	r3, [pc, #288]	; (404134 <nm_spi_write_block+0x164>)
  404012:	4798      	blx	r3
	if (result != N_OK) {
  404014:	2801      	cmp	r0, #1
  404016:	d012      	beq.n	40403e <nm_spi_write_block+0x6e>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  404018:	f240 2215 	movw	r2, #533	; 0x215
  40401c:	4940      	ldr	r1, [pc, #256]	; (404120 <nm_spi_write_block+0x150>)
  40401e:	4841      	ldr	r0, [pc, #260]	; (404124 <nm_spi_write_block+0x154>)
  404020:	4d41      	ldr	r5, [pc, #260]	; (404128 <nm_spi_write_block+0x158>)
  404022:	47a8      	blx	r5
  404024:	4621      	mov	r1, r4
  404026:	4844      	ldr	r0, [pc, #272]	; (404138 <nm_spi_write_block+0x168>)
  404028:	47a8      	blx	r5
  40402a:	4841      	ldr	r0, [pc, #260]	; (404130 <nm_spi_write_block+0x160>)
  40402c:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40402e:	2100      	movs	r1, #0
  404030:	9100      	str	r1, [sp, #0]
  404032:	460b      	mov	r3, r1
  404034:	460a      	mov	r2, r1
  404036:	20cf      	movs	r0, #207	; 0xcf
  404038:	4c38      	ldr	r4, [pc, #224]	; (40411c <nm_spi_write_block+0x14c>)
  40403a:	47a0      	blx	r4
  40403c:	e7e2      	b.n	404004 <nm_spi_write_block+0x34>
	uint8 cmd, order, crc[2] = {0};
  40403e:	2400      	movs	r4, #0
  404040:	f8ad 400c 	strh.w	r4, [sp, #12]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  404044:	4f3d      	ldr	r7, [pc, #244]	; (40413c <nm_spi_write_block+0x16c>)
		if (!gu8Crc_off) {
  404046:	f8df 910c 	ldr.w	r9, [pc, #268]	; 404154 <nm_spi_write_block+0x184>
  40404a:	e01d      	b.n	404088 <nm_spi_write_block+0xb8>
				order = 0x2;
  40404c:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  404050:	bf94      	ite	ls
  404052:	2303      	movls	r3, #3
  404054:	2302      	movhi	r3, #2
		cmd |= order;
  404056:	f063 030f 	orn	r3, r3, #15
  40405a:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  40405e:	2101      	movs	r1, #1
  404060:	f10d 000b 	add.w	r0, sp, #11
  404064:	47b8      	blx	r7
  404066:	b9e8      	cbnz	r0, 4040a4 <nm_spi_write_block+0xd4>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  404068:	4631      	mov	r1, r6
  40406a:	eb08 0004 	add.w	r0, r8, r4
  40406e:	47b8      	blx	r7
  404070:	2800      	cmp	r0, #0
  404072:	d135      	bne.n	4040e0 <nm_spi_write_block+0x110>
		if (!gu8Crc_off) {
  404074:	f899 3000 	ldrb.w	r3, [r9]
  404078:	2b00      	cmp	r3, #0
  40407a:	d03c      	beq.n	4040f6 <nm_spi_write_block+0x126>
		ix += nbytes;
  40407c:	4434      	add	r4, r6
  40407e:	b224      	sxth	r4, r4
		sz -= nbytes;
  404080:	1bad      	subs	r5, r5, r6
  404082:	b2ad      	uxth	r5, r5
	} while (sz);
  404084:	2d00      	cmp	r5, #0
  404086:	d046      	beq.n	404116 <nm_spi_write_block+0x146>
  404088:	462e      	mov	r6, r5
  40408a:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  40408e:	bf28      	it	cs
  404090:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
		if (ix == 0)  {
  404094:	2c00      	cmp	r4, #0
  404096:	d1d9      	bne.n	40404c <nm_spi_write_block+0x7c>
				order = 0x1;
  404098:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  40409c:	bf94      	ite	ls
  40409e:	2303      	movls	r3, #3
  4040a0:	2301      	movhi	r3, #1
  4040a2:	e7d8      	b.n	404056 <nm_spi_write_block+0x86>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  4040a4:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  4040a8:	4925      	ldr	r1, [pc, #148]	; (404140 <nm_spi_write_block+0x170>)
  4040aa:	481e      	ldr	r0, [pc, #120]	; (404124 <nm_spi_write_block+0x154>)
  4040ac:	4c1e      	ldr	r4, [pc, #120]	; (404128 <nm_spi_write_block+0x158>)
  4040ae:	47a0      	blx	r4
  4040b0:	4824      	ldr	r0, [pc, #144]	; (404144 <nm_spi_write_block+0x174>)
  4040b2:	47a0      	blx	r4
  4040b4:	481e      	ldr	r0, [pc, #120]	; (404130 <nm_spi_write_block+0x160>)
  4040b6:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  4040b8:	f240 2226 	movw	r2, #550	; 0x226
  4040bc:	4918      	ldr	r1, [pc, #96]	; (404120 <nm_spi_write_block+0x150>)
  4040be:	4819      	ldr	r0, [pc, #100]	; (404124 <nm_spi_write_block+0x154>)
  4040c0:	4c19      	ldr	r4, [pc, #100]	; (404128 <nm_spi_write_block+0x158>)
  4040c2:	47a0      	blx	r4
  4040c4:	4820      	ldr	r0, [pc, #128]	; (404148 <nm_spi_write_block+0x178>)
  4040c6:	47a0      	blx	r4
  4040c8:	4819      	ldr	r0, [pc, #100]	; (404130 <nm_spi_write_block+0x160>)
  4040ca:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  4040cc:	2400      	movs	r4, #0
  4040ce:	9400      	str	r4, [sp, #0]
  4040d0:	4623      	mov	r3, r4
  4040d2:	4622      	mov	r2, r4
  4040d4:	4621      	mov	r1, r4
  4040d6:	20cf      	movs	r0, #207	; 0xcf
  4040d8:	4d10      	ldr	r5, [pc, #64]	; (40411c <nm_spi_write_block+0x14c>)
  4040da:	47a8      	blx	r5
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  4040dc:	4620      	mov	r0, r4
  4040de:	e793      	b.n	404008 <nm_spi_write_block+0x38>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  4040e0:	f240 12b1 	movw	r2, #433	; 0x1b1
  4040e4:	4916      	ldr	r1, [pc, #88]	; (404140 <nm_spi_write_block+0x170>)
  4040e6:	480f      	ldr	r0, [pc, #60]	; (404124 <nm_spi_write_block+0x154>)
  4040e8:	4c0f      	ldr	r4, [pc, #60]	; (404128 <nm_spi_write_block+0x158>)
  4040ea:	47a0      	blx	r4
  4040ec:	4817      	ldr	r0, [pc, #92]	; (40414c <nm_spi_write_block+0x17c>)
  4040ee:	47a0      	blx	r4
  4040f0:	480f      	ldr	r0, [pc, #60]	; (404130 <nm_spi_write_block+0x160>)
  4040f2:	47a0      	blx	r4
  4040f4:	e7e0      	b.n	4040b8 <nm_spi_write_block+0xe8>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  4040f6:	2102      	movs	r1, #2
  4040f8:	a803      	add	r0, sp, #12
  4040fa:	47b8      	blx	r7
  4040fc:	2800      	cmp	r0, #0
  4040fe:	d0bd      	beq.n	40407c <nm_spi_write_block+0xac>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  404100:	f240 12bb 	movw	r2, #443	; 0x1bb
  404104:	490e      	ldr	r1, [pc, #56]	; (404140 <nm_spi_write_block+0x170>)
  404106:	4807      	ldr	r0, [pc, #28]	; (404124 <nm_spi_write_block+0x154>)
  404108:	4c07      	ldr	r4, [pc, #28]	; (404128 <nm_spi_write_block+0x158>)
  40410a:	47a0      	blx	r4
  40410c:	4810      	ldr	r0, [pc, #64]	; (404150 <nm_spi_write_block+0x180>)
  40410e:	47a0      	blx	r4
  404110:	4807      	ldr	r0, [pc, #28]	; (404130 <nm_spi_write_block+0x160>)
  404112:	47a0      	blx	r4
  404114:	e7d0      	b.n	4040b8 <nm_spi_write_block+0xe8>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  404116:	2000      	movs	r0, #0
  404118:	e776      	b.n	404008 <nm_spi_write_block+0x38>
  40411a:	bf00      	nop
  40411c:	00403a61 	.word	0x00403a61
  404120:	004092cc 	.word	0x004092cc
  404124:	00408cac 	.word	0x00408cac
  404128:	00405d39 	.word	0x00405d39
  40412c:	00409570 	.word	0x00409570
  404130:	00408cd8 	.word	0x00408cd8
  404134:	00403865 	.word	0x00403865
  404138:	004095a0 	.word	0x004095a0
  40413c:	00403a41 	.word	0x00403a41
  404140:	004092ac 	.word	0x004092ac
  404144:	004095d8 	.word	0x004095d8
  404148:	0040967c 	.word	0x0040967c
  40414c:	00409610 	.word	0x00409610
  404150:	00409644 	.word	0x00409644
  404154:	2040c368 	.word	0x2040c368

00404158 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  404158:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40415c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  404160:	b194      	cbz	r4, 404188 <Socket_ReadSocketData+0x30>
  404162:	4681      	mov	r9, r0
  404164:	460e      	mov	r6, r1
  404166:	4692      	mov	sl, r2
  404168:	4698      	mov	r8, r3
  40416a:	0103      	lsls	r3, r0, #4
  40416c:	4922      	ldr	r1, [pc, #136]	; (4041f8 <Socket_ReadSocketData+0xa0>)
  40416e:	58cb      	ldr	r3, [r1, r3]
  404170:	b153      	cbz	r3, 404188 <Socket_ReadSocketData+0x30>
  404172:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  404176:	889b      	ldrh	r3, [r3, #4]
  404178:	b29b      	uxth	r3, r3
  40417a:	b12b      	cbz	r3, 404188 <Socket_ReadSocketData+0x30>
  40417c:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  404180:	7a9b      	ldrb	r3, [r3, #10]
  404182:	b2db      	uxtb	r3, r3
  404184:	2b01      	cmp	r3, #1
  404186:	d001      	beq.n	40418c <Socket_ReadSocketData+0x34>
  404188:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  40418c:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  40418e:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  404192:	f8df b07c 	ldr.w	fp, [pc, #124]	; 404210 <Socket_ReadSocketData+0xb8>
  404196:	e006      	b.n	4041a6 <Socket_ReadSocketData+0x4e>
  404198:	4625      	mov	r5, r4
			u8SetRxDone = 1;
  40419a:	2301      	movs	r3, #1
  40419c:	e00b      	b.n	4041b6 <Socket_ReadSocketData+0x5e>
				pstrRecv->u16RemainingSize	-= u16Read;

				if (gpfAppSocketCb)
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
  40419e:	1b64      	subs	r4, r4, r5
  4041a0:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  4041a2:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  4041a4:	b1ec      	cbz	r4, 4041e2 <Socket_ReadSocketData+0x8a>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  4041a6:	88bb      	ldrh	r3, [r7, #4]
  4041a8:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
  4041aa:	b21b      	sxth	r3, r3
  4041ac:	2b00      	cmp	r3, #0
  4041ae:	ddf3      	ble.n	404198 <Socket_ReadSocketData+0x40>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  4041b0:	88bd      	ldrh	r5, [r7, #4]
  4041b2:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
  4041b4:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  4041b6:	6839      	ldr	r1, [r7, #0]
  4041b8:	462a      	mov	r2, r5
  4041ba:	4640      	mov	r0, r8
  4041bc:	47d8      	blx	fp
  4041be:	b990      	cbnz	r0, 4041e6 <Socket_ReadSocketData+0x8e>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  4041c0:	683b      	ldr	r3, [r7, #0]
  4041c2:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  4041c4:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  4041c6:	88f3      	ldrh	r3, [r6, #6]
  4041c8:	1b5b      	subs	r3, r3, r5
  4041ca:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
  4041cc:	4b0b      	ldr	r3, [pc, #44]	; (4041fc <Socket_ReadSocketData+0xa4>)
  4041ce:	681b      	ldr	r3, [r3, #0]
  4041d0:	2b00      	cmp	r3, #0
  4041d2:	d0e4      	beq.n	40419e <Socket_ReadSocketData+0x46>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  4041d4:	4b09      	ldr	r3, [pc, #36]	; (4041fc <Socket_ReadSocketData+0xa4>)
  4041d6:	681b      	ldr	r3, [r3, #0]
  4041d8:	4632      	mov	r2, r6
  4041da:	4651      	mov	r1, sl
  4041dc:	4648      	mov	r0, r9
  4041de:	4798      	blx	r3
  4041e0:	e7dd      	b.n	40419e <Socket_ReadSocketData+0x46>
  4041e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  4041e6:	4806      	ldr	r0, [pc, #24]	; (404200 <Socket_ReadSocketData+0xa8>)
  4041e8:	4d06      	ldr	r5, [pc, #24]	; (404204 <Socket_ReadSocketData+0xac>)
  4041ea:	47a8      	blx	r5
  4041ec:	4621      	mov	r1, r4
  4041ee:	4806      	ldr	r0, [pc, #24]	; (404208 <Socket_ReadSocketData+0xb0>)
  4041f0:	47a8      	blx	r5
  4041f2:	4806      	ldr	r0, [pc, #24]	; (40420c <Socket_ReadSocketData+0xb4>)
  4041f4:	47a8      	blx	r5
	}
}
  4041f6:	e7c7      	b.n	404188 <Socket_ReadSocketData+0x30>
  4041f8:	2040c9e4 	.word	0x2040c9e4
  4041fc:	2040ca94 	.word	0x2040ca94
  404200:	00408f80 	.word	0x00408f80
  404204:	00405d39 	.word	0x00405d39
  404208:	004098b8 	.word	0x004098b8
  40420c:	00408cd8 	.word	0x00408cd8
  404210:	00402861 	.word	0x00402861

00404214 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  404214:	b5f0      	push	{r4, r5, r6, r7, lr}
  404216:	b099      	sub	sp, #100	; 0x64
  404218:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  40421a:	2841      	cmp	r0, #65	; 0x41
  40421c:	d049      	beq.n	4042b2 <m2m_ip_cb+0x9e>
  40421e:	460d      	mov	r5, r1
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  404220:	2842      	cmp	r0, #66	; 0x42
  404222:	d05f      	beq.n	4042e4 <m2m_ip_cb+0xd0>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  404224:	2843      	cmp	r0, #67	; 0x43
  404226:	d075      	beq.n	404314 <m2m_ip_cb+0x100>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  404228:	2844      	cmp	r0, #68	; 0x44
  40422a:	f000 80b0 	beq.w	40438e <m2m_ip_cb+0x17a>
  40422e:	284b      	cmp	r0, #75	; 0x4b
  404230:	f000 80ad 	beq.w	40438e <m2m_ip_cb+0x17a>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  404234:	284a      	cmp	r0, #74	; 0x4a
  404236:	f000 80cc 	beq.w	4043d2 <m2m_ip_cb+0x1be>
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  40423a:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  40423e:	b2db      	uxtb	r3, r3
  404240:	2b07      	cmp	r3, #7
  404242:	f200 80f4 	bhi.w	40442e <m2m_ip_cb+0x21a>
  404246:	2285      	movs	r2, #133	; 0x85
  404248:	fa22 f303 	lsr.w	r3, r2, r3
  40424c:	f013 0f01 	tst.w	r3, #1
  404250:	f000 80ed 	beq.w	40442e <m2m_ip_cb+0x21a>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  404254:	2848      	cmp	r0, #72	; 0x48
  404256:	bf14      	ite	ne
  404258:	2706      	movne	r7, #6
  40425a:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  40425c:	2300      	movs	r3, #0
  40425e:	2210      	movs	r2, #16
  404260:	a903      	add	r1, sp, #12
  404262:	4620      	mov	r0, r4
  404264:	4e93      	ldr	r6, [pc, #588]	; (4044b4 <m2m_ip_cb+0x2a0>)
  404266:	47b0      	blx	r6
  404268:	2800      	cmp	r0, #0
  40426a:	f040 80b0 	bne.w	4043ce <m2m_ip_cb+0x1ba>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  40426e:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  404272:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  404276:	4a90      	ldr	r2, [pc, #576]	; (4044b8 <m2m_ip_cb+0x2a4>)
  404278:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  40427c:	2300      	movs	r3, #0
  40427e:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  404280:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  404284:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  404288:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  40428c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  404290:	9e04      	ldr	r6, [sp, #16]
  404292:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  404294:	88d2      	ldrh	r2, [r2, #6]
  404296:	b292      	uxth	r2, r2
  404298:	4291      	cmp	r1, r2
  40429a:	f000 80ac 	beq.w	4043f6 <m2m_ip_cb+0x1e2>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  40429e:	2d10      	cmp	r5, #16
  4042a0:	f240 8095 	bls.w	4043ce <m2m_ip_cb+0x1ba>
					hif_receive(0, NULL, 0, 1);
  4042a4:	2301      	movs	r3, #1
  4042a6:	2200      	movs	r2, #0
  4042a8:	4611      	mov	r1, r2
  4042aa:	4610      	mov	r0, r2
  4042ac:	4c81      	ldr	r4, [pc, #516]	; (4044b4 <m2m_ip_cb+0x2a0>)
  4042ae:	47a0      	blx	r4
	{
  4042b0:	e08d      	b.n	4043ce <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  4042b2:	2300      	movs	r3, #0
  4042b4:	2204      	movs	r2, #4
  4042b6:	a907      	add	r1, sp, #28
  4042b8:	4620      	mov	r0, r4
  4042ba:	4c7e      	ldr	r4, [pc, #504]	; (4044b4 <m2m_ip_cb+0x2a0>)
  4042bc:	47a0      	blx	r4
  4042be:	2800      	cmp	r0, #0
  4042c0:	f040 8085 	bne.w	4043ce <m2m_ip_cb+0x1ba>
			strBind.status = strBindReply.s8Status;
  4042c4:	f89d 301d 	ldrb.w	r3, [sp, #29]
  4042c8:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  4042cc:	4b7b      	ldr	r3, [pc, #492]	; (4044bc <m2m_ip_cb+0x2a8>)
  4042ce:	681b      	ldr	r3, [r3, #0]
  4042d0:	2b00      	cmp	r3, #0
  4042d2:	d07c      	beq.n	4043ce <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  4042d4:	4b79      	ldr	r3, [pc, #484]	; (4044bc <m2m_ip_cb+0x2a8>)
  4042d6:	681b      	ldr	r3, [r3, #0]
  4042d8:	aa03      	add	r2, sp, #12
  4042da:	2101      	movs	r1, #1
  4042dc:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4042e0:	4798      	blx	r3
  4042e2:	e074      	b.n	4043ce <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  4042e4:	2300      	movs	r3, #0
  4042e6:	2204      	movs	r2, #4
  4042e8:	a907      	add	r1, sp, #28
  4042ea:	4620      	mov	r0, r4
  4042ec:	4c71      	ldr	r4, [pc, #452]	; (4044b4 <m2m_ip_cb+0x2a0>)
  4042ee:	47a0      	blx	r4
  4042f0:	2800      	cmp	r0, #0
  4042f2:	d16c      	bne.n	4043ce <m2m_ip_cb+0x1ba>
			strListen.status = strListenReply.s8Status;
  4042f4:	f89d 301d 	ldrb.w	r3, [sp, #29]
  4042f8:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  4042fc:	4b6f      	ldr	r3, [pc, #444]	; (4044bc <m2m_ip_cb+0x2a8>)
  4042fe:	681b      	ldr	r3, [r3, #0]
  404300:	2b00      	cmp	r3, #0
  404302:	d064      	beq.n	4043ce <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  404304:	4b6d      	ldr	r3, [pc, #436]	; (4044bc <m2m_ip_cb+0x2a8>)
  404306:	681b      	ldr	r3, [r3, #0]
  404308:	aa03      	add	r2, sp, #12
  40430a:	2102      	movs	r1, #2
  40430c:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  404310:	4798      	blx	r3
  404312:	e05c      	b.n	4043ce <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  404314:	2300      	movs	r3, #0
  404316:	220c      	movs	r2, #12
  404318:	eb0d 0102 	add.w	r1, sp, r2
  40431c:	4620      	mov	r0, r4
  40431e:	4c65      	ldr	r4, [pc, #404]	; (4044b4 <m2m_ip_cb+0x2a0>)
  404320:	47a0      	blx	r4
  404322:	2800      	cmp	r0, #0
  404324:	d153      	bne.n	4043ce <m2m_ip_cb+0x1ba>
			if(strAcceptReply.sConnectedSock >= 0)
  404326:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  40432a:	2b00      	cmp	r3, #0
  40432c:	db19      	blt.n	404362 <m2m_ip_cb+0x14e>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  40432e:	4a62      	ldr	r2, [pc, #392]	; (4044b8 <m2m_ip_cb+0x2a4>)
  404330:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  404334:	2100      	movs	r1, #0
  404336:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  404338:	2101      	movs	r1, #1
  40433a:	7291      	strb	r1, [r2, #10]
				++gu16SessionID;
  40433c:	4960      	ldr	r1, [pc, #384]	; (4044c0 <m2m_ip_cb+0x2ac>)
  40433e:	880a      	ldrh	r2, [r1, #0]
  404340:	3201      	adds	r2, #1
  404342:	b292      	uxth	r2, r2
  404344:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  404346:	880a      	ldrh	r2, [r1, #0]
  404348:	b292      	uxth	r2, r2
  40434a:	b91a      	cbnz	r2, 404354 <m2m_ip_cb+0x140>
					++gu16SessionID;
  40434c:	880a      	ldrh	r2, [r1, #0]
  40434e:	3201      	adds	r2, #1
  404350:	b292      	uxth	r2, r2
  404352:	800a      	strh	r2, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  404354:	4a5a      	ldr	r2, [pc, #360]	; (4044c0 <m2m_ip_cb+0x2ac>)
  404356:	8811      	ldrh	r1, [r2, #0]
  404358:	b289      	uxth	r1, r1
  40435a:	4a57      	ldr	r2, [pc, #348]	; (4044b8 <m2m_ip_cb+0x2a4>)
  40435c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  404360:	80d1      	strh	r1, [r2, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
  404362:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  404366:	2302      	movs	r3, #2
  404368:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  40436c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  404370:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  404374:	9b04      	ldr	r3, [sp, #16]
  404376:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  404378:	4b50      	ldr	r3, [pc, #320]	; (4044bc <m2m_ip_cb+0x2a8>)
  40437a:	681b      	ldr	r3, [r3, #0]
  40437c:	b33b      	cbz	r3, 4043ce <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  40437e:	4b4f      	ldr	r3, [pc, #316]	; (4044bc <m2m_ip_cb+0x2a8>)
  404380:	681b      	ldr	r3, [r3, #0]
  404382:	aa07      	add	r2, sp, #28
  404384:	2104      	movs	r1, #4
  404386:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  40438a:	4798      	blx	r3
  40438c:	e01f      	b.n	4043ce <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  40438e:	2300      	movs	r3, #0
  404390:	2204      	movs	r2, #4
  404392:	a907      	add	r1, sp, #28
  404394:	4620      	mov	r0, r4
  404396:	4c47      	ldr	r4, [pc, #284]	; (4044b4 <m2m_ip_cb+0x2a0>)
  404398:	47a0      	blx	r4
  40439a:	b9c0      	cbnz	r0, 4043ce <m2m_ip_cb+0x1ba>
			strConnMsg.sock		= strConnectReply.sock;
  40439c:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4043a0:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  4043a4:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  4043a8:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  4043ac:	b93b      	cbnz	r3, 4043be <m2m_ip_cb+0x1aa>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  4043ae:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  4043b2:	3b08      	subs	r3, #8
  4043b4:	b29b      	uxth	r3, r3
  4043b6:	4a40      	ldr	r2, [pc, #256]	; (4044b8 <m2m_ip_cb+0x2a4>)
  4043b8:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4043bc:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
  4043be:	4b3f      	ldr	r3, [pc, #252]	; (4044bc <m2m_ip_cb+0x2a8>)
  4043c0:	681b      	ldr	r3, [r3, #0]
  4043c2:	b123      	cbz	r3, 4043ce <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  4043c4:	4b3d      	ldr	r3, [pc, #244]	; (4044bc <m2m_ip_cb+0x2a8>)
  4043c6:	681b      	ldr	r3, [r3, #0]
  4043c8:	aa03      	add	r2, sp, #12
  4043ca:	2105      	movs	r1, #5
  4043cc:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  4043ce:	b019      	add	sp, #100	; 0x64
  4043d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  4043d2:	2300      	movs	r3, #0
  4043d4:	2244      	movs	r2, #68	; 0x44
  4043d6:	a907      	add	r1, sp, #28
  4043d8:	4620      	mov	r0, r4
  4043da:	4c36      	ldr	r4, [pc, #216]	; (4044b4 <m2m_ip_cb+0x2a0>)
  4043dc:	47a0      	blx	r4
  4043de:	2800      	cmp	r0, #0
  4043e0:	d1f5      	bne.n	4043ce <m2m_ip_cb+0x1ba>
			if(gpfAppResolveCb)
  4043e2:	4b38      	ldr	r3, [pc, #224]	; (4044c4 <m2m_ip_cb+0x2b0>)
  4043e4:	681b      	ldr	r3, [r3, #0]
  4043e6:	2b00      	cmp	r3, #0
  4043e8:	d0f1      	beq.n	4043ce <m2m_ip_cb+0x1ba>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  4043ea:	4b36      	ldr	r3, [pc, #216]	; (4044c4 <m2m_ip_cb+0x2b0>)
  4043ec:	681b      	ldr	r3, [r3, #0]
  4043ee:	9917      	ldr	r1, [sp, #92]	; 0x5c
  4043f0:	a807      	add	r0, sp, #28
  4043f2:	4798      	blx	r3
  4043f4:	e7eb      	b.n	4043ce <m2m_ip_cb+0x1ba>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  4043f6:	f1be 0f00 	cmp.w	lr, #0
  4043fa:	dd01      	ble.n	404400 <m2m_ip_cb+0x1ec>
  4043fc:	45ae      	cmp	lr, r5
  4043fe:	db0d      	blt.n	40441c <m2m_ip_cb+0x208>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  404400:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  404404:	2300      	movs	r3, #0
  404406:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  404408:	4b2c      	ldr	r3, [pc, #176]	; (4044bc <m2m_ip_cb+0x2a8>)
  40440a:	681b      	ldr	r3, [r3, #0]
  40440c:	2b00      	cmp	r3, #0
  40440e:	d0de      	beq.n	4043ce <m2m_ip_cb+0x1ba>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  404410:	4b2a      	ldr	r3, [pc, #168]	; (4044bc <m2m_ip_cb+0x2a8>)
  404412:	681b      	ldr	r3, [r3, #0]
  404414:	aa07      	add	r2, sp, #28
  404416:	4639      	mov	r1, r7
  404418:	4798      	blx	r3
  40441a:	e7d8      	b.n	4043ce <m2m_ip_cb+0x1ba>
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  40441c:	fa1f f28e 	uxth.w	r2, lr
  404420:	9200      	str	r2, [sp, #0]
  404422:	4423      	add	r3, r4
  404424:	463a      	mov	r2, r7
  404426:	a907      	add	r1, sp, #28
  404428:	4c27      	ldr	r4, [pc, #156]	; (4044c8 <m2m_ip_cb+0x2b4>)
  40442a:	47a0      	blx	r4
  40442c:	e7cf      	b.n	4043ce <m2m_ip_cb+0x1ba>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  40442e:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  404432:	2b45      	cmp	r3, #69	; 0x45
  404434:	d019      	beq.n	40446a <m2m_ip_cb+0x256>
  404436:	284c      	cmp	r0, #76	; 0x4c
  404438:	d017      	beq.n	40446a <m2m_ip_cb+0x256>
	else if(u8OpCode == SOCKET_CMD_PING)
  40443a:	2852      	cmp	r0, #82	; 0x52
  40443c:	d1c7      	bne.n	4043ce <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  40443e:	2301      	movs	r3, #1
  404440:	2214      	movs	r2, #20
  404442:	a907      	add	r1, sp, #28
  404444:	4620      	mov	r0, r4
  404446:	4c1b      	ldr	r4, [pc, #108]	; (4044b4 <m2m_ip_cb+0x2a0>)
  404448:	47a0      	blx	r4
  40444a:	2800      	cmp	r0, #0
  40444c:	d1bf      	bne.n	4043ce <m2m_ip_cb+0x1ba>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  40444e:	4b1f      	ldr	r3, [pc, #124]	; (4044cc <m2m_ip_cb+0x2b8>)
  404450:	9a08      	ldr	r2, [sp, #32]
  404452:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  404454:	681b      	ldr	r3, [r3, #0]
  404456:	2b00      	cmp	r3, #0
  404458:	d0b9      	beq.n	4043ce <m2m_ip_cb+0x1ba>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  40445a:	4b1c      	ldr	r3, [pc, #112]	; (4044cc <m2m_ip_cb+0x2b8>)
  40445c:	681b      	ldr	r3, [r3, #0]
  40445e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  404462:	9909      	ldr	r1, [sp, #36]	; 0x24
  404464:	9807      	ldr	r0, [sp, #28]
  404466:	4798      	blx	r3
}
  404468:	e7b1      	b.n	4043ce <m2m_ip_cb+0x1ba>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  40446a:	2847      	cmp	r0, #71	; 0x47
  40446c:	bf14      	ite	ne
  40446e:	2507      	movne	r5, #7
  404470:	2508      	moveq	r5, #8
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  404472:	2300      	movs	r3, #0
  404474:	2208      	movs	r2, #8
  404476:	a907      	add	r1, sp, #28
  404478:	4620      	mov	r0, r4
  40447a:	4c0e      	ldr	r4, [pc, #56]	; (4044b4 <m2m_ip_cb+0x2a0>)
  40447c:	47a0      	blx	r4
  40447e:	2800      	cmp	r0, #0
  404480:	d1a5      	bne.n	4043ce <m2m_ip_cb+0x1ba>
			sock = strReply.sock;
  404482:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  404486:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  40448a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40448e:	f8ad 300c 	strh.w	r3, [sp, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
  404492:	4b09      	ldr	r3, [pc, #36]	; (4044b8 <m2m_ip_cb+0x2a4>)
  404494:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404498:	88db      	ldrh	r3, [r3, #6]
  40449a:	b29b      	uxth	r3, r3
  40449c:	429a      	cmp	r2, r3
  40449e:	d196      	bne.n	4043ce <m2m_ip_cb+0x1ba>
				if(gpfAppSocketCb)
  4044a0:	4b06      	ldr	r3, [pc, #24]	; (4044bc <m2m_ip_cb+0x2a8>)
  4044a2:	681b      	ldr	r3, [r3, #0]
  4044a4:	2b00      	cmp	r3, #0
  4044a6:	d092      	beq.n	4043ce <m2m_ip_cb+0x1ba>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  4044a8:	4b04      	ldr	r3, [pc, #16]	; (4044bc <m2m_ip_cb+0x2a8>)
  4044aa:	681b      	ldr	r3, [r3, #0]
  4044ac:	aa03      	add	r2, sp, #12
  4044ae:	4629      	mov	r1, r5
  4044b0:	4798      	blx	r3
	{
  4044b2:	e78c      	b.n	4043ce <m2m_ip_cb+0x1ba>
  4044b4:	00402861 	.word	0x00402861
  4044b8:	2040c9e4 	.word	0x2040c9e4
  4044bc:	2040ca94 	.word	0x2040ca94
  4044c0:	2040c36a 	.word	0x2040c36a
  4044c4:	2040ca9c 	.word	0x2040ca9c
  4044c8:	00404159 	.word	0x00404159
  4044cc:	2040ca98 	.word	0x2040ca98

004044d0 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  4044d0:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  4044d2:	4b0a      	ldr	r3, [pc, #40]	; (4044fc <socketInit+0x2c>)
  4044d4:	781b      	ldrb	r3, [r3, #0]
  4044d6:	b103      	cbz	r3, 4044da <socketInit+0xa>
  4044d8:	bd08      	pop	{r3, pc}
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  4044da:	22b0      	movs	r2, #176	; 0xb0
  4044dc:	2100      	movs	r1, #0
  4044de:	4808      	ldr	r0, [pc, #32]	; (404500 <socketInit+0x30>)
  4044e0:	4b08      	ldr	r3, [pc, #32]	; (404504 <socketInit+0x34>)
  4044e2:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  4044e4:	4908      	ldr	r1, [pc, #32]	; (404508 <socketInit+0x38>)
  4044e6:	2002      	movs	r0, #2
  4044e8:	4b08      	ldr	r3, [pc, #32]	; (40450c <socketInit+0x3c>)
  4044ea:	4798      	blx	r3
		gbSocketInit=1;
  4044ec:	2201      	movs	r2, #1
  4044ee:	4b03      	ldr	r3, [pc, #12]	; (4044fc <socketInit+0x2c>)
  4044f0:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  4044f2:	2200      	movs	r2, #0
  4044f4:	4b06      	ldr	r3, [pc, #24]	; (404510 <socketInit+0x40>)
  4044f6:	801a      	strh	r2, [r3, #0]
	}
}
  4044f8:	e7ee      	b.n	4044d8 <socketInit+0x8>
  4044fa:	bf00      	nop
  4044fc:	2040c369 	.word	0x2040c369
  404500:	2040c9e4 	.word	0x2040c9e4
  404504:	0040220d 	.word	0x0040220d
  404508:	00404215 	.word	0x00404215
  40450c:	00402975 	.word	0x00402975
  404510:	2040c36a 	.word	0x2040c36a

00404514 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  404514:	4b02      	ldr	r3, [pc, #8]	; (404520 <registerSocketCallback+0xc>)
  404516:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  404518:	4b02      	ldr	r3, [pc, #8]	; (404524 <registerSocketCallback+0x10>)
  40451a:	6019      	str	r1, [r3, #0]
  40451c:	4770      	bx	lr
  40451e:	bf00      	nop
  404520:	2040ca94 	.word	0x2040ca94
  404524:	2040ca9c 	.word	0x2040ca9c

00404528 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  404528:	b5f0      	push	{r4, r5, r6, r7, lr}
  40452a:	b087      	sub	sp, #28
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  40452c:	2802      	cmp	r0, #2
  40452e:	d158      	bne.n	4045e2 <socket+0xba>
	{
		if(u8Type == SOCK_STREAM)
  404530:	2901      	cmp	r1, #1
  404532:	d059      	beq.n	4045e8 <socket+0xc0>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  404534:	2902      	cmp	r1, #2
  404536:	d116      	bne.n	404566 <socket+0x3e>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  404538:	260b      	movs	r6, #11
			u8Count = TCP_SOCK_MAX;
  40453a:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  40453c:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  40453e:	4b2e      	ldr	r3, [pc, #184]	; (4045f8 <socket+0xd0>)
  404540:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404544:	7a9b      	ldrb	r3, [r3, #10]
  404546:	2b00      	cmp	r3, #0
  404548:	d051      	beq.n	4045ee <socket+0xc6>
  40454a:	1c63      	adds	r3, r4, #1
  40454c:	b2db      	uxtb	r3, r3
  40454e:	4f2a      	ldr	r7, [pc, #168]	; (4045f8 <socket+0xd0>)
		for(;u8Count < u8SocketCount; u8Count ++)
  404550:	b2dc      	uxtb	r4, r3
  404552:	42b4      	cmp	r4, r6
  404554:	d240      	bcs.n	4045d8 <socket+0xb0>
			pstrSock = &gastrSockets[u8Count];
  404556:	461d      	mov	r5, r3
			if(pstrSock->bIsUsed == 0)
  404558:	eb07 1103 	add.w	r1, r7, r3, lsl #4
  40455c:	7a89      	ldrb	r1, [r1, #10]
  40455e:	1c58      	adds	r0, r3, #1
  404560:	b121      	cbz	r1, 40456c <socket+0x44>
  404562:	4603      	mov	r3, r0
  404564:	e7f4      	b.n	404550 <socket+0x28>
			return sock;
  404566:	f04f 34ff 	mov.w	r4, #4294967295
  40456a:	e037      	b.n	4045dc <socket+0xb4>
			pstrSock = &gastrSockets[u8Count];
  40456c:	4822      	ldr	r0, [pc, #136]	; (4045f8 <socket+0xd0>)
  40456e:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  404572:	4616      	mov	r6, r2
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  404574:	2210      	movs	r2, #16
  404576:	2100      	movs	r1, #0
  404578:	4b20      	ldr	r3, [pc, #128]	; (4045fc <socket+0xd4>)
  40457a:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  40457c:	4b1e      	ldr	r3, [pc, #120]	; (4045f8 <socket+0xd0>)
  40457e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  404582:	2201      	movs	r2, #1
  404584:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  404586:	4a1e      	ldr	r2, [pc, #120]	; (404600 <socket+0xd8>)
  404588:	8813      	ldrh	r3, [r2, #0]
  40458a:	3301      	adds	r3, #1
  40458c:	b29b      	uxth	r3, r3
  40458e:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  404590:	8813      	ldrh	r3, [r2, #0]
  404592:	b29b      	uxth	r3, r3
  404594:	b91b      	cbnz	r3, 40459e <socket+0x76>
					++gu16SessionID;
  404596:	8813      	ldrh	r3, [r2, #0]
  404598:	3301      	adds	r3, #1
  40459a:	b29b      	uxth	r3, r3
  40459c:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  40459e:	4b18      	ldr	r3, [pc, #96]	; (404600 <socket+0xd8>)
  4045a0:	881a      	ldrh	r2, [r3, #0]
  4045a2:	b292      	uxth	r2, r2
  4045a4:	4b14      	ldr	r3, [pc, #80]	; (4045f8 <socket+0xd0>)
  4045a6:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  4045aa:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  4045ac:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  4045ae:	f016 0f01 	tst.w	r6, #1
  4045b2:	d013      	beq.n	4045dc <socket+0xb4>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  4045b4:	aa06      	add	r2, sp, #24
  4045b6:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  4045ba:	4b0f      	ldr	r3, [pc, #60]	; (4045f8 <socket+0xd0>)
  4045bc:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  4045c0:	2321      	movs	r3, #33	; 0x21
  4045c2:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  4045c4:	2300      	movs	r3, #0
  4045c6:	9302      	str	r3, [sp, #8]
  4045c8:	9301      	str	r3, [sp, #4]
  4045ca:	9300      	str	r3, [sp, #0]
  4045cc:	2304      	movs	r3, #4
  4045ce:	2150      	movs	r1, #80	; 0x50
  4045d0:	2002      	movs	r0, #2
  4045d2:	4d0c      	ldr	r5, [pc, #48]	; (404604 <socket+0xdc>)
  4045d4:	47a8      	blx	r5
  4045d6:	e001      	b.n	4045dc <socket+0xb4>
	SOCKET		sock = -1;
  4045d8:	f04f 34ff 	mov.w	r4, #4294967295
				break;
			}
		}
	}
	return sock;
}
  4045dc:	4620      	mov	r0, r4
  4045de:	b007      	add	sp, #28
  4045e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SOCKET		sock = -1;
  4045e2:	f04f 34ff 	mov.w	r4, #4294967295
  4045e6:	e7f9      	b.n	4045dc <socket+0xb4>
			u8SocketCount = TCP_SOCK_MAX;
  4045e8:	2607      	movs	r6, #7
			u8Count = 0;
  4045ea:	2400      	movs	r4, #0
  4045ec:	e7a6      	b.n	40453c <socket+0x14>
			pstrSock = &gastrSockets[u8Count];
  4045ee:	4802      	ldr	r0, [pc, #8]	; (4045f8 <socket+0xd0>)
  4045f0:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  4045f4:	e7bd      	b.n	404572 <socket+0x4a>
  4045f6:	bf00      	nop
  4045f8:	2040c9e4 	.word	0x2040c9e4
  4045fc:	0040220d 	.word	0x0040220d
  404600:	2040c36a 	.word	0x2040c36a
  404604:	00402371 	.word	0x00402371

00404608 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  404608:	b530      	push	{r4, r5, lr}
  40460a:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  40460c:	1e04      	subs	r4, r0, #0
  40460e:	db36      	blt.n	40467e <connect+0x76>
  404610:	2900      	cmp	r1, #0
  404612:	d034      	beq.n	40467e <connect+0x76>
  404614:	4b1d      	ldr	r3, [pc, #116]	; (40468c <connect+0x84>)
  404616:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40461a:	7a9b      	ldrb	r3, [r3, #10]
  40461c:	b2db      	uxtb	r3, r3
  40461e:	2a00      	cmp	r2, #0
  404620:	d030      	beq.n	404684 <connect+0x7c>
  404622:	2b01      	cmp	r3, #1
  404624:	d12e      	bne.n	404684 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  404626:	4b19      	ldr	r3, [pc, #100]	; (40468c <connect+0x84>)
  404628:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40462c:	7adb      	ldrb	r3, [r3, #11]
  40462e:	f013 0f01 	tst.w	r3, #1
  404632:	d022      	beq.n	40467a <connect+0x72>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  404634:	4b15      	ldr	r3, [pc, #84]	; (40468c <connect+0x84>)
  404636:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40463a:	7adb      	ldrb	r3, [r3, #11]
  40463c:	f88d 301d 	strb.w	r3, [sp, #29]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  404640:	254b      	movs	r5, #75	; 0x4b
		}
		strConnect.sock = sock;
  404642:	f88d 401c 	strb.w	r4, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  404646:	2208      	movs	r2, #8
  404648:	a805      	add	r0, sp, #20
  40464a:	4b11      	ldr	r3, [pc, #68]	; (404690 <connect+0x88>)
  40464c:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  40464e:	480f      	ldr	r0, [pc, #60]	; (40468c <connect+0x84>)
  404650:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404654:	88c3      	ldrh	r3, [r0, #6]
  404656:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  40465a:	2300      	movs	r3, #0
  40465c:	9302      	str	r3, [sp, #8]
  40465e:	9301      	str	r3, [sp, #4]
  404660:	9300      	str	r3, [sp, #0]
  404662:	230c      	movs	r3, #12
  404664:	aa05      	add	r2, sp, #20
  404666:	4629      	mov	r1, r5
  404668:	2002      	movs	r0, #2
  40466a:	4c0a      	ldr	r4, [pc, #40]	; (404694 <connect+0x8c>)
  40466c:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  40466e:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  404670:	bf18      	it	ne
  404672:	f06f 0008 	mvnne.w	r0, #8
		}
	}
	return s8Ret;
}
  404676:	b009      	add	sp, #36	; 0x24
  404678:	bd30      	pop	{r4, r5, pc}
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  40467a:	2544      	movs	r5, #68	; 0x44
  40467c:	e7e1      	b.n	404642 <connect+0x3a>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  40467e:	f06f 0005 	mvn.w	r0, #5
  404682:	e7f8      	b.n	404676 <connect+0x6e>
  404684:	f06f 0005 	mvn.w	r0, #5
  404688:	e7f5      	b.n	404676 <connect+0x6e>
  40468a:	bf00      	nop
  40468c:	2040c9e4 	.word	0x2040c9e4
  404690:	004021f9 	.word	0x004021f9
  404694:	00402371 	.word	0x00402371

00404698 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  404698:	b530      	push	{r4, r5, lr}
  40469a:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  40469c:	460c      	mov	r4, r1
  40469e:	3100      	adds	r1, #0
  4046a0:	bf18      	it	ne
  4046a2:	2101      	movne	r1, #1
  4046a4:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  4046a8:	bf88      	it	hi
  4046aa:	2100      	movhi	r1, #0
  4046ac:	2900      	cmp	r1, #0
  4046ae:	d037      	beq.n	404720 <send+0x88>
  4046b0:	2800      	cmp	r0, #0
  4046b2:	db35      	blt.n	404720 <send+0x88>
  4046b4:	4b1d      	ldr	r3, [pc, #116]	; (40472c <send+0x94>)
  4046b6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4046ba:	7a9b      	ldrb	r3, [r3, #10]
  4046bc:	b2db      	uxtb	r3, r3
  4046be:	2b01      	cmp	r3, #1
  4046c0:	d131      	bne.n	404726 <send+0x8e>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  4046c2:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  4046c6:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  4046ca:	4b18      	ldr	r3, [pc, #96]	; (40472c <send+0x94>)
  4046cc:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4046d0:	88db      	ldrh	r3, [r3, #6]
  4046d2:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  4046d6:	2807      	cmp	r0, #7
  4046d8:	bfb4      	ite	lt
  4046da:	2550      	movlt	r5, #80	; 0x50
  4046dc:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  4046de:	4b13      	ldr	r3, [pc, #76]	; (40472c <send+0x94>)
  4046e0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4046e4:	7adb      	ldrb	r3, [r3, #11]
  4046e6:	f013 0f01 	tst.w	r3, #1
  4046ea:	d017      	beq.n	40471c <send+0x84>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  4046ec:	4b0f      	ldr	r3, [pc, #60]	; (40472c <send+0x94>)
  4046ee:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  4046f2:	8905      	ldrh	r5, [r0, #8]
  4046f4:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  4046f6:	214c      	movs	r1, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  4046f8:	9502      	str	r5, [sp, #8]
  4046fa:	9201      	str	r2, [sp, #4]
  4046fc:	9400      	str	r4, [sp, #0]
  4046fe:	2310      	movs	r3, #16
  404700:	eb0d 0203 	add.w	r2, sp, r3
  404704:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  404708:	2002      	movs	r0, #2
  40470a:	4c09      	ldr	r4, [pc, #36]	; (404730 <send+0x98>)
  40470c:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  40470e:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  404710:	bf0c      	ite	eq
  404712:	2000      	moveq	r0, #0
  404714:	f06f 000d 	mvnne.w	r0, #13
		}
	}
	return s16Ret;
}
  404718:	b009      	add	sp, #36	; 0x24
  40471a:	bd30      	pop	{r4, r5, pc}
		u8Cmd			= SOCKET_CMD_SEND;
  40471c:	2145      	movs	r1, #69	; 0x45
  40471e:	e7eb      	b.n	4046f8 <send+0x60>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404720:	f06f 0005 	mvn.w	r0, #5
  404724:	e7f8      	b.n	404718 <send+0x80>
  404726:	f06f 0005 	mvn.w	r0, #5
  40472a:	e7f5      	b.n	404718 <send+0x80>
  40472c:	2040c9e4 	.word	0x2040c9e4
  404730:	00402371 	.word	0x00402371

00404734 <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404734:	2900      	cmp	r1, #0
  404736:	bf18      	it	ne
  404738:	2a00      	cmpne	r2, #0
  40473a:	d044      	beq.n	4047c6 <recv+0x92>
{
  40473c:	b570      	push	{r4, r5, r6, lr}
  40473e:	b086      	sub	sp, #24
  404740:	460e      	mov	r6, r1
  404742:	4615      	mov	r5, r2
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404744:	2800      	cmp	r0, #0
  404746:	db36      	blt.n	4047b6 <recv+0x82>
  404748:	4a20      	ldr	r2, [pc, #128]	; (4047cc <recv+0x98>)
  40474a:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  40474e:	7a92      	ldrb	r2, [r2, #10]
  404750:	b2d2      	uxtb	r2, r2
  404752:	2a01      	cmp	r2, #1
  404754:	d132      	bne.n	4047bc <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  404756:	4c1d      	ldr	r4, [pc, #116]	; (4047cc <recv+0x98>)
  404758:	0101      	lsls	r1, r0, #4
  40475a:	1862      	adds	r2, r4, r1
  40475c:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  40475e:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  404760:	7b12      	ldrb	r2, [r2, #12]
  404762:	2a00      	cmp	r2, #0
  404764:	d12d      	bne.n	4047c2 <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  404766:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  40476a:	2101      	movs	r1, #1
  40476c:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  40476e:	7ad2      	ldrb	r2, [r2, #11]
  404770:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  404772:	2a00      	cmp	r2, #0
  404774:	bf0c      	ite	eq
  404776:	2146      	moveq	r1, #70	; 0x46
  404778:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  40477a:	b9d3      	cbnz	r3, 4047b2 <recv+0x7e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  40477c:	f04f 33ff 	mov.w	r3, #4294967295
  404780:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
  404782:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  404786:	4b11      	ldr	r3, [pc, #68]	; (4047cc <recv+0x98>)
  404788:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  40478c:	88c3      	ldrh	r3, [r0, #6]
  40478e:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  404792:	2300      	movs	r3, #0
  404794:	9302      	str	r3, [sp, #8]
  404796:	9301      	str	r3, [sp, #4]
  404798:	9300      	str	r3, [sp, #0]
  40479a:	2308      	movs	r3, #8
  40479c:	aa04      	add	r2, sp, #16
  40479e:	2002      	movs	r0, #2
  4047a0:	4c0b      	ldr	r4, [pc, #44]	; (4047d0 <recv+0x9c>)
  4047a2:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  4047a4:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  4047a6:	bf0c      	ite	eq
  4047a8:	2000      	moveq	r0, #0
  4047aa:	f06f 000d 	mvnne.w	r0, #13
			}
		}
	}
	return s16Ret;
}
  4047ae:	b006      	add	sp, #24
  4047b0:	bd70      	pop	{r4, r5, r6, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  4047b2:	9304      	str	r3, [sp, #16]
  4047b4:	e7e5      	b.n	404782 <recv+0x4e>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  4047b6:	f06f 0005 	mvn.w	r0, #5
  4047ba:	e7f8      	b.n	4047ae <recv+0x7a>
  4047bc:	f06f 0005 	mvn.w	r0, #5
  4047c0:	e7f5      	b.n	4047ae <recv+0x7a>
		s16Ret = SOCK_ERR_NO_ERROR;
  4047c2:	2000      	movs	r0, #0
  4047c4:	e7f3      	b.n	4047ae <recv+0x7a>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  4047c6:	f06f 0005 	mvn.w	r0, #5
}
  4047ca:	4770      	bx	lr
  4047cc:	2040c9e4 	.word	0x2040c9e4
  4047d0:	00402371 	.word	0x00402371

004047d4 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  4047d4:	b530      	push	{r4, r5, lr}
  4047d6:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  4047d8:	1e04      	subs	r4, r0, #0
  4047da:	db2f      	blt.n	40483c <close+0x68>
  4047dc:	4b1a      	ldr	r3, [pc, #104]	; (404848 <close+0x74>)
  4047de:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  4047e2:	7a9b      	ldrb	r3, [r3, #10]
  4047e4:	b2db      	uxtb	r3, r3
  4047e6:	2b01      	cmp	r3, #1
  4047e8:	d12b      	bne.n	404842 <close+0x6e>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  4047ea:	f88d 4014 	strb.w	r4, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  4047ee:	4b16      	ldr	r3, [pc, #88]	; (404848 <close+0x74>)
  4047f0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  4047f4:	88da      	ldrh	r2, [r3, #6]
  4047f6:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  4047fa:	2200      	movs	r2, #0
  4047fc:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  4047fe:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404800:	7adb      	ldrb	r3, [r3, #11]
  404802:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  404806:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  404808:	9202      	str	r2, [sp, #8]
  40480a:	9201      	str	r2, [sp, #4]
  40480c:	9200      	str	r2, [sp, #0]
  40480e:	f04f 0304 	mov.w	r3, #4
  404812:	aa05      	add	r2, sp, #20
  404814:	bf0c      	ite	eq
  404816:	2149      	moveq	r1, #73	; 0x49
  404818:	214e      	movne	r1, #78	; 0x4e
  40481a:	2002      	movs	r0, #2
  40481c:	4d0b      	ldr	r5, [pc, #44]	; (40484c <close+0x78>)
  40481e:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  404820:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  404822:	bf18      	it	ne
  404824:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  404828:	2210      	movs	r2, #16
  40482a:	2100      	movs	r1, #0
  40482c:	4806      	ldr	r0, [pc, #24]	; (404848 <close+0x74>)
  40482e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404832:	4b07      	ldr	r3, [pc, #28]	; (404850 <close+0x7c>)
  404834:	4798      	blx	r3
	}
	return s8Ret;
}
  404836:	4628      	mov	r0, r5
  404838:	b007      	add	sp, #28
  40483a:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  40483c:	f06f 0505 	mvn.w	r5, #5
  404840:	e7f9      	b.n	404836 <close+0x62>
  404842:	f06f 0505 	mvn.w	r5, #5
  404846:	e7f6      	b.n	404836 <close+0x62>
  404848:	2040c9e4 	.word	0x2040c9e4
  40484c:	00402371 	.word	0x00402371
  404850:	0040220d 	.word	0x0040220d

00404854 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  404854:	b570      	push	{r4, r5, r6, lr}
  404856:	b082      	sub	sp, #8
  404858:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  40485a:	4b2b      	ldr	r3, [pc, #172]	; (404908 <spi_flash_enable+0xb4>)
  40485c:	4798      	blx	r3
  40485e:	f3c0 000b 	ubfx	r0, r0, #0, #12
  404862:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  404866:	d203      	bcs.n	404870 <spi_flash_enable+0x1c>
	sint8 s8Ret = M2M_SUCCESS;
  404868:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  40486a:	4620      	mov	r0, r4
  40486c:	b002      	add	sp, #8
  40486e:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  404870:	a901      	add	r1, sp, #4
  404872:	f241 4010 	movw	r0, #5136	; 0x1410
  404876:	4b25      	ldr	r3, [pc, #148]	; (40490c <spi_flash_enable+0xb8>)
  404878:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  40487a:	4604      	mov	r4, r0
  40487c:	2800      	cmp	r0, #0
  40487e:	d1f4      	bne.n	40486a <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
  404880:	4b23      	ldr	r3, [pc, #140]	; (404910 <spi_flash_enable+0xbc>)
  404882:	9a01      	ldr	r2, [sp, #4]
  404884:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
  404886:	4923      	ldr	r1, [pc, #140]	; (404914 <spi_flash_enable+0xc0>)
  404888:	4319      	orrs	r1, r3
  40488a:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  40488c:	f241 4010 	movw	r0, #5136	; 0x1410
  404890:	4b21      	ldr	r3, [pc, #132]	; (404918 <spi_flash_enable+0xc4>)
  404892:	4798      	blx	r3
		if(enable) {
  404894:	b305      	cbz	r5, 4048d8 <spi_flash_enable+0x84>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  404896:	2100      	movs	r1, #0
  404898:	4820      	ldr	r0, [pc, #128]	; (40491c <spi_flash_enable+0xc8>)
  40489a:	4d1f      	ldr	r5, [pc, #124]	; (404918 <spi_flash_enable+0xc4>)
  40489c:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  40489e:	21ab      	movs	r1, #171	; 0xab
  4048a0:	481f      	ldr	r0, [pc, #124]	; (404920 <spi_flash_enable+0xcc>)
  4048a2:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  4048a4:	2101      	movs	r1, #1
  4048a6:	481f      	ldr	r0, [pc, #124]	; (404924 <spi_flash_enable+0xd0>)
  4048a8:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  4048aa:	2100      	movs	r1, #0
  4048ac:	481e      	ldr	r0, [pc, #120]	; (404928 <spi_flash_enable+0xd4>)
  4048ae:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  4048b0:	2181      	movs	r1, #129	; 0x81
  4048b2:	481e      	ldr	r0, [pc, #120]	; (40492c <spi_flash_enable+0xd8>)
  4048b4:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  4048b6:	4e1e      	ldr	r6, [pc, #120]	; (404930 <spi_flash_enable+0xdc>)
  4048b8:	4d1e      	ldr	r5, [pc, #120]	; (404934 <spi_flash_enable+0xe0>)
  4048ba:	4630      	mov	r0, r6
  4048bc:	47a8      	blx	r5
  4048be:	2801      	cmp	r0, #1
  4048c0:	d1fb      	bne.n	4048ba <spi_flash_enable+0x66>
		u32Val &= ~((0x7777ul) << 12);
  4048c2:	4913      	ldr	r1, [pc, #76]	; (404910 <spi_flash_enable+0xbc>)
  4048c4:	9b01      	ldr	r3, [sp, #4]
  4048c6:	4019      	ands	r1, r3
		u32Val |= ((0x0010ul) << 12);
  4048c8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  4048cc:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  4048ce:	f241 4010 	movw	r0, #5136	; 0x1410
  4048d2:	4b11      	ldr	r3, [pc, #68]	; (404918 <spi_flash_enable+0xc4>)
  4048d4:	4798      	blx	r3
  4048d6:	e7c8      	b.n	40486a <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  4048d8:	2100      	movs	r1, #0
  4048da:	4810      	ldr	r0, [pc, #64]	; (40491c <spi_flash_enable+0xc8>)
  4048dc:	4d0e      	ldr	r5, [pc, #56]	; (404918 <spi_flash_enable+0xc4>)
  4048de:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  4048e0:	21b9      	movs	r1, #185	; 0xb9
  4048e2:	480f      	ldr	r0, [pc, #60]	; (404920 <spi_flash_enable+0xcc>)
  4048e4:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  4048e6:	2101      	movs	r1, #1
  4048e8:	480e      	ldr	r0, [pc, #56]	; (404924 <spi_flash_enable+0xd0>)
  4048ea:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  4048ec:	2100      	movs	r1, #0
  4048ee:	480e      	ldr	r0, [pc, #56]	; (404928 <spi_flash_enable+0xd4>)
  4048f0:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  4048f2:	2181      	movs	r1, #129	; 0x81
  4048f4:	480d      	ldr	r0, [pc, #52]	; (40492c <spi_flash_enable+0xd8>)
  4048f6:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  4048f8:	4e0d      	ldr	r6, [pc, #52]	; (404930 <spi_flash_enable+0xdc>)
  4048fa:	4d0e      	ldr	r5, [pc, #56]	; (404934 <spi_flash_enable+0xe0>)
  4048fc:	4630      	mov	r0, r6
  4048fe:	47a8      	blx	r5
  404900:	2801      	cmp	r0, #1
  404902:	d1fb      	bne.n	4048fc <spi_flash_enable+0xa8>
  404904:	e7dd      	b.n	4048c2 <spi_flash_enable+0x6e>
  404906:	bf00      	nop
  404908:	00403269 	.word	0x00403269
  40490c:	00403565 	.word	0x00403565
  404910:	f8888fff 	.word	0xf8888fff
  404914:	01111000 	.word	0x01111000
  404918:	00403571 	.word	0x00403571
  40491c:	00010208 	.word	0x00010208
  404920:	0001020c 	.word	0x0001020c
  404924:	00010214 	.word	0x00010214
  404928:	0001021c 	.word	0x0001021c
  40492c:	00010204 	.word	0x00010204
  404930:	00010218 	.word	0x00010218
  404934:	00403559 	.word	0x00403559

00404938 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  404938:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40493a:	4810      	ldr	r0, [pc, #64]	; (40497c <sysclk_init+0x44>)
  40493c:	4b10      	ldr	r3, [pc, #64]	; (404980 <sysclk_init+0x48>)
  40493e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  404940:	213e      	movs	r1, #62	; 0x3e
  404942:	2000      	movs	r0, #0
  404944:	4b0f      	ldr	r3, [pc, #60]	; (404984 <sysclk_init+0x4c>)
  404946:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  404948:	4c0f      	ldr	r4, [pc, #60]	; (404988 <sysclk_init+0x50>)
  40494a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40494c:	2800      	cmp	r0, #0
  40494e:	d0fc      	beq.n	40494a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  404950:	4b0e      	ldr	r3, [pc, #56]	; (40498c <sysclk_init+0x54>)
  404952:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  404954:	4a0e      	ldr	r2, [pc, #56]	; (404990 <sysclk_init+0x58>)
  404956:	4b0f      	ldr	r3, [pc, #60]	; (404994 <sysclk_init+0x5c>)
  404958:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40495a:	4c0f      	ldr	r4, [pc, #60]	; (404998 <sysclk_init+0x60>)
  40495c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40495e:	2800      	cmp	r0, #0
  404960:	d0fc      	beq.n	40495c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  404962:	2002      	movs	r0, #2
  404964:	4b0d      	ldr	r3, [pc, #52]	; (40499c <sysclk_init+0x64>)
  404966:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  404968:	2000      	movs	r0, #0
  40496a:	4b0d      	ldr	r3, [pc, #52]	; (4049a0 <sysclk_init+0x68>)
  40496c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40496e:	4b0d      	ldr	r3, [pc, #52]	; (4049a4 <sysclk_init+0x6c>)
  404970:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  404972:	4802      	ldr	r0, [pc, #8]	; (40497c <sysclk_init+0x44>)
  404974:	4b02      	ldr	r3, [pc, #8]	; (404980 <sysclk_init+0x48>)
  404976:	4798      	blx	r3
  404978:	bd10      	pop	{r4, pc}
  40497a:	bf00      	nop
  40497c:	11e1a300 	.word	0x11e1a300
  404980:	004055b5 	.word	0x004055b5
  404984:	0040507d 	.word	0x0040507d
  404988:	004050d1 	.word	0x004050d1
  40498c:	004050e1 	.word	0x004050e1
  404990:	20183f01 	.word	0x20183f01
  404994:	400e0600 	.word	0x400e0600
  404998:	004050f1 	.word	0x004050f1
  40499c:	00404fe1 	.word	0x00404fe1
  4049a0:	00405019 	.word	0x00405019
  4049a4:	004054a9 	.word	0x004054a9

004049a8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4049a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4049ac:	b980      	cbnz	r0, 4049d0 <_read+0x28>
  4049ae:	460c      	mov	r4, r1
  4049b0:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4049b2:	2a00      	cmp	r2, #0
  4049b4:	dd0f      	ble.n	4049d6 <_read+0x2e>
  4049b6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4049b8:	4e08      	ldr	r6, [pc, #32]	; (4049dc <_read+0x34>)
  4049ba:	4d09      	ldr	r5, [pc, #36]	; (4049e0 <_read+0x38>)
  4049bc:	6830      	ldr	r0, [r6, #0]
  4049be:	4621      	mov	r1, r4
  4049c0:	682b      	ldr	r3, [r5, #0]
  4049c2:	4798      	blx	r3
		ptr++;
  4049c4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4049c6:	42bc      	cmp	r4, r7
  4049c8:	d1f8      	bne.n	4049bc <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4049ca:	4640      	mov	r0, r8
  4049cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4049d0:	f04f 38ff 	mov.w	r8, #4294967295
  4049d4:	e7f9      	b.n	4049ca <_read+0x22>
	for (; len > 0; --len) {
  4049d6:	4680      	mov	r8, r0
  4049d8:	e7f7      	b.n	4049ca <_read+0x22>
  4049da:	bf00      	nop
  4049dc:	2040caa8 	.word	0x2040caa8
  4049e0:	2040caa0 	.word	0x2040caa0

004049e4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4049e4:	3801      	subs	r0, #1
  4049e6:	2802      	cmp	r0, #2
  4049e8:	d815      	bhi.n	404a16 <_write+0x32>
{
  4049ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4049ee:	460e      	mov	r6, r1
  4049f0:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4049f2:	b19a      	cbz	r2, 404a1c <_write+0x38>
  4049f4:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4049f6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 404a30 <_write+0x4c>
  4049fa:	4f0c      	ldr	r7, [pc, #48]	; (404a2c <_write+0x48>)
  4049fc:	f8d8 0000 	ldr.w	r0, [r8]
  404a00:	f815 1b01 	ldrb.w	r1, [r5], #1
  404a04:	683b      	ldr	r3, [r7, #0]
  404a06:	4798      	blx	r3
  404a08:	2800      	cmp	r0, #0
  404a0a:	db0a      	blt.n	404a22 <_write+0x3e>
  404a0c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  404a0e:	3c01      	subs	r4, #1
  404a10:	d1f4      	bne.n	4049fc <_write+0x18>
  404a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  404a16:	f04f 30ff 	mov.w	r0, #4294967295
  404a1a:	4770      	bx	lr
	for (; len != 0; --len) {
  404a1c:	4610      	mov	r0, r2
  404a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  404a22:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  404a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404a2a:	bf00      	nop
  404a2c:	2040caa4 	.word	0x2040caa4
  404a30:	2040caa8 	.word	0x2040caa8

00404a34 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  404a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  404a36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  404a3a:	4b5c      	ldr	r3, [pc, #368]	; (404bac <board_init+0x178>)
  404a3c:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  404a3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404a42:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  404a46:	4b5a      	ldr	r3, [pc, #360]	; (404bb0 <board_init+0x17c>)
  404a48:	2200      	movs	r2, #0
  404a4a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  404a4e:	695a      	ldr	r2, [r3, #20]
  404a50:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  404a54:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  404a56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404a5a:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  404a5e:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  404a62:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  404a66:	f007 0007 	and.w	r0, r7, #7
  404a6a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  404a6c:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  404a70:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  404a74:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  404a78:	f3bf 8f4f 	dsb	sy
  404a7c:	f04f 34ff 	mov.w	r4, #4294967295
  404a80:	fa04 fc00 	lsl.w	ip, r4, r0
  404a84:	fa06 f000 	lsl.w	r0, r6, r0
  404a88:	fa04 f40e 	lsl.w	r4, r4, lr
  404a8c:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  404a90:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  404a92:	463a      	mov	r2, r7
  404a94:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  404a96:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  404a9a:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  404a9e:	3a01      	subs	r2, #1
  404aa0:	4423      	add	r3, r4
  404aa2:	f1b2 3fff 	cmp.w	r2, #4294967295
  404aa6:	d1f6      	bne.n	404a96 <board_init+0x62>
        } while(sets--);
  404aa8:	3e01      	subs	r6, #1
  404aaa:	4460      	add	r0, ip
  404aac:	f1b6 3fff 	cmp.w	r6, #4294967295
  404ab0:	d1ef      	bne.n	404a92 <board_init+0x5e>
  404ab2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  404ab6:	4b3e      	ldr	r3, [pc, #248]	; (404bb0 <board_init+0x17c>)
  404ab8:	695a      	ldr	r2, [r3, #20]
  404aba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  404abe:	615a      	str	r2, [r3, #20]
  404ac0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404ac4:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  404ac8:	4a3a      	ldr	r2, [pc, #232]	; (404bb4 <board_init+0x180>)
  404aca:	493b      	ldr	r1, [pc, #236]	; (404bb8 <board_init+0x184>)
  404acc:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  404ace:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  404ad2:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  404ad4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404ad8:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  404adc:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  404ae0:	f022 0201 	bic.w	r2, r2, #1
  404ae4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  404ae8:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  404aec:	f022 0201 	bic.w	r2, r2, #1
  404af0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  404af4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404af8:	f3bf 8f6f 	isb	sy
  404afc:	200a      	movs	r0, #10
  404afe:	4c2f      	ldr	r4, [pc, #188]	; (404bbc <board_init+0x188>)
  404b00:	47a0      	blx	r4
  404b02:	200b      	movs	r0, #11
  404b04:	47a0      	blx	r4
  404b06:	200c      	movs	r0, #12
  404b08:	47a0      	blx	r4
  404b0a:	2010      	movs	r0, #16
  404b0c:	47a0      	blx	r4
  404b0e:	2011      	movs	r0, #17
  404b10:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404b12:	4b2b      	ldr	r3, [pc, #172]	; (404bc0 <board_init+0x18c>)
  404b14:	f44f 7280 	mov.w	r2, #256	; 0x100
  404b18:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404b1a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404b1e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  404b20:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  404b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
  404b28:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404b2a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  404b2e:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  404b30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404b34:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  404b36:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  404b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  404b3c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404b3e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  404b42:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404b44:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404b46:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  404b4a:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  404b4c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  404b50:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  404b54:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  404b58:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  404b5c:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404b5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404b62:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404b64:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404b66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404b6a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404b6c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  404b70:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404b72:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404b74:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  404b78:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404b7a:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  404b7c:	4a11      	ldr	r2, [pc, #68]	; (404bc4 <board_init+0x190>)
  404b7e:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  404b82:	f043 0310 	orr.w	r3, r3, #16
  404b86:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  404b8a:	4b0f      	ldr	r3, [pc, #60]	; (404bc8 <board_init+0x194>)
  404b8c:	2210      	movs	r2, #16
  404b8e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404b90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404b94:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404b96:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  404b9c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404b9e:	4311      	orrs	r1, r2
  404ba0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  404ba2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404ba4:	4311      	orrs	r1, r2
  404ba6:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404ba8:	605a      	str	r2, [r3, #4]
  404baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404bac:	400e1850 	.word	0x400e1850
  404bb0:	e000ed00 	.word	0xe000ed00
  404bb4:	400e0c00 	.word	0x400e0c00
  404bb8:	5a00080c 	.word	0x5a00080c
  404bbc:	00405101 	.word	0x00405101
  404bc0:	400e1200 	.word	0x400e1200
  404bc4:	40088000 	.word	0x40088000
  404bc8:	400e1000 	.word	0x400e1000

00404bcc <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  404bcc:	b90a      	cbnz	r2, 404bd2 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  404bce:	6601      	str	r1, [r0, #96]	; 0x60
  404bd0:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  404bd2:	6641      	str	r1, [r0, #100]	; 0x64
  404bd4:	4770      	bx	lr

00404bd6 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  404bd6:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  404bd8:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  404bdc:	d03a      	beq.n	404c54 <pio_set_peripheral+0x7e>
  404bde:	d813      	bhi.n	404c08 <pio_set_peripheral+0x32>
  404be0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  404be4:	d025      	beq.n	404c32 <pio_set_peripheral+0x5c>
  404be6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  404bea:	d10a      	bne.n	404c02 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404bec:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  404bee:	4313      	orrs	r3, r2
  404bf0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  404bf2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  404bf4:	6f41      	ldr	r1, [r0, #116]	; 0x74
  404bf6:	400b      	ands	r3, r1
  404bf8:	ea23 0302 	bic.w	r3, r3, r2
  404bfc:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  404bfe:	6042      	str	r2, [r0, #4]
  404c00:	4770      	bx	lr
	switch (ul_type) {
  404c02:	2900      	cmp	r1, #0
  404c04:	d1fb      	bne.n	404bfe <pio_set_peripheral+0x28>
  404c06:	4770      	bx	lr
  404c08:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  404c0c:	d021      	beq.n	404c52 <pio_set_peripheral+0x7c>
  404c0e:	d809      	bhi.n	404c24 <pio_set_peripheral+0x4e>
  404c10:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  404c14:	d1f3      	bne.n	404bfe <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  404c16:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  404c18:	4313      	orrs	r3, r2
  404c1a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  404c1c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  404c1e:	4313      	orrs	r3, r2
  404c20:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  404c22:	e7ec      	b.n	404bfe <pio_set_peripheral+0x28>
	switch (ul_type) {
  404c24:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  404c28:	d013      	beq.n	404c52 <pio_set_peripheral+0x7c>
  404c2a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  404c2e:	d010      	beq.n	404c52 <pio_set_peripheral+0x7c>
  404c30:	e7e5      	b.n	404bfe <pio_set_peripheral+0x28>
{
  404c32:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  404c34:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  404c36:	6f04      	ldr	r4, [r0, #112]	; 0x70
  404c38:	43d3      	mvns	r3, r2
  404c3a:	4021      	ands	r1, r4
  404c3c:	461c      	mov	r4, r3
  404c3e:	4019      	ands	r1, r3
  404c40:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  404c42:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  404c44:	6f41      	ldr	r1, [r0, #116]	; 0x74
  404c46:	400b      	ands	r3, r1
  404c48:	4023      	ands	r3, r4
  404c4a:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  404c4c:	6042      	str	r2, [r0, #4]
}
  404c4e:	f85d 4b04 	ldr.w	r4, [sp], #4
  404c52:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  404c54:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  404c56:	6f01      	ldr	r1, [r0, #112]	; 0x70
  404c58:	400b      	ands	r3, r1
  404c5a:	ea23 0302 	bic.w	r3, r3, r2
  404c5e:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  404c60:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  404c62:	4313      	orrs	r3, r2
  404c64:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  404c66:	e7ca      	b.n	404bfe <pio_set_peripheral+0x28>

00404c68 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  404c68:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  404c6a:	f012 0f01 	tst.w	r2, #1
  404c6e:	d10d      	bne.n	404c8c <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  404c70:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  404c72:	f012 0f0a 	tst.w	r2, #10
  404c76:	d00b      	beq.n	404c90 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  404c78:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  404c7a:	f012 0f02 	tst.w	r2, #2
  404c7e:	d109      	bne.n	404c94 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  404c80:	f012 0f08 	tst.w	r2, #8
  404c84:	d008      	beq.n	404c98 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  404c86:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  404c8a:	e005      	b.n	404c98 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  404c8c:	6641      	str	r1, [r0, #100]	; 0x64
  404c8e:	e7f0      	b.n	404c72 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  404c90:	6241      	str	r1, [r0, #36]	; 0x24
  404c92:	e7f2      	b.n	404c7a <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  404c94:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  404c98:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  404c9a:	6001      	str	r1, [r0, #0]
  404c9c:	4770      	bx	lr

00404c9e <pio_set_output>:
{
  404c9e:	b410      	push	{r4}
  404ca0:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  404ca2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  404ca4:	b94c      	cbnz	r4, 404cba <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  404ca6:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  404ca8:	b14b      	cbz	r3, 404cbe <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  404caa:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  404cac:	b94a      	cbnz	r2, 404cc2 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  404cae:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  404cb0:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  404cb2:	6001      	str	r1, [r0, #0]
}
  404cb4:	f85d 4b04 	ldr.w	r4, [sp], #4
  404cb8:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  404cba:	6641      	str	r1, [r0, #100]	; 0x64
  404cbc:	e7f4      	b.n	404ca8 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  404cbe:	6541      	str	r1, [r0, #84]	; 0x54
  404cc0:	e7f4      	b.n	404cac <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  404cc2:	6301      	str	r1, [r0, #48]	; 0x30
  404cc4:	e7f4      	b.n	404cb0 <pio_set_output+0x12>

00404cc6 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  404cc6:	f012 0f10 	tst.w	r2, #16
  404cca:	d012      	beq.n	404cf2 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  404ccc:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  404cd0:	f012 0f20 	tst.w	r2, #32
  404cd4:	d007      	beq.n	404ce6 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  404cd6:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  404cda:	f012 0f40 	tst.w	r2, #64	; 0x40
  404cde:	d005      	beq.n	404cec <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  404ce0:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  404ce4:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  404ce6:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  404cea:	e7f6      	b.n	404cda <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  404cec:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  404cf0:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  404cf2:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  404cf6:	4770      	bx	lr

00404cf8 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  404cf8:	6401      	str	r1, [r0, #64]	; 0x40
  404cfa:	4770      	bx	lr

00404cfc <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
  404cfc:	6441      	str	r1, [r0, #68]	; 0x44
  404cfe:	4770      	bx	lr

00404d00 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  404d00:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  404d02:	4770      	bx	lr

00404d04 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  404d04:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  404d06:	4770      	bx	lr

00404d08 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  404d08:	b570      	push	{r4, r5, r6, lr}
  404d0a:	b082      	sub	sp, #8
  404d0c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  404d0e:	4c46      	ldr	r4, [pc, #280]	; (404e28 <pio_configure_pin+0x120>)
  404d10:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  404d14:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  404d16:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  404d1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  404d1e:	d059      	beq.n	404dd4 <pio_configure_pin+0xcc>
  404d20:	d80a      	bhi.n	404d38 <pio_configure_pin+0x30>
  404d22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  404d26:	d02f      	beq.n	404d88 <pio_configure_pin+0x80>
  404d28:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  404d2c:	d03f      	beq.n	404dae <pio_configure_pin+0xa6>
  404d2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  404d32:	d016      	beq.n	404d62 <pio_configure_pin+0x5a>
		return 0;
  404d34:	2000      	movs	r0, #0
  404d36:	e012      	b.n	404d5e <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  404d38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  404d3c:	d05d      	beq.n	404dfa <pio_configure_pin+0xf2>
  404d3e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  404d42:	d05a      	beq.n	404dfa <pio_configure_pin+0xf2>
  404d44:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  404d48:	d1f4      	bne.n	404d34 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  404d4a:	f000 011f 	and.w	r1, r0, #31
  404d4e:	2601      	movs	r6, #1
  404d50:	462a      	mov	r2, r5
  404d52:	fa06 f101 	lsl.w	r1, r6, r1
  404d56:	4620      	mov	r0, r4
  404d58:	4b34      	ldr	r3, [pc, #208]	; (404e2c <pio_configure_pin+0x124>)
  404d5a:	4798      	blx	r3
	return 1;
  404d5c:	4630      	mov	r0, r6
}
  404d5e:	b002      	add	sp, #8
  404d60:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  404d62:	f000 001f 	and.w	r0, r0, #31
  404d66:	2601      	movs	r6, #1
  404d68:	4086      	lsls	r6, r0
  404d6a:	4632      	mov	r2, r6
  404d6c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404d70:	4620      	mov	r0, r4
  404d72:	4b2f      	ldr	r3, [pc, #188]	; (404e30 <pio_configure_pin+0x128>)
  404d74:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404d76:	f015 0f01 	tst.w	r5, #1
  404d7a:	d102      	bne.n	404d82 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  404d7c:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  404d7e:	2001      	movs	r0, #1
  404d80:	e7ed      	b.n	404d5e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  404d82:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  404d84:	2001      	movs	r0, #1
  404d86:	e7ea      	b.n	404d5e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  404d88:	f000 001f 	and.w	r0, r0, #31
  404d8c:	2601      	movs	r6, #1
  404d8e:	4086      	lsls	r6, r0
  404d90:	4632      	mov	r2, r6
  404d92:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  404d96:	4620      	mov	r0, r4
  404d98:	4b25      	ldr	r3, [pc, #148]	; (404e30 <pio_configure_pin+0x128>)
  404d9a:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404d9c:	f015 0f01 	tst.w	r5, #1
  404da0:	d102      	bne.n	404da8 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  404da2:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  404da4:	2001      	movs	r0, #1
  404da6:	e7da      	b.n	404d5e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  404da8:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  404daa:	2001      	movs	r0, #1
  404dac:	e7d7      	b.n	404d5e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  404dae:	f000 001f 	and.w	r0, r0, #31
  404db2:	2601      	movs	r6, #1
  404db4:	4086      	lsls	r6, r0
  404db6:	4632      	mov	r2, r6
  404db8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404dbc:	4620      	mov	r0, r4
  404dbe:	4b1c      	ldr	r3, [pc, #112]	; (404e30 <pio_configure_pin+0x128>)
  404dc0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404dc2:	f015 0f01 	tst.w	r5, #1
  404dc6:	d102      	bne.n	404dce <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  404dc8:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  404dca:	2001      	movs	r0, #1
  404dcc:	e7c7      	b.n	404d5e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  404dce:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  404dd0:	2001      	movs	r0, #1
  404dd2:	e7c4      	b.n	404d5e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  404dd4:	f000 001f 	and.w	r0, r0, #31
  404dd8:	2601      	movs	r6, #1
  404dda:	4086      	lsls	r6, r0
  404ddc:	4632      	mov	r2, r6
  404dde:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  404de2:	4620      	mov	r0, r4
  404de4:	4b12      	ldr	r3, [pc, #72]	; (404e30 <pio_configure_pin+0x128>)
  404de6:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404de8:	f015 0f01 	tst.w	r5, #1
  404dec:	d102      	bne.n	404df4 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  404dee:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  404df0:	2001      	movs	r0, #1
  404df2:	e7b4      	b.n	404d5e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  404df4:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  404df6:	2001      	movs	r0, #1
  404df8:	e7b1      	b.n	404d5e <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  404dfa:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  404dfe:	f000 011f 	and.w	r1, r0, #31
  404e02:	2601      	movs	r6, #1
  404e04:	ea05 0306 	and.w	r3, r5, r6
  404e08:	9300      	str	r3, [sp, #0]
  404e0a:	f3c5 0380 	ubfx	r3, r5, #2, #1
  404e0e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  404e12:	bf14      	ite	ne
  404e14:	2200      	movne	r2, #0
  404e16:	2201      	moveq	r2, #1
  404e18:	fa06 f101 	lsl.w	r1, r6, r1
  404e1c:	4620      	mov	r0, r4
  404e1e:	4c05      	ldr	r4, [pc, #20]	; (404e34 <pio_configure_pin+0x12c>)
  404e20:	47a0      	blx	r4
	return 1;
  404e22:	4630      	mov	r0, r6
		break;
  404e24:	e79b      	b.n	404d5e <pio_configure_pin+0x56>
  404e26:	bf00      	nop
  404e28:	00200707 	.word	0x00200707
  404e2c:	00404c69 	.word	0x00404c69
  404e30:	00404bd7 	.word	0x00404bd7
  404e34:	00404c9f 	.word	0x00404c9f

00404e38 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  404e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404e3c:	4604      	mov	r4, r0
  404e3e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  404e40:	4b0e      	ldr	r3, [pc, #56]	; (404e7c <pio_handler_process+0x44>)
  404e42:	4798      	blx	r3
  404e44:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  404e46:	4620      	mov	r0, r4
  404e48:	4b0d      	ldr	r3, [pc, #52]	; (404e80 <pio_handler_process+0x48>)
  404e4a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  404e4c:	4005      	ands	r5, r0
  404e4e:	d013      	beq.n	404e78 <pio_handler_process+0x40>
  404e50:	4c0c      	ldr	r4, [pc, #48]	; (404e84 <pio_handler_process+0x4c>)
  404e52:	f104 0660 	add.w	r6, r4, #96	; 0x60
  404e56:	e003      	b.n	404e60 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  404e58:	42b4      	cmp	r4, r6
  404e5a:	d00d      	beq.n	404e78 <pio_handler_process+0x40>
  404e5c:	3410      	adds	r4, #16
		while (status != 0) {
  404e5e:	b15d      	cbz	r5, 404e78 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  404e60:	6820      	ldr	r0, [r4, #0]
  404e62:	4540      	cmp	r0, r8
  404e64:	d1f8      	bne.n	404e58 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  404e66:	6861      	ldr	r1, [r4, #4]
  404e68:	4229      	tst	r1, r5
  404e6a:	d0f5      	beq.n	404e58 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  404e6c:	68e3      	ldr	r3, [r4, #12]
  404e6e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  404e70:	6863      	ldr	r3, [r4, #4]
  404e72:	ea25 0503 	bic.w	r5, r5, r3
  404e76:	e7ef      	b.n	404e58 <pio_handler_process+0x20>
  404e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404e7c:	00404d01 	.word	0x00404d01
  404e80:	00404d05 	.word	0x00404d05
  404e84:	2040c36c 	.word	0x2040c36c

00404e88 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  404e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  404e8a:	4c18      	ldr	r4, [pc, #96]	; (404eec <pio_handler_set+0x64>)
  404e8c:	6826      	ldr	r6, [r4, #0]
  404e8e:	2e06      	cmp	r6, #6
  404e90:	d82a      	bhi.n	404ee8 <pio_handler_set+0x60>
  404e92:	f04f 0c00 	mov.w	ip, #0
  404e96:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  404e98:	4f15      	ldr	r7, [pc, #84]	; (404ef0 <pio_handler_set+0x68>)
  404e9a:	e004      	b.n	404ea6 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  404e9c:	3401      	adds	r4, #1
  404e9e:	b2e4      	uxtb	r4, r4
  404ea0:	46a4      	mov	ip, r4
  404ea2:	42a6      	cmp	r6, r4
  404ea4:	d309      	bcc.n	404eba <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  404ea6:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  404ea8:	0125      	lsls	r5, r4, #4
  404eaa:	597d      	ldr	r5, [r7, r5]
  404eac:	428d      	cmp	r5, r1
  404eae:	d1f5      	bne.n	404e9c <pio_handler_set+0x14>
  404eb0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  404eb4:	686d      	ldr	r5, [r5, #4]
  404eb6:	4295      	cmp	r5, r2
  404eb8:	d1f0      	bne.n	404e9c <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  404eba:	4d0d      	ldr	r5, [pc, #52]	; (404ef0 <pio_handler_set+0x68>)
  404ebc:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  404ec0:	eb05 040e 	add.w	r4, r5, lr
  404ec4:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  404ec8:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  404eca:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  404ecc:	9906      	ldr	r1, [sp, #24]
  404ece:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  404ed0:	3601      	adds	r6, #1
  404ed2:	4566      	cmp	r6, ip
  404ed4:	d005      	beq.n	404ee2 <pio_handler_set+0x5a>
  404ed6:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  404ed8:	461a      	mov	r2, r3
  404eda:	4b06      	ldr	r3, [pc, #24]	; (404ef4 <pio_handler_set+0x6c>)
  404edc:	4798      	blx	r3

	return 0;
  404ede:	2000      	movs	r0, #0
  404ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  404ee2:	4902      	ldr	r1, [pc, #8]	; (404eec <pio_handler_set+0x64>)
  404ee4:	600e      	str	r6, [r1, #0]
  404ee6:	e7f6      	b.n	404ed6 <pio_handler_set+0x4e>
		return 1;
  404ee8:	2001      	movs	r0, #1
}
  404eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404eec:	2040c3dc 	.word	0x2040c3dc
  404ef0:	2040c36c 	.word	0x2040c36c
  404ef4:	00404cc7 	.word	0x00404cc7

00404ef8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  404ef8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  404efa:	210a      	movs	r1, #10
  404efc:	4801      	ldr	r0, [pc, #4]	; (404f04 <PIOA_Handler+0xc>)
  404efe:	4b02      	ldr	r3, [pc, #8]	; (404f08 <PIOA_Handler+0x10>)
  404f00:	4798      	blx	r3
  404f02:	bd08      	pop	{r3, pc}
  404f04:	400e0e00 	.word	0x400e0e00
  404f08:	00404e39 	.word	0x00404e39

00404f0c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  404f0c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  404f0e:	210b      	movs	r1, #11
  404f10:	4801      	ldr	r0, [pc, #4]	; (404f18 <PIOB_Handler+0xc>)
  404f12:	4b02      	ldr	r3, [pc, #8]	; (404f1c <PIOB_Handler+0x10>)
  404f14:	4798      	blx	r3
  404f16:	bd08      	pop	{r3, pc}
  404f18:	400e1000 	.word	0x400e1000
  404f1c:	00404e39 	.word	0x00404e39

00404f20 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  404f20:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  404f22:	210c      	movs	r1, #12
  404f24:	4801      	ldr	r0, [pc, #4]	; (404f2c <PIOC_Handler+0xc>)
  404f26:	4b02      	ldr	r3, [pc, #8]	; (404f30 <PIOC_Handler+0x10>)
  404f28:	4798      	blx	r3
  404f2a:	bd08      	pop	{r3, pc}
  404f2c:	400e1200 	.word	0x400e1200
  404f30:	00404e39 	.word	0x00404e39

00404f34 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  404f34:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  404f36:	2110      	movs	r1, #16
  404f38:	4801      	ldr	r0, [pc, #4]	; (404f40 <PIOD_Handler+0xc>)
  404f3a:	4b02      	ldr	r3, [pc, #8]	; (404f44 <PIOD_Handler+0x10>)
  404f3c:	4798      	blx	r3
  404f3e:	bd08      	pop	{r3, pc}
  404f40:	400e1400 	.word	0x400e1400
  404f44:	00404e39 	.word	0x00404e39

00404f48 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  404f48:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  404f4a:	2111      	movs	r1, #17
  404f4c:	4801      	ldr	r0, [pc, #4]	; (404f54 <PIOE_Handler+0xc>)
  404f4e:	4b02      	ldr	r3, [pc, #8]	; (404f58 <PIOE_Handler+0x10>)
  404f50:	4798      	blx	r3
  404f52:	bd08      	pop	{r3, pc}
  404f54:	400e1600 	.word	0x400e1600
  404f58:	00404e39 	.word	0x00404e39

00404f5c <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  404f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404f5e:	4606      	mov	r6, r0
  404f60:	460d      	mov	r5, r1
  404f62:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  404f64:	4b17      	ldr	r3, [pc, #92]	; (404fc4 <pio_handler_set_priority+0x68>)
  404f66:	4798      	blx	r3
  404f68:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  404f6a:	f04f 31ff 	mov.w	r1, #4294967295
  404f6e:	4630      	mov	r0, r6
  404f70:	4b15      	ldr	r3, [pc, #84]	; (404fc8 <pio_handler_set_priority+0x6c>)
  404f72:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  404f74:	4630      	mov	r0, r6
  404f76:	4b15      	ldr	r3, [pc, #84]	; (404fcc <pio_handler_set_priority+0x70>)
  404f78:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  404f7a:	fa5f fe85 	uxtb.w	lr, r5
  404f7e:	f00e 031f 	and.w	r3, lr, #31
  404f82:	2201      	movs	r2, #1
  404f84:	fa02 f303 	lsl.w	r3, r2, r3
  404f88:	0968      	lsrs	r0, r5, #5
  404f8a:	4911      	ldr	r1, [pc, #68]	; (404fd0 <pio_handler_set_priority+0x74>)
  404f8c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  404f90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  404f94:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  if(IRQn < 0) {
  404f98:	2d00      	cmp	r5, #0
  404f9a:	db0a      	blt.n	404fb2 <pio_handler_set_priority+0x56>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  404f9c:	0164      	lsls	r4, r4, #5
  404f9e:	b2e4      	uxtb	r4, r4
  404fa0:	4a0c      	ldr	r2, [pc, #48]	; (404fd4 <pio_handler_set_priority+0x78>)
  404fa2:	5554      	strb	r4, [r2, r5]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404fa4:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  404fa8:	4639      	mov	r1, r7
  404faa:	4630      	mov	r0, r6
  404fac:	4b0a      	ldr	r3, [pc, #40]	; (404fd8 <pio_handler_set_priority+0x7c>)
  404fae:	4798      	blx	r3
  404fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  404fb2:	f00e 0e0f 	and.w	lr, lr, #15
  404fb6:	0164      	lsls	r4, r4, #5
  404fb8:	b2e4      	uxtb	r4, r4
  404fba:	4a08      	ldr	r2, [pc, #32]	; (404fdc <pio_handler_set_priority+0x80>)
  404fbc:	f802 400e 	strb.w	r4, [r2, lr]
  404fc0:	e7f0      	b.n	404fa4 <pio_handler_set_priority+0x48>
  404fc2:	bf00      	nop
  404fc4:	00404d05 	.word	0x00404d05
  404fc8:	00404cfd 	.word	0x00404cfd
  404fcc:	00404d01 	.word	0x00404d01
  404fd0:	e000e100 	.word	0xe000e100
  404fd4:	e000e400 	.word	0xe000e400
  404fd8:	00404cf9 	.word	0x00404cf9
  404fdc:	e000ed14 	.word	0xe000ed14

00404fe0 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  404fe0:	2803      	cmp	r0, #3
  404fe2:	d011      	beq.n	405008 <pmc_mck_set_division+0x28>
  404fe4:	2804      	cmp	r0, #4
  404fe6:	d012      	beq.n	40500e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  404fe8:	2802      	cmp	r0, #2
  404fea:	bf0c      	ite	eq
  404fec:	f44f 7180 	moveq.w	r1, #256	; 0x100
  404ff0:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  404ff2:	4a08      	ldr	r2, [pc, #32]	; (405014 <pmc_mck_set_division+0x34>)
  404ff4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  404ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  404ffa:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  404ffc:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  404ffe:	6e93      	ldr	r3, [r2, #104]	; 0x68
  405000:	f013 0f08 	tst.w	r3, #8
  405004:	d0fb      	beq.n	404ffe <pmc_mck_set_division+0x1e>
}
  405006:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  405008:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40500c:	e7f1      	b.n	404ff2 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40500e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  405012:	e7ee      	b.n	404ff2 <pmc_mck_set_division+0x12>
  405014:	400e0600 	.word	0x400e0600

00405018 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  405018:	4a17      	ldr	r2, [pc, #92]	; (405078 <pmc_switch_mck_to_pllack+0x60>)
  40501a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40501c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  405020:	4318      	orrs	r0, r3
  405022:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405024:	6e93      	ldr	r3, [r2, #104]	; 0x68
  405026:	f013 0f08 	tst.w	r3, #8
  40502a:	d10a      	bne.n	405042 <pmc_switch_mck_to_pllack+0x2a>
  40502c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  405030:	4911      	ldr	r1, [pc, #68]	; (405078 <pmc_switch_mck_to_pllack+0x60>)
  405032:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  405034:	f012 0f08 	tst.w	r2, #8
  405038:	d103      	bne.n	405042 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40503a:	3b01      	subs	r3, #1
  40503c:	d1f9      	bne.n	405032 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40503e:	2001      	movs	r0, #1
  405040:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  405042:	4a0d      	ldr	r2, [pc, #52]	; (405078 <pmc_switch_mck_to_pllack+0x60>)
  405044:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405046:	f023 0303 	bic.w	r3, r3, #3
  40504a:	f043 0302 	orr.w	r3, r3, #2
  40504e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405050:	6e93      	ldr	r3, [r2, #104]	; 0x68
  405052:	f013 0f08 	tst.w	r3, #8
  405056:	d10a      	bne.n	40506e <pmc_switch_mck_to_pllack+0x56>
  405058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40505c:	4906      	ldr	r1, [pc, #24]	; (405078 <pmc_switch_mck_to_pllack+0x60>)
  40505e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  405060:	f012 0f08 	tst.w	r2, #8
  405064:	d105      	bne.n	405072 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  405066:	3b01      	subs	r3, #1
  405068:	d1f9      	bne.n	40505e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40506a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40506c:	4770      	bx	lr
	return 0;
  40506e:	2000      	movs	r0, #0
  405070:	4770      	bx	lr
  405072:	2000      	movs	r0, #0
  405074:	4770      	bx	lr
  405076:	bf00      	nop
  405078:	400e0600 	.word	0x400e0600

0040507c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40507c:	b9a0      	cbnz	r0, 4050a8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40507e:	480e      	ldr	r0, [pc, #56]	; (4050b8 <pmc_switch_mainck_to_xtal+0x3c>)
  405080:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  405082:	0209      	lsls	r1, r1, #8
  405084:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  405086:	4a0d      	ldr	r2, [pc, #52]	; (4050bc <pmc_switch_mainck_to_xtal+0x40>)
  405088:	401a      	ands	r2, r3
  40508a:	4b0d      	ldr	r3, [pc, #52]	; (4050c0 <pmc_switch_mainck_to_xtal+0x44>)
  40508c:	4313      	orrs	r3, r2
  40508e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  405090:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  405092:	4602      	mov	r2, r0
  405094:	6e93      	ldr	r3, [r2, #104]	; 0x68
  405096:	f013 0f01 	tst.w	r3, #1
  40509a:	d0fb      	beq.n	405094 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40509c:	4a06      	ldr	r2, [pc, #24]	; (4050b8 <pmc_switch_mainck_to_xtal+0x3c>)
  40509e:	6a11      	ldr	r1, [r2, #32]
  4050a0:	4b08      	ldr	r3, [pc, #32]	; (4050c4 <pmc_switch_mainck_to_xtal+0x48>)
  4050a2:	430b      	orrs	r3, r1
  4050a4:	6213      	str	r3, [r2, #32]
  4050a6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4050a8:	4903      	ldr	r1, [pc, #12]	; (4050b8 <pmc_switch_mainck_to_xtal+0x3c>)
  4050aa:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4050ac:	4a06      	ldr	r2, [pc, #24]	; (4050c8 <pmc_switch_mainck_to_xtal+0x4c>)
  4050ae:	401a      	ands	r2, r3
  4050b0:	4b06      	ldr	r3, [pc, #24]	; (4050cc <pmc_switch_mainck_to_xtal+0x50>)
  4050b2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4050b4:	620b      	str	r3, [r1, #32]
  4050b6:	4770      	bx	lr
  4050b8:	400e0600 	.word	0x400e0600
  4050bc:	ffc8fffc 	.word	0xffc8fffc
  4050c0:	00370001 	.word	0x00370001
  4050c4:	01370000 	.word	0x01370000
  4050c8:	fec8fffc 	.word	0xfec8fffc
  4050cc:	01370002 	.word	0x01370002

004050d0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4050d0:	4b02      	ldr	r3, [pc, #8]	; (4050dc <pmc_osc_is_ready_mainck+0xc>)
  4050d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4050d4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4050d8:	4770      	bx	lr
  4050da:	bf00      	nop
  4050dc:	400e0600 	.word	0x400e0600

004050e0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4050e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4050e4:	4b01      	ldr	r3, [pc, #4]	; (4050ec <pmc_disable_pllack+0xc>)
  4050e6:	629a      	str	r2, [r3, #40]	; 0x28
  4050e8:	4770      	bx	lr
  4050ea:	bf00      	nop
  4050ec:	400e0600 	.word	0x400e0600

004050f0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4050f0:	4b02      	ldr	r3, [pc, #8]	; (4050fc <pmc_is_locked_pllack+0xc>)
  4050f2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4050f4:	f000 0002 	and.w	r0, r0, #2
  4050f8:	4770      	bx	lr
  4050fa:	bf00      	nop
  4050fc:	400e0600 	.word	0x400e0600

00405100 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  405100:	283f      	cmp	r0, #63	; 0x3f
  405102:	d81e      	bhi.n	405142 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  405104:	281f      	cmp	r0, #31
  405106:	d80c      	bhi.n	405122 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  405108:	4b11      	ldr	r3, [pc, #68]	; (405150 <pmc_enable_periph_clk+0x50>)
  40510a:	699a      	ldr	r2, [r3, #24]
  40510c:	2301      	movs	r3, #1
  40510e:	4083      	lsls	r3, r0
  405110:	4393      	bics	r3, r2
  405112:	d018      	beq.n	405146 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  405114:	2301      	movs	r3, #1
  405116:	fa03 f000 	lsl.w	r0, r3, r0
  40511a:	4b0d      	ldr	r3, [pc, #52]	; (405150 <pmc_enable_periph_clk+0x50>)
  40511c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40511e:	2000      	movs	r0, #0
  405120:	4770      	bx	lr
		ul_id -= 32;
  405122:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  405124:	4b0a      	ldr	r3, [pc, #40]	; (405150 <pmc_enable_periph_clk+0x50>)
  405126:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40512a:	2301      	movs	r3, #1
  40512c:	4083      	lsls	r3, r0
  40512e:	4393      	bics	r3, r2
  405130:	d00b      	beq.n	40514a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  405132:	2301      	movs	r3, #1
  405134:	fa03 f000 	lsl.w	r0, r3, r0
  405138:	4b05      	ldr	r3, [pc, #20]	; (405150 <pmc_enable_periph_clk+0x50>)
  40513a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40513e:	2000      	movs	r0, #0
  405140:	4770      	bx	lr
		return 1;
  405142:	2001      	movs	r0, #1
  405144:	4770      	bx	lr
	return 0;
  405146:	2000      	movs	r0, #0
  405148:	4770      	bx	lr
  40514a:	2000      	movs	r0, #0
}
  40514c:	4770      	bx	lr
  40514e:	bf00      	nop
  405150:	400e0600 	.word	0x400e0600

00405154 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  405154:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  405156:	4b07      	ldr	r3, [pc, #28]	; (405174 <spi_enable_clock+0x20>)
  405158:	4298      	cmp	r0, r3
  40515a:	d003      	beq.n	405164 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  40515c:	4b06      	ldr	r3, [pc, #24]	; (405178 <spi_enable_clock+0x24>)
  40515e:	4298      	cmp	r0, r3
  405160:	d004      	beq.n	40516c <spi_enable_clock+0x18>
  405162:	bd08      	pop	{r3, pc}
  405164:	2015      	movs	r0, #21
  405166:	4b05      	ldr	r3, [pc, #20]	; (40517c <spi_enable_clock+0x28>)
  405168:	4798      	blx	r3
  40516a:	bd08      	pop	{r3, pc}
  40516c:	202a      	movs	r0, #42	; 0x2a
  40516e:	4b03      	ldr	r3, [pc, #12]	; (40517c <spi_enable_clock+0x28>)
  405170:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  405172:	e7f6      	b.n	405162 <spi_enable_clock+0xe>
  405174:	40008000 	.word	0x40008000
  405178:	40058000 	.word	0x40058000
  40517c:	00405101 	.word	0x00405101

00405180 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  405180:	6843      	ldr	r3, [r0, #4]
  405182:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  405186:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  405188:	6843      	ldr	r3, [r0, #4]
  40518a:	0409      	lsls	r1, r1, #16
  40518c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  405190:	4319      	orrs	r1, r3
  405192:	6041      	str	r1, [r0, #4]
  405194:	4770      	bx	lr

00405196 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  405196:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  405198:	f643 2399 	movw	r3, #15001	; 0x3a99
  40519c:	6904      	ldr	r4, [r0, #16]
  40519e:	f014 0f01 	tst.w	r4, #1
  4051a2:	d103      	bne.n	4051ac <spi_read+0x16>
		if (!timeout--) {
  4051a4:	3b01      	subs	r3, #1
  4051a6:	d1f9      	bne.n	40519c <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  4051a8:	2001      	movs	r0, #1
  4051aa:	e009      	b.n	4051c0 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  4051ac:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4051ae:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  4051b0:	f010 0f02 	tst.w	r0, #2
  4051b4:	d002      	beq.n	4051bc <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  4051b6:	f3c3 4003 	ubfx	r0, r3, #16, #4
  4051ba:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  4051bc:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  4051be:	2000      	movs	r0, #0
}
  4051c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4051c4:	4770      	bx	lr

004051c6 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4051c6:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4051c8:	f643 2499 	movw	r4, #15001	; 0x3a99
  4051cc:	6905      	ldr	r5, [r0, #16]
  4051ce:	f015 0f02 	tst.w	r5, #2
  4051d2:	d103      	bne.n	4051dc <spi_write+0x16>
		if (!timeout--) {
  4051d4:	3c01      	subs	r4, #1
  4051d6:	d1f9      	bne.n	4051cc <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4051d8:	2001      	movs	r0, #1
  4051da:	e00c      	b.n	4051f6 <spi_write+0x30>
  4051dc:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4051de:	f014 0f02 	tst.w	r4, #2
  4051e2:	d006      	beq.n	4051f2 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4051e4:	0412      	lsls	r2, r2, #16
  4051e6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4051ea:	4311      	orrs	r1, r2
		if (uc_last) {
  4051ec:	b10b      	cbz	r3, 4051f2 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4051ee:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4051f2:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4051f4:	2000      	movs	r0, #0
}
  4051f6:	bc30      	pop	{r4, r5}
  4051f8:	4770      	bx	lr

004051fa <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4051fa:	b932      	cbnz	r2, 40520a <spi_set_clock_polarity+0x10>
  4051fc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  405200:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405202:	f023 0301 	bic.w	r3, r3, #1
  405206:	6303      	str	r3, [r0, #48]	; 0x30
  405208:	4770      	bx	lr
  40520a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40520e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405210:	f043 0301 	orr.w	r3, r3, #1
  405214:	6303      	str	r3, [r0, #48]	; 0x30
  405216:	4770      	bx	lr

00405218 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  405218:	b932      	cbnz	r2, 405228 <spi_set_clock_phase+0x10>
  40521a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40521e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405220:	f023 0302 	bic.w	r3, r3, #2
  405224:	6303      	str	r3, [r0, #48]	; 0x30
  405226:	4770      	bx	lr
  405228:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40522c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40522e:	f043 0302 	orr.w	r3, r3, #2
  405232:	6303      	str	r3, [r0, #48]	; 0x30
  405234:	4770      	bx	lr

00405236 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  405236:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40523a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40523c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  405240:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  405242:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  405244:	431a      	orrs	r2, r3
  405246:	630a      	str	r2, [r1, #48]	; 0x30
  405248:	4770      	bx	lr

0040524a <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  40524a:	1e43      	subs	r3, r0, #1
  40524c:	4419      	add	r1, r3
  40524e:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  405252:	1e43      	subs	r3, r0, #1
  405254:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  405256:	bf94      	ite	ls
  405258:	b200      	sxthls	r0, r0
		return -1;
  40525a:	f04f 30ff 	movhi.w	r0, #4294967295
}
  40525e:	4770      	bx	lr

00405260 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  405260:	b17a      	cbz	r2, 405282 <spi_set_baudrate_div+0x22>
{
  405262:	b410      	push	{r4}
  405264:	4614      	mov	r4, r2
  405266:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40526a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40526c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  405270:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  405272:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  405274:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  405278:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  40527a:	2000      	movs	r0, #0
}
  40527c:	f85d 4b04 	ldr.w	r4, [sp], #4
  405280:	4770      	bx	lr
        return -1;
  405282:	f04f 30ff 	mov.w	r0, #4294967295
  405286:	4770      	bx	lr

00405288 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  405288:	b410      	push	{r4}
  40528a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  40528e:	6b08      	ldr	r0, [r1, #48]	; 0x30
  405290:	b280      	uxth	r0, r0
  405292:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  405294:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  405296:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  40529a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40529e:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4052a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4052a4:	4770      	bx	lr

004052a6 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4052a6:	6943      	ldr	r3, [r0, #20]
  4052a8:	f013 0f02 	tst.w	r3, #2
  4052ac:	d002      	beq.n	4052b4 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4052ae:	61c1      	str	r1, [r0, #28]
	return 0;
  4052b0:	2000      	movs	r0, #0
  4052b2:	4770      	bx	lr
		return 1;
  4052b4:	2001      	movs	r0, #1
}
  4052b6:	4770      	bx	lr

004052b8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4052b8:	6943      	ldr	r3, [r0, #20]
  4052ba:	f013 0f01 	tst.w	r3, #1
  4052be:	d003      	beq.n	4052c8 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4052c0:	6983      	ldr	r3, [r0, #24]
  4052c2:	700b      	strb	r3, [r1, #0]
	return 0;
  4052c4:	2000      	movs	r0, #0
  4052c6:	4770      	bx	lr
		return 1;
  4052c8:	2001      	movs	r0, #1
}
  4052ca:	4770      	bx	lr

004052cc <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4052cc:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4052ce:	010b      	lsls	r3, r1, #4
  4052d0:	4293      	cmp	r3, r2
  4052d2:	d914      	bls.n	4052fe <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4052d4:	00c9      	lsls	r1, r1, #3
  4052d6:	084b      	lsrs	r3, r1, #1
  4052d8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4052dc:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4052e0:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4052e2:	1e5c      	subs	r4, r3, #1
  4052e4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4052e8:	428c      	cmp	r4, r1
  4052ea:	d901      	bls.n	4052f0 <usart_set_async_baudrate+0x24>
		return 1;
  4052ec:	2001      	movs	r0, #1
  4052ee:	e017      	b.n	405320 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4052f0:	6841      	ldr	r1, [r0, #4]
  4052f2:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4052f6:	6041      	str	r1, [r0, #4]
  4052f8:	e00c      	b.n	405314 <usart_set_async_baudrate+0x48>
		return 1;
  4052fa:	2001      	movs	r0, #1
  4052fc:	e010      	b.n	405320 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4052fe:	0859      	lsrs	r1, r3, #1
  405300:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  405304:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  405308:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40530a:	1e5c      	subs	r4, r3, #1
  40530c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  405310:	428c      	cmp	r4, r1
  405312:	d8f2      	bhi.n	4052fa <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  405314:	0412      	lsls	r2, r2, #16
  405316:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40531a:	431a      	orrs	r2, r3
  40531c:	6202      	str	r2, [r0, #32]

	return 0;
  40531e:	2000      	movs	r0, #0
}
  405320:	f85d 4b04 	ldr.w	r4, [sp], #4
  405324:	4770      	bx	lr
	...

00405328 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  405328:	4b08      	ldr	r3, [pc, #32]	; (40534c <usart_reset+0x24>)
  40532a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40532e:	2300      	movs	r3, #0
  405330:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  405332:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  405334:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  405336:	2388      	movs	r3, #136	; 0x88
  405338:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40533a:	2324      	movs	r3, #36	; 0x24
  40533c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40533e:	f44f 7380 	mov.w	r3, #256	; 0x100
  405342:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  405344:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  405348:	6003      	str	r3, [r0, #0]
  40534a:	4770      	bx	lr
  40534c:	55534100 	.word	0x55534100

00405350 <usart_init_rs232>:
{
  405350:	b570      	push	{r4, r5, r6, lr}
  405352:	4605      	mov	r5, r0
  405354:	460c      	mov	r4, r1
  405356:	4616      	mov	r6, r2
	usart_reset(p_usart);
  405358:	4b0f      	ldr	r3, [pc, #60]	; (405398 <usart_init_rs232+0x48>)
  40535a:	4798      	blx	r3
	ul_reg_val = 0;
  40535c:	2200      	movs	r2, #0
  40535e:	4b0f      	ldr	r3, [pc, #60]	; (40539c <usart_init_rs232+0x4c>)
  405360:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  405362:	b1a4      	cbz	r4, 40538e <usart_init_rs232+0x3e>
  405364:	4632      	mov	r2, r6
  405366:	6821      	ldr	r1, [r4, #0]
  405368:	4628      	mov	r0, r5
  40536a:	4b0d      	ldr	r3, [pc, #52]	; (4053a0 <usart_init_rs232+0x50>)
  40536c:	4798      	blx	r3
  40536e:	4602      	mov	r2, r0
  405370:	b978      	cbnz	r0, 405392 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  405372:	6863      	ldr	r3, [r4, #4]
  405374:	68a1      	ldr	r1, [r4, #8]
  405376:	430b      	orrs	r3, r1
  405378:	6921      	ldr	r1, [r4, #16]
  40537a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40537c:	68e1      	ldr	r1, [r4, #12]
  40537e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  405380:	4906      	ldr	r1, [pc, #24]	; (40539c <usart_init_rs232+0x4c>)
  405382:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  405384:	6869      	ldr	r1, [r5, #4]
  405386:	430b      	orrs	r3, r1
  405388:	606b      	str	r3, [r5, #4]
}
  40538a:	4610      	mov	r0, r2
  40538c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  40538e:	2201      	movs	r2, #1
  405390:	e7fb      	b.n	40538a <usart_init_rs232+0x3a>
  405392:	2201      	movs	r2, #1
  405394:	e7f9      	b.n	40538a <usart_init_rs232+0x3a>
  405396:	bf00      	nop
  405398:	00405329 	.word	0x00405329
  40539c:	2040c3e0 	.word	0x2040c3e0
  4053a0:	004052cd 	.word	0x004052cd

004053a4 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4053a4:	2340      	movs	r3, #64	; 0x40
  4053a6:	6003      	str	r3, [r0, #0]
  4053a8:	4770      	bx	lr

004053aa <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4053aa:	2310      	movs	r3, #16
  4053ac:	6003      	str	r3, [r0, #0]
  4053ae:	4770      	bx	lr

004053b0 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4053b0:	6943      	ldr	r3, [r0, #20]
  4053b2:	f013 0f02 	tst.w	r3, #2
  4053b6:	d004      	beq.n	4053c2 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4053b8:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4053bc:	61c1      	str	r1, [r0, #28]
	return 0;
  4053be:	2000      	movs	r0, #0
  4053c0:	4770      	bx	lr
		return 1;
  4053c2:	2001      	movs	r0, #1
}
  4053c4:	4770      	bx	lr

004053c6 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4053c6:	6943      	ldr	r3, [r0, #20]
  4053c8:	f013 0f01 	tst.w	r3, #1
  4053cc:	d005      	beq.n	4053da <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4053ce:	6983      	ldr	r3, [r0, #24]
  4053d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4053d4:	600b      	str	r3, [r1, #0]
	return 0;
  4053d6:	2000      	movs	r0, #0
  4053d8:	4770      	bx	lr
		return 1;
  4053da:	2001      	movs	r0, #1
}
  4053dc:	4770      	bx	lr

004053de <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4053de:	e7fe      	b.n	4053de <Dummy_Handler>

004053e0 <Reset_Handler>:
{
  4053e0:	b500      	push	{lr}
  4053e2:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4053e4:	4b25      	ldr	r3, [pc, #148]	; (40547c <Reset_Handler+0x9c>)
  4053e6:	4a26      	ldr	r2, [pc, #152]	; (405480 <Reset_Handler+0xa0>)
  4053e8:	429a      	cmp	r2, r3
  4053ea:	d010      	beq.n	40540e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4053ec:	4b25      	ldr	r3, [pc, #148]	; (405484 <Reset_Handler+0xa4>)
  4053ee:	4a23      	ldr	r2, [pc, #140]	; (40547c <Reset_Handler+0x9c>)
  4053f0:	429a      	cmp	r2, r3
  4053f2:	d20c      	bcs.n	40540e <Reset_Handler+0x2e>
  4053f4:	3b01      	subs	r3, #1
  4053f6:	1a9b      	subs	r3, r3, r2
  4053f8:	f023 0303 	bic.w	r3, r3, #3
  4053fc:	3304      	adds	r3, #4
  4053fe:	4413      	add	r3, r2
  405400:	491f      	ldr	r1, [pc, #124]	; (405480 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  405402:	f851 0b04 	ldr.w	r0, [r1], #4
  405406:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40540a:	429a      	cmp	r2, r3
  40540c:	d1f9      	bne.n	405402 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40540e:	4b1e      	ldr	r3, [pc, #120]	; (405488 <Reset_Handler+0xa8>)
  405410:	4a1e      	ldr	r2, [pc, #120]	; (40548c <Reset_Handler+0xac>)
  405412:	429a      	cmp	r2, r3
  405414:	d20a      	bcs.n	40542c <Reset_Handler+0x4c>
  405416:	3b01      	subs	r3, #1
  405418:	1a9b      	subs	r3, r3, r2
  40541a:	f023 0303 	bic.w	r3, r3, #3
  40541e:	3304      	adds	r3, #4
  405420:	4413      	add	r3, r2
                *pDest++ = 0;
  405422:	2100      	movs	r1, #0
  405424:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  405428:	4293      	cmp	r3, r2
  40542a:	d1fb      	bne.n	405424 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40542c:	4a18      	ldr	r2, [pc, #96]	; (405490 <Reset_Handler+0xb0>)
  40542e:	4b19      	ldr	r3, [pc, #100]	; (405494 <Reset_Handler+0xb4>)
  405430:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  405434:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  405436:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40543a:	fab3 f383 	clz	r3, r3
  40543e:	095b      	lsrs	r3, r3, #5
  405440:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  405442:	b672      	cpsid	i
  __ASM volatile ("dmb");
  405444:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  405448:	2200      	movs	r2, #0
  40544a:	4b13      	ldr	r3, [pc, #76]	; (405498 <Reset_Handler+0xb8>)
  40544c:	701a      	strb	r2, [r3, #0]
	return flags;
  40544e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  405450:	4a12      	ldr	r2, [pc, #72]	; (40549c <Reset_Handler+0xbc>)
  405452:	6813      	ldr	r3, [r2, #0]
  405454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  405458:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40545a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40545e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  405462:	b129      	cbz	r1, 405470 <Reset_Handler+0x90>
		cpu_irq_enable();
  405464:	2201      	movs	r2, #1
  405466:	4b0c      	ldr	r3, [pc, #48]	; (405498 <Reset_Handler+0xb8>)
  405468:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40546a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40546e:	b662      	cpsie	i
        __libc_init_array();
  405470:	4b0b      	ldr	r3, [pc, #44]	; (4054a0 <Reset_Handler+0xc0>)
  405472:	4798      	blx	r3
        main();
  405474:	4b0b      	ldr	r3, [pc, #44]	; (4054a4 <Reset_Handler+0xc4>)
  405476:	4798      	blx	r3
  405478:	e7fe      	b.n	405478 <Reset_Handler+0x98>
  40547a:	bf00      	nop
  40547c:	20400000 	.word	0x20400000
  405480:	00409d04 	.word	0x00409d04
  405484:	204009d8 	.word	0x204009d8
  405488:	2040cad4 	.word	0x2040cad4
  40548c:	204009d8 	.word	0x204009d8
  405490:	e000ed00 	.word	0xe000ed00
  405494:	00400000 	.word	0x00400000
  405498:	20400018 	.word	0x20400018
  40549c:	e000ed88 	.word	0xe000ed88
  4054a0:	00405ce9 	.word	0x00405ce9
  4054a4:	00405bfd 	.word	0x00405bfd

004054a8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4054a8:	4b3b      	ldr	r3, [pc, #236]	; (405598 <SystemCoreClockUpdate+0xf0>)
  4054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4054ac:	f003 0303 	and.w	r3, r3, #3
  4054b0:	2b01      	cmp	r3, #1
  4054b2:	d01d      	beq.n	4054f0 <SystemCoreClockUpdate+0x48>
  4054b4:	b183      	cbz	r3, 4054d8 <SystemCoreClockUpdate+0x30>
  4054b6:	2b02      	cmp	r3, #2
  4054b8:	d036      	beq.n	405528 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4054ba:	4b37      	ldr	r3, [pc, #220]	; (405598 <SystemCoreClockUpdate+0xf0>)
  4054bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4054be:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4054c2:	2b70      	cmp	r3, #112	; 0x70
  4054c4:	d05f      	beq.n	405586 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4054c6:	4b34      	ldr	r3, [pc, #208]	; (405598 <SystemCoreClockUpdate+0xf0>)
  4054c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4054ca:	4934      	ldr	r1, [pc, #208]	; (40559c <SystemCoreClockUpdate+0xf4>)
  4054cc:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4054d0:	680b      	ldr	r3, [r1, #0]
  4054d2:	40d3      	lsrs	r3, r2
  4054d4:	600b      	str	r3, [r1, #0]
  4054d6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4054d8:	4b31      	ldr	r3, [pc, #196]	; (4055a0 <SystemCoreClockUpdate+0xf8>)
  4054da:	695b      	ldr	r3, [r3, #20]
  4054dc:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4054e0:	bf14      	ite	ne
  4054e2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4054e6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4054ea:	4b2c      	ldr	r3, [pc, #176]	; (40559c <SystemCoreClockUpdate+0xf4>)
  4054ec:	601a      	str	r2, [r3, #0]
  4054ee:	e7e4      	b.n	4054ba <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4054f0:	4b29      	ldr	r3, [pc, #164]	; (405598 <SystemCoreClockUpdate+0xf0>)
  4054f2:	6a1b      	ldr	r3, [r3, #32]
  4054f4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4054f8:	d003      	beq.n	405502 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4054fa:	4a2a      	ldr	r2, [pc, #168]	; (4055a4 <SystemCoreClockUpdate+0xfc>)
  4054fc:	4b27      	ldr	r3, [pc, #156]	; (40559c <SystemCoreClockUpdate+0xf4>)
  4054fe:	601a      	str	r2, [r3, #0]
  405500:	e7db      	b.n	4054ba <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405502:	4a29      	ldr	r2, [pc, #164]	; (4055a8 <SystemCoreClockUpdate+0x100>)
  405504:	4b25      	ldr	r3, [pc, #148]	; (40559c <SystemCoreClockUpdate+0xf4>)
  405506:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  405508:	4b23      	ldr	r3, [pc, #140]	; (405598 <SystemCoreClockUpdate+0xf0>)
  40550a:	6a1b      	ldr	r3, [r3, #32]
  40550c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405510:	2b10      	cmp	r3, #16
  405512:	d005      	beq.n	405520 <SystemCoreClockUpdate+0x78>
  405514:	2b20      	cmp	r3, #32
  405516:	d1d0      	bne.n	4054ba <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  405518:	4a22      	ldr	r2, [pc, #136]	; (4055a4 <SystemCoreClockUpdate+0xfc>)
  40551a:	4b20      	ldr	r3, [pc, #128]	; (40559c <SystemCoreClockUpdate+0xf4>)
  40551c:	601a      	str	r2, [r3, #0]
          break;
  40551e:	e7cc      	b.n	4054ba <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  405520:	4a22      	ldr	r2, [pc, #136]	; (4055ac <SystemCoreClockUpdate+0x104>)
  405522:	4b1e      	ldr	r3, [pc, #120]	; (40559c <SystemCoreClockUpdate+0xf4>)
  405524:	601a      	str	r2, [r3, #0]
          break;
  405526:	e7c8      	b.n	4054ba <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  405528:	4b1b      	ldr	r3, [pc, #108]	; (405598 <SystemCoreClockUpdate+0xf0>)
  40552a:	6a1b      	ldr	r3, [r3, #32]
  40552c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  405530:	d016      	beq.n	405560 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  405532:	4a1c      	ldr	r2, [pc, #112]	; (4055a4 <SystemCoreClockUpdate+0xfc>)
  405534:	4b19      	ldr	r3, [pc, #100]	; (40559c <SystemCoreClockUpdate+0xf4>)
  405536:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  405538:	4b17      	ldr	r3, [pc, #92]	; (405598 <SystemCoreClockUpdate+0xf0>)
  40553a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40553c:	f003 0303 	and.w	r3, r3, #3
  405540:	2b02      	cmp	r3, #2
  405542:	d1ba      	bne.n	4054ba <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  405544:	4a14      	ldr	r2, [pc, #80]	; (405598 <SystemCoreClockUpdate+0xf0>)
  405546:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  405548:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40554a:	4814      	ldr	r0, [pc, #80]	; (40559c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40554c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  405550:	6803      	ldr	r3, [r0, #0]
  405552:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  405556:	b2d2      	uxtb	r2, r2
  405558:	fbb3 f3f2 	udiv	r3, r3, r2
  40555c:	6003      	str	r3, [r0, #0]
  40555e:	e7ac      	b.n	4054ba <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405560:	4a11      	ldr	r2, [pc, #68]	; (4055a8 <SystemCoreClockUpdate+0x100>)
  405562:	4b0e      	ldr	r3, [pc, #56]	; (40559c <SystemCoreClockUpdate+0xf4>)
  405564:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  405566:	4b0c      	ldr	r3, [pc, #48]	; (405598 <SystemCoreClockUpdate+0xf0>)
  405568:	6a1b      	ldr	r3, [r3, #32]
  40556a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40556e:	2b10      	cmp	r3, #16
  405570:	d005      	beq.n	40557e <SystemCoreClockUpdate+0xd6>
  405572:	2b20      	cmp	r3, #32
  405574:	d1e0      	bne.n	405538 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  405576:	4a0b      	ldr	r2, [pc, #44]	; (4055a4 <SystemCoreClockUpdate+0xfc>)
  405578:	4b08      	ldr	r3, [pc, #32]	; (40559c <SystemCoreClockUpdate+0xf4>)
  40557a:	601a      	str	r2, [r3, #0]
          break;
  40557c:	e7dc      	b.n	405538 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40557e:	4a0b      	ldr	r2, [pc, #44]	; (4055ac <SystemCoreClockUpdate+0x104>)
  405580:	4b06      	ldr	r3, [pc, #24]	; (40559c <SystemCoreClockUpdate+0xf4>)
  405582:	601a      	str	r2, [r3, #0]
          break;
  405584:	e7d8      	b.n	405538 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  405586:	4a05      	ldr	r2, [pc, #20]	; (40559c <SystemCoreClockUpdate+0xf4>)
  405588:	6813      	ldr	r3, [r2, #0]
  40558a:	4909      	ldr	r1, [pc, #36]	; (4055b0 <SystemCoreClockUpdate+0x108>)
  40558c:	fba1 1303 	umull	r1, r3, r1, r3
  405590:	085b      	lsrs	r3, r3, #1
  405592:	6013      	str	r3, [r2, #0]
  405594:	4770      	bx	lr
  405596:	bf00      	nop
  405598:	400e0600 	.word	0x400e0600
  40559c:	2040001c 	.word	0x2040001c
  4055a0:	400e1810 	.word	0x400e1810
  4055a4:	00b71b00 	.word	0x00b71b00
  4055a8:	003d0900 	.word	0x003d0900
  4055ac:	007a1200 	.word	0x007a1200
  4055b0:	aaaaaaab 	.word	0xaaaaaaab

004055b4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4055b4:	4b12      	ldr	r3, [pc, #72]	; (405600 <system_init_flash+0x4c>)
  4055b6:	4298      	cmp	r0, r3
  4055b8:	d911      	bls.n	4055de <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4055ba:	4b12      	ldr	r3, [pc, #72]	; (405604 <system_init_flash+0x50>)
  4055bc:	4298      	cmp	r0, r3
  4055be:	d913      	bls.n	4055e8 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4055c0:	4b11      	ldr	r3, [pc, #68]	; (405608 <system_init_flash+0x54>)
  4055c2:	4298      	cmp	r0, r3
  4055c4:	d914      	bls.n	4055f0 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4055c6:	4b11      	ldr	r3, [pc, #68]	; (40560c <system_init_flash+0x58>)
  4055c8:	4298      	cmp	r0, r3
  4055ca:	d915      	bls.n	4055f8 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4055cc:	4b10      	ldr	r3, [pc, #64]	; (405610 <system_init_flash+0x5c>)
  4055ce:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4055d0:	bf94      	ite	ls
  4055d2:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4055d6:	4a0f      	ldrhi	r2, [pc, #60]	; (405614 <system_init_flash+0x60>)
  4055d8:	4b0f      	ldr	r3, [pc, #60]	; (405618 <system_init_flash+0x64>)
  4055da:	601a      	str	r2, [r3, #0]
  4055dc:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4055de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4055e2:	4b0d      	ldr	r3, [pc, #52]	; (405618 <system_init_flash+0x64>)
  4055e4:	601a      	str	r2, [r3, #0]
  4055e6:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4055e8:	4a0c      	ldr	r2, [pc, #48]	; (40561c <system_init_flash+0x68>)
  4055ea:	4b0b      	ldr	r3, [pc, #44]	; (405618 <system_init_flash+0x64>)
  4055ec:	601a      	str	r2, [r3, #0]
  4055ee:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4055f0:	4a0b      	ldr	r2, [pc, #44]	; (405620 <system_init_flash+0x6c>)
  4055f2:	4b09      	ldr	r3, [pc, #36]	; (405618 <system_init_flash+0x64>)
  4055f4:	601a      	str	r2, [r3, #0]
  4055f6:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4055f8:	4a0a      	ldr	r2, [pc, #40]	; (405624 <system_init_flash+0x70>)
  4055fa:	4b07      	ldr	r3, [pc, #28]	; (405618 <system_init_flash+0x64>)
  4055fc:	601a      	str	r2, [r3, #0]
  4055fe:	4770      	bx	lr
  405600:	01312cff 	.word	0x01312cff
  405604:	026259ff 	.word	0x026259ff
  405608:	039386ff 	.word	0x039386ff
  40560c:	04c4b3ff 	.word	0x04c4b3ff
  405610:	05f5e0ff 	.word	0x05f5e0ff
  405614:	04000500 	.word	0x04000500
  405618:	400e0c00 	.word	0x400e0c00
  40561c:	04000100 	.word	0x04000100
  405620:	04000200 	.word	0x04000200
  405624:	04000300 	.word	0x04000300

00405628 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  405628:	4b0a      	ldr	r3, [pc, #40]	; (405654 <_sbrk+0x2c>)
  40562a:	681b      	ldr	r3, [r3, #0]
  40562c:	b153      	cbz	r3, 405644 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40562e:	4b09      	ldr	r3, [pc, #36]	; (405654 <_sbrk+0x2c>)
  405630:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  405632:	181a      	adds	r2, r3, r0
  405634:	4908      	ldr	r1, [pc, #32]	; (405658 <_sbrk+0x30>)
  405636:	4291      	cmp	r1, r2
  405638:	db08      	blt.n	40564c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40563a:	4610      	mov	r0, r2
  40563c:	4a05      	ldr	r2, [pc, #20]	; (405654 <_sbrk+0x2c>)
  40563e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  405640:	4618      	mov	r0, r3
  405642:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  405644:	4a05      	ldr	r2, [pc, #20]	; (40565c <_sbrk+0x34>)
  405646:	4b03      	ldr	r3, [pc, #12]	; (405654 <_sbrk+0x2c>)
  405648:	601a      	str	r2, [r3, #0]
  40564a:	e7f0      	b.n	40562e <_sbrk+0x6>
		return (caddr_t) -1;	
  40564c:	f04f 30ff 	mov.w	r0, #4294967295
}
  405650:	4770      	bx	lr
  405652:	bf00      	nop
  405654:	2040c3e4 	.word	0x2040c3e4
  405658:	2045fffc 	.word	0x2045fffc
  40565c:	2040ecd8 	.word	0x2040ecd8

00405660 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  405660:	f04f 30ff 	mov.w	r0, #4294967295
  405664:	4770      	bx	lr

00405666 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  405666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  40566a:	604b      	str	r3, [r1, #4]

	return 0;
}
  40566c:	2000      	movs	r0, #0
  40566e:	4770      	bx	lr

00405670 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  405670:	2001      	movs	r0, #1
  405672:	4770      	bx	lr

00405674 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  405674:	2000      	movs	r0, #0
  405676:	4770      	bx	lr

00405678 <resolve_cb>:

	return 1;
}

static void resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
  405678:	b510      	push	{r4, lr}
  40567a:	b082      	sub	sp, #8
	gu32HostIp = hostIp;
  40567c:	4b07      	ldr	r3, [pc, #28]	; (40569c <resolve_cb+0x24>)
  40567e:	6019      	str	r1, [r3, #0]
	gbHostIpByName = true;
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
	(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
	(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
  405680:	0e0b      	lsrs	r3, r1, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  405682:	9301      	str	r3, [sp, #4]
  405684:	f3c1 4307 	ubfx	r3, r1, #16, #8
  405688:	9300      	str	r3, [sp, #0]
  40568a:	f3c1 2307 	ubfx	r3, r1, #8, #8
  40568e:	b2ca      	uxtb	r2, r1
  405690:	4601      	mov	r1, r0
  405692:	4803      	ldr	r0, [pc, #12]	; (4056a0 <resolve_cb+0x28>)
  405694:	4c03      	ldr	r4, [pc, #12]	; (4056a4 <resolve_cb+0x2c>)
  405696:	47a0      	blx	r4
}
  405698:	b002      	add	sp, #8
  40569a:	bd10      	pop	{r4, pc}
  40569c:	2040c964 	.word	0x2040c964
  4056a0:	00409958 	.word	0x00409958
  4056a4:	00405d39 	.word	0x00405d39

004056a8 <socket_cb>:

static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	
	/* Check for socket event on TCP socket. */
	if (sock == tcp_client_socket) {
  4056a8:	4b3d      	ldr	r3, [pc, #244]	; (4057a0 <socket_cb+0xf8>)
  4056aa:	f993 3000 	ldrsb.w	r3, [r3]
  4056ae:	4283      	cmp	r3, r0
  4056b0:	d000      	beq.n	4056b4 <socket_cb+0xc>
  4056b2:	4770      	bx	lr
{
  4056b4:	b570      	push	{r4, r5, r6, lr}
  4056b6:	4614      	mov	r4, r2
		
		switch (u8Msg) {
  4056b8:	2905      	cmp	r1, #5
  4056ba:	d002      	beq.n	4056c2 <socket_cb+0x1a>
  4056bc:	2906      	cmp	r1, #6
  4056be:	d04b      	beq.n	405758 <socket_cb+0xb0>
  4056c0:	bd70      	pop	{r4, r5, r6, pc}
			case SOCKET_MSG_CONNECT:
			{
				printf("socket_msg_connect\n");
  4056c2:	4838      	ldr	r0, [pc, #224]	; (4057a4 <socket_cb+0xfc>)
  4056c4:	4b38      	ldr	r3, [pc, #224]	; (4057a8 <socket_cb+0x100>)
  4056c6:	4798      	blx	r3
				if (gbTcpConnection) {
  4056c8:	4b38      	ldr	r3, [pc, #224]	; (4057ac <socket_cb+0x104>)
  4056ca:	781b      	ldrb	r3, [r3, #0]
  4056cc:	2b00      	cmp	r3, #0
  4056ce:	d052      	beq.n	405776 <socket_cb+0xce>
					memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  4056d0:	4d37      	ldr	r5, [pc, #220]	; (4057b0 <socket_cb+0x108>)
  4056d2:	f44f 62af 	mov.w	r2, #1400	; 0x578
  4056d6:	2100      	movs	r1, #0
  4056d8:	4628      	mov	r0, r5
  4056da:	4b36      	ldr	r3, [pc, #216]	; (4057b4 <socket_cb+0x10c>)
  4056dc:	4798      	blx	r3
					sprintf((char *)gau8ReceivedBuffer, "%s", MAIN_PREFIX_BUFFER);
  4056de:	4e36      	ldr	r6, [pc, #216]	; (4057b8 <socket_cb+0x110>)
  4056e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  4056e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4056e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  4056e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4056e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  4056ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  4056ec:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  4056f0:	c503      	stmia	r5!, {r0, r1}
  4056f2:	702a      	strb	r2, [r5, #0]

					tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
					if (pstrConnect && pstrConnect->s8Error >= SOCK_ERR_NO_ERROR) {
  4056f4:	b314      	cbz	r4, 40573c <socket_cb+0x94>
  4056f6:	f994 3001 	ldrsb.w	r3, [r4, #1]
  4056fa:	2b00      	cmp	r3, #0
  4056fc:	db1e      	blt.n	40573c <socket_cb+0x94>
						printf("send \n");
  4056fe:	482f      	ldr	r0, [pc, #188]	; (4057bc <socket_cb+0x114>)
  405700:	4b29      	ldr	r3, [pc, #164]	; (4057a8 <socket_cb+0x100>)
  405702:	4798      	blx	r3
						send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  405704:	f1a5 0438 	sub.w	r4, r5, #56	; 0x38
  405708:	4620      	mov	r0, r4
  40570a:	4b2d      	ldr	r3, [pc, #180]	; (4057c0 <socket_cb+0x118>)
  40570c:	4798      	blx	r3
  40570e:	4d24      	ldr	r5, [pc, #144]	; (4057a0 <socket_cb+0xf8>)
  405710:	2300      	movs	r3, #0
  405712:	b282      	uxth	r2, r0
  405714:	4621      	mov	r1, r4
  405716:	f995 0000 	ldrsb.w	r0, [r5]
  40571a:	4e2a      	ldr	r6, [pc, #168]	; (4057c4 <socket_cb+0x11c>)
  40571c:	47b0      	blx	r6

						memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  40571e:	f44f 66af 	mov.w	r6, #1400	; 0x578
  405722:	4632      	mov	r2, r6
  405724:	2100      	movs	r1, #0
  405726:	4620      	mov	r0, r4
  405728:	4b22      	ldr	r3, [pc, #136]	; (4057b4 <socket_cb+0x10c>)
  40572a:	4798      	blx	r3
						recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  40572c:	2300      	movs	r3, #0
  40572e:	4632      	mov	r2, r6
  405730:	4621      	mov	r1, r4
  405732:	f995 0000 	ldrsb.w	r0, [r5]
  405736:	4c24      	ldr	r4, [pc, #144]	; (4057c8 <socket_cb+0x120>)
  405738:	47a0      	blx	r4
  40573a:	bd70      	pop	{r4, r5, r6, pc}
						}
					else {
						printf("socket_cb: connect error!\r\n");
  40573c:	4823      	ldr	r0, [pc, #140]	; (4057cc <socket_cb+0x124>)
  40573e:	4b1a      	ldr	r3, [pc, #104]	; (4057a8 <socket_cb+0x100>)
  405740:	4798      	blx	r3
						gbTcpConnection = false;
  405742:	2200      	movs	r2, #0
  405744:	4b19      	ldr	r3, [pc, #100]	; (4057ac <socket_cb+0x104>)
  405746:	701a      	strb	r2, [r3, #0]
						close(tcp_client_socket);
  405748:	4c15      	ldr	r4, [pc, #84]	; (4057a0 <socket_cb+0xf8>)
  40574a:	f994 0000 	ldrsb.w	r0, [r4]
  40574e:	4b20      	ldr	r3, [pc, #128]	; (4057d0 <socket_cb+0x128>)
  405750:	4798      	blx	r3
						tcp_client_socket = -1;
  405752:	23ff      	movs	r3, #255	; 0xff
  405754:	7023      	strb	r3, [r4, #0]
  405756:	bd70      	pop	{r4, r5, r6, pc}
			{
				char *pcIndxPtr;
				char *pcEndPtr;

				tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
				if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  405758:	b11a      	cbz	r2, 405762 <socket_cb+0xba>
  40575a:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  40575e:	2b00      	cmp	r3, #0
  405760:	dc0a      	bgt.n	405778 <socket_cb+0xd0>
					printf(pstrRecv->pu8Buffer);
					
					memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
					recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
					} else {
					printf("socket_cb: recv error!\r\n");
  405762:	481c      	ldr	r0, [pc, #112]	; (4057d4 <socket_cb+0x12c>)
  405764:	4b10      	ldr	r3, [pc, #64]	; (4057a8 <socket_cb+0x100>)
  405766:	4798      	blx	r3
					close(tcp_client_socket);
  405768:	4c0d      	ldr	r4, [pc, #52]	; (4057a0 <socket_cb+0xf8>)
  40576a:	f994 0000 	ldrsb.w	r0, [r4]
  40576e:	4b18      	ldr	r3, [pc, #96]	; (4057d0 <socket_cb+0x128>)
  405770:	4798      	blx	r3
					tcp_client_socket = -1;
  405772:	23ff      	movs	r3, #255	; 0xff
  405774:	7023      	strb	r3, [r4, #0]
  405776:	bd70      	pop	{r4, r5, r6, pc}
					printf(pstrRecv->pu8Buffer);
  405778:	6810      	ldr	r0, [r2, #0]
  40577a:	4b0b      	ldr	r3, [pc, #44]	; (4057a8 <socket_cb+0x100>)
  40577c:	4798      	blx	r3
					memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  40577e:	4c0c      	ldr	r4, [pc, #48]	; (4057b0 <socket_cb+0x108>)
  405780:	f44f 65af 	mov.w	r5, #1400	; 0x578
  405784:	462a      	mov	r2, r5
  405786:	2100      	movs	r1, #0
  405788:	4620      	mov	r0, r4
  40578a:	4b0a      	ldr	r3, [pc, #40]	; (4057b4 <socket_cb+0x10c>)
  40578c:	4798      	blx	r3
					recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  40578e:	2300      	movs	r3, #0
  405790:	462a      	mov	r2, r5
  405792:	4621      	mov	r1, r4
  405794:	4802      	ldr	r0, [pc, #8]	; (4057a0 <socket_cb+0xf8>)
  405796:	f990 0000 	ldrsb.w	r0, [r0]
  40579a:	4c0b      	ldr	r4, [pc, #44]	; (4057c8 <socket_cb+0x120>)
  40579c:	47a0      	blx	r4
  40579e:	bd70      	pop	{r4, r5, r6, pc}
  4057a0:	20400026 	.word	0x20400026
  4057a4:	00409988 	.word	0x00409988
  4057a8:	00405d39 	.word	0x00405d39
  4057ac:	2040c960 	.word	0x2040c960
  4057b0:	2040c3e8 	.word	0x2040c3e8
  4057b4:	00405e95 	.word	0x00405e95
  4057b8:	0040999c 	.word	0x0040999c
  4057bc:	004099d8 	.word	0x004099d8
  4057c0:	00406101 	.word	0x00406101
  4057c4:	00404699 	.word	0x00404699
  4057c8:	00404735 	.word	0x00404735
  4057cc:	004099e0 	.word	0x004099e0
  4057d0:	004047d5 	.word	0x004047d5
  4057d4:	004099fc 	.word	0x004099fc

004057d8 <wifi_cb>:
		name[len - 5] = MAIN_HEX2ASCII((mac_addr[4] >> 4) & 0x0f);
	}
}

static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
  4057d8:	b510      	push	{r4, lr}
  4057da:	b082      	sub	sp, #8
	switch (u8MsgType) {
  4057dc:	282c      	cmp	r0, #44	; 0x2c
  4057de:	d003      	beq.n	4057e8 <wifi_cb+0x10>
  4057e0:	2832      	cmp	r0, #50	; 0x32
  4057e2:	d013      	beq.n	40580c <wifi_cb+0x34>
		default:
		{
			break;
		}
	}
}
  4057e4:	b002      	add	sp, #8
  4057e6:	bd10      	pop	{r4, pc}
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  4057e8:	780b      	ldrb	r3, [r1, #0]
  4057ea:	2b01      	cmp	r3, #1
  4057ec:	d008      	beq.n	405800 <wifi_cb+0x28>
				} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  4057ee:	2b00      	cmp	r3, #0
  4057f0:	d1f8      	bne.n	4057e4 <wifi_cb+0xc>
				printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
  4057f2:	480d      	ldr	r0, [pc, #52]	; (405828 <wifi_cb+0x50>)
  4057f4:	4b0d      	ldr	r3, [pc, #52]	; (40582c <wifi_cb+0x54>)
  4057f6:	4798      	blx	r3
				wifi_connected = 0;
  4057f8:	2200      	movs	r2, #0
  4057fa:	4b0d      	ldr	r3, [pc, #52]	; (405830 <wifi_cb+0x58>)
  4057fc:	701a      	strb	r2, [r3, #0]
  4057fe:	e7f1      	b.n	4057e4 <wifi_cb+0xc>
				printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
  405800:	480c      	ldr	r0, [pc, #48]	; (405834 <wifi_cb+0x5c>)
  405802:	4b0a      	ldr	r3, [pc, #40]	; (40582c <wifi_cb+0x54>)
  405804:	4798      	blx	r3
				m2m_wifi_request_dhcp_client();
  405806:	4b0c      	ldr	r3, [pc, #48]	; (405838 <wifi_cb+0x60>)
  405808:	4798      	blx	r3
  40580a:	e7eb      	b.n	4057e4 <wifi_cb+0xc>
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
  40580c:	788b      	ldrb	r3, [r1, #2]
  40580e:	784a      	ldrb	r2, [r1, #1]
  405810:	7808      	ldrb	r0, [r1, #0]
  405812:	78c9      	ldrb	r1, [r1, #3]
  405814:	9100      	str	r1, [sp, #0]
  405816:	4601      	mov	r1, r0
  405818:	4808      	ldr	r0, [pc, #32]	; (40583c <wifi_cb+0x64>)
  40581a:	4c04      	ldr	r4, [pc, #16]	; (40582c <wifi_cb+0x54>)
  40581c:	47a0      	blx	r4
			wifi_connected = M2M_WIFI_CONNECTED;
  40581e:	2201      	movs	r2, #1
  405820:	4b03      	ldr	r3, [pc, #12]	; (405830 <wifi_cb+0x58>)
  405822:	701a      	strb	r2, [r3, #0]
}
  405824:	e7de      	b.n	4057e4 <wifi_cb+0xc>
  405826:	bf00      	nop
  405828:	00409b24 	.word	0x00409b24
  40582c:	00405d39 	.word	0x00405d39
  405830:	2040c968 	.word	0x2040c968
  405834:	00409b04 	.word	0x00409b04
  405838:	00403095 	.word	0x00403095
  40583c:	00409b48 	.word	0x00409b48

00405840 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  405840:	b5f0      	push	{r4, r5, r6, r7, lr}
  405842:	b083      	sub	sp, #12
  405844:	4605      	mov	r5, r0
  405846:	460c      	mov	r4, r1
	uint32_t val = 0;
  405848:	2300      	movs	r3, #0
  40584a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40584c:	4b2a      	ldr	r3, [pc, #168]	; (4058f8 <usart_serial_getchar+0xb8>)
  40584e:	4298      	cmp	r0, r3
  405850:	d013      	beq.n	40587a <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  405852:	4b2a      	ldr	r3, [pc, #168]	; (4058fc <usart_serial_getchar+0xbc>)
  405854:	4298      	cmp	r0, r3
  405856:	d018      	beq.n	40588a <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  405858:	4b29      	ldr	r3, [pc, #164]	; (405900 <usart_serial_getchar+0xc0>)
  40585a:	4298      	cmp	r0, r3
  40585c:	d01d      	beq.n	40589a <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40585e:	4b29      	ldr	r3, [pc, #164]	; (405904 <usart_serial_getchar+0xc4>)
  405860:	429d      	cmp	r5, r3
  405862:	d022      	beq.n	4058aa <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  405864:	4b28      	ldr	r3, [pc, #160]	; (405908 <usart_serial_getchar+0xc8>)
  405866:	429d      	cmp	r5, r3
  405868:	d027      	beq.n	4058ba <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40586a:	4b28      	ldr	r3, [pc, #160]	; (40590c <usart_serial_getchar+0xcc>)
  40586c:	429d      	cmp	r5, r3
  40586e:	d02e      	beq.n	4058ce <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  405870:	4b27      	ldr	r3, [pc, #156]	; (405910 <usart_serial_getchar+0xd0>)
  405872:	429d      	cmp	r5, r3
  405874:	d035      	beq.n	4058e2 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  405876:	b003      	add	sp, #12
  405878:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40587a:	461f      	mov	r7, r3
  40587c:	4e25      	ldr	r6, [pc, #148]	; (405914 <usart_serial_getchar+0xd4>)
  40587e:	4621      	mov	r1, r4
  405880:	4638      	mov	r0, r7
  405882:	47b0      	blx	r6
  405884:	2800      	cmp	r0, #0
  405886:	d1fa      	bne.n	40587e <usart_serial_getchar+0x3e>
  405888:	e7e9      	b.n	40585e <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40588a:	461f      	mov	r7, r3
  40588c:	4e21      	ldr	r6, [pc, #132]	; (405914 <usart_serial_getchar+0xd4>)
  40588e:	4621      	mov	r1, r4
  405890:	4638      	mov	r0, r7
  405892:	47b0      	blx	r6
  405894:	2800      	cmp	r0, #0
  405896:	d1fa      	bne.n	40588e <usart_serial_getchar+0x4e>
  405898:	e7e4      	b.n	405864 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  40589a:	461f      	mov	r7, r3
  40589c:	4e1d      	ldr	r6, [pc, #116]	; (405914 <usart_serial_getchar+0xd4>)
  40589e:	4621      	mov	r1, r4
  4058a0:	4638      	mov	r0, r7
  4058a2:	47b0      	blx	r6
  4058a4:	2800      	cmp	r0, #0
  4058a6:	d1fa      	bne.n	40589e <usart_serial_getchar+0x5e>
  4058a8:	e7df      	b.n	40586a <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4058aa:	461f      	mov	r7, r3
  4058ac:	4e19      	ldr	r6, [pc, #100]	; (405914 <usart_serial_getchar+0xd4>)
  4058ae:	4621      	mov	r1, r4
  4058b0:	4638      	mov	r0, r7
  4058b2:	47b0      	blx	r6
  4058b4:	2800      	cmp	r0, #0
  4058b6:	d1fa      	bne.n	4058ae <usart_serial_getchar+0x6e>
  4058b8:	e7da      	b.n	405870 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4058ba:	461e      	mov	r6, r3
  4058bc:	4d16      	ldr	r5, [pc, #88]	; (405918 <usart_serial_getchar+0xd8>)
  4058be:	a901      	add	r1, sp, #4
  4058c0:	4630      	mov	r0, r6
  4058c2:	47a8      	blx	r5
  4058c4:	2800      	cmp	r0, #0
  4058c6:	d1fa      	bne.n	4058be <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4058c8:	9b01      	ldr	r3, [sp, #4]
  4058ca:	7023      	strb	r3, [r4, #0]
  4058cc:	e7d3      	b.n	405876 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4058ce:	461e      	mov	r6, r3
  4058d0:	4d11      	ldr	r5, [pc, #68]	; (405918 <usart_serial_getchar+0xd8>)
  4058d2:	a901      	add	r1, sp, #4
  4058d4:	4630      	mov	r0, r6
  4058d6:	47a8      	blx	r5
  4058d8:	2800      	cmp	r0, #0
  4058da:	d1fa      	bne.n	4058d2 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4058dc:	9b01      	ldr	r3, [sp, #4]
  4058de:	7023      	strb	r3, [r4, #0]
  4058e0:	e7c9      	b.n	405876 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4058e2:	461e      	mov	r6, r3
  4058e4:	4d0c      	ldr	r5, [pc, #48]	; (405918 <usart_serial_getchar+0xd8>)
  4058e6:	a901      	add	r1, sp, #4
  4058e8:	4630      	mov	r0, r6
  4058ea:	47a8      	blx	r5
  4058ec:	2800      	cmp	r0, #0
  4058ee:	d1fa      	bne.n	4058e6 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4058f0:	9b01      	ldr	r3, [sp, #4]
  4058f2:	7023      	strb	r3, [r4, #0]
}
  4058f4:	e7bf      	b.n	405876 <usart_serial_getchar+0x36>
  4058f6:	bf00      	nop
  4058f8:	400e0800 	.word	0x400e0800
  4058fc:	400e0a00 	.word	0x400e0a00
  405900:	400e1a00 	.word	0x400e1a00
  405904:	400e1c00 	.word	0x400e1c00
  405908:	40024000 	.word	0x40024000
  40590c:	40028000 	.word	0x40028000
  405910:	4002c000 	.word	0x4002c000
  405914:	004052b9 	.word	0x004052b9
  405918:	004053c7 	.word	0x004053c7

0040591c <usart_serial_putchar>:
{
  40591c:	b570      	push	{r4, r5, r6, lr}
  40591e:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  405920:	4b2a      	ldr	r3, [pc, #168]	; (4059cc <usart_serial_putchar+0xb0>)
  405922:	4298      	cmp	r0, r3
  405924:	d013      	beq.n	40594e <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  405926:	4b2a      	ldr	r3, [pc, #168]	; (4059d0 <usart_serial_putchar+0xb4>)
  405928:	4298      	cmp	r0, r3
  40592a:	d019      	beq.n	405960 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  40592c:	4b29      	ldr	r3, [pc, #164]	; (4059d4 <usart_serial_putchar+0xb8>)
  40592e:	4298      	cmp	r0, r3
  405930:	d01f      	beq.n	405972 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  405932:	4b29      	ldr	r3, [pc, #164]	; (4059d8 <usart_serial_putchar+0xbc>)
  405934:	4298      	cmp	r0, r3
  405936:	d025      	beq.n	405984 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  405938:	4b28      	ldr	r3, [pc, #160]	; (4059dc <usart_serial_putchar+0xc0>)
  40593a:	4298      	cmp	r0, r3
  40593c:	d02b      	beq.n	405996 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  40593e:	4b28      	ldr	r3, [pc, #160]	; (4059e0 <usart_serial_putchar+0xc4>)
  405940:	4298      	cmp	r0, r3
  405942:	d031      	beq.n	4059a8 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  405944:	4b27      	ldr	r3, [pc, #156]	; (4059e4 <usart_serial_putchar+0xc8>)
  405946:	4298      	cmp	r0, r3
  405948:	d037      	beq.n	4059ba <usart_serial_putchar+0x9e>
	return 0;
  40594a:	2000      	movs	r0, #0
}
  40594c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40594e:	461e      	mov	r6, r3
  405950:	4d25      	ldr	r5, [pc, #148]	; (4059e8 <usart_serial_putchar+0xcc>)
  405952:	4621      	mov	r1, r4
  405954:	4630      	mov	r0, r6
  405956:	47a8      	blx	r5
  405958:	2800      	cmp	r0, #0
  40595a:	d1fa      	bne.n	405952 <usart_serial_putchar+0x36>
		return 1;
  40595c:	2001      	movs	r0, #1
  40595e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  405960:	461e      	mov	r6, r3
  405962:	4d21      	ldr	r5, [pc, #132]	; (4059e8 <usart_serial_putchar+0xcc>)
  405964:	4621      	mov	r1, r4
  405966:	4630      	mov	r0, r6
  405968:	47a8      	blx	r5
  40596a:	2800      	cmp	r0, #0
  40596c:	d1fa      	bne.n	405964 <usart_serial_putchar+0x48>
		return 1;
  40596e:	2001      	movs	r0, #1
  405970:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  405972:	461e      	mov	r6, r3
  405974:	4d1c      	ldr	r5, [pc, #112]	; (4059e8 <usart_serial_putchar+0xcc>)
  405976:	4621      	mov	r1, r4
  405978:	4630      	mov	r0, r6
  40597a:	47a8      	blx	r5
  40597c:	2800      	cmp	r0, #0
  40597e:	d1fa      	bne.n	405976 <usart_serial_putchar+0x5a>
		return 1;
  405980:	2001      	movs	r0, #1
  405982:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  405984:	461e      	mov	r6, r3
  405986:	4d18      	ldr	r5, [pc, #96]	; (4059e8 <usart_serial_putchar+0xcc>)
  405988:	4621      	mov	r1, r4
  40598a:	4630      	mov	r0, r6
  40598c:	47a8      	blx	r5
  40598e:	2800      	cmp	r0, #0
  405990:	d1fa      	bne.n	405988 <usart_serial_putchar+0x6c>
		return 1;
  405992:	2001      	movs	r0, #1
  405994:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  405996:	461e      	mov	r6, r3
  405998:	4d14      	ldr	r5, [pc, #80]	; (4059ec <usart_serial_putchar+0xd0>)
  40599a:	4621      	mov	r1, r4
  40599c:	4630      	mov	r0, r6
  40599e:	47a8      	blx	r5
  4059a0:	2800      	cmp	r0, #0
  4059a2:	d1fa      	bne.n	40599a <usart_serial_putchar+0x7e>
		return 1;
  4059a4:	2001      	movs	r0, #1
  4059a6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4059a8:	461e      	mov	r6, r3
  4059aa:	4d10      	ldr	r5, [pc, #64]	; (4059ec <usart_serial_putchar+0xd0>)
  4059ac:	4621      	mov	r1, r4
  4059ae:	4630      	mov	r0, r6
  4059b0:	47a8      	blx	r5
  4059b2:	2800      	cmp	r0, #0
  4059b4:	d1fa      	bne.n	4059ac <usart_serial_putchar+0x90>
		return 1;
  4059b6:	2001      	movs	r0, #1
  4059b8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4059ba:	461e      	mov	r6, r3
  4059bc:	4d0b      	ldr	r5, [pc, #44]	; (4059ec <usart_serial_putchar+0xd0>)
  4059be:	4621      	mov	r1, r4
  4059c0:	4630      	mov	r0, r6
  4059c2:	47a8      	blx	r5
  4059c4:	2800      	cmp	r0, #0
  4059c6:	d1fa      	bne.n	4059be <usart_serial_putchar+0xa2>
		return 1;
  4059c8:	2001      	movs	r0, #1
  4059ca:	bd70      	pop	{r4, r5, r6, pc}
  4059cc:	400e0800 	.word	0x400e0800
  4059d0:	400e0a00 	.word	0x400e0a00
  4059d4:	400e1a00 	.word	0x400e1a00
  4059d8:	400e1c00 	.word	0x400e1c00
  4059dc:	40024000 	.word	0x40024000
  4059e0:	40028000 	.word	0x40028000
  4059e4:	4002c000 	.word	0x4002c000
  4059e8:	004052a7 	.word	0x004052a7
  4059ec:	004053b1 	.word	0x004053b1

004059f0 <vApplicationStackOverflowHook>:
{
  4059f0:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  4059f2:	460a      	mov	r2, r1
  4059f4:	4601      	mov	r1, r0
  4059f6:	4802      	ldr	r0, [pc, #8]	; (405a00 <vApplicationStackOverflowHook+0x10>)
  4059f8:	4b02      	ldr	r3, [pc, #8]	; (405a04 <vApplicationStackOverflowHook+0x14>)
  4059fa:	4798      	blx	r3
  4059fc:	e7fe      	b.n	4059fc <vApplicationStackOverflowHook+0xc>
  4059fe:	bf00      	nop
  405a00:	00409aec 	.word	0x00409aec
  405a04:	00405d39 	.word	0x00405d39

00405a08 <vApplicationTickHook>:
{
  405a08:	4770      	bx	lr

00405a0a <vApplicationMallocFailedHook>:
  405a0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  405a0e:	b672      	cpsid	i
  405a10:	f383 8811 	msr	BASEPRI, r3
  405a14:	f3bf 8f6f 	isb	sy
  405a18:	f3bf 8f4f 	dsb	sy
  405a1c:	b662      	cpsie	i
  405a1e:	e7fe      	b.n	405a1e <vApplicationMallocFailedHook+0x14>

00405a20 <inet_aton>:
{
  405a20:	b4f0      	push	{r4, r5, r6, r7}
  405a22:	3801      	subs	r0, #1
	register u_long acc = 0, addr = 0;
  405a24:	2400      	movs	r4, #0
  405a26:	4622      	mov	r2, r4
	int dots = 0;
  405a28:	4625      	mov	r5, r4
			acc = 0;
  405a2a:	4626      	mov	r6, r4
  405a2c:	e011      	b.n	405a52 <inet_aton+0x32>
		switch (cc) {
  405a2e:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
  405a32:	2f09      	cmp	r7, #9
  405a34:	d814      	bhi.n	405a60 <inet_aton+0x40>
			acc = acc * 10 + (cc - '0');
  405a36:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  405a3a:	eb07 0242 	add.w	r2, r7, r2, lsl #1
			break;
  405a3e:	e007      	b.n	405a50 <inet_aton+0x30>
			if (++dots > 3) {
  405a40:	3501      	adds	r5, #1
  405a42:	2d03      	cmp	r5, #3
  405a44:	dc24      	bgt.n	405a90 <inet_aton+0x70>
			if (acc > 255) {
  405a46:	2aff      	cmp	r2, #255	; 0xff
  405a48:	d824      	bhi.n	405a94 <inet_aton+0x74>
			addr = addr << 8 | acc;
  405a4a:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
			acc = 0;
  405a4e:	4632      	mov	r2, r6
	} while (*cp++) ;
  405a50:	b14b      	cbz	r3, 405a66 <inet_aton+0x46>
		register char cc = *cp;
  405a52:	f810 3f01 	ldrb.w	r3, [r0, #1]!
		switch (cc) {
  405a56:	2b2e      	cmp	r3, #46	; 0x2e
  405a58:	d0f2      	beq.n	405a40 <inet_aton+0x20>
  405a5a:	d8e8      	bhi.n	405a2e <inet_aton+0xe>
  405a5c:	2b00      	cmp	r3, #0
  405a5e:	d0f2      	beq.n	405a46 <inet_aton+0x26>
			return 0;
  405a60:	2000      	movs	r0, #0
}
  405a62:	bcf0      	pop	{r4, r5, r6, r7}
  405a64:	4770      	bx	lr
	if (dots < 3) {
  405a66:	2d02      	cmp	r5, #2
  405a68:	dc03      	bgt.n	405a72 <inet_aton+0x52>
		addr <<= 8 * (3 - dots) ;
  405a6a:	f1c5 0303 	rsb	r3, r5, #3
  405a6e:	00db      	lsls	r3, r3, #3
  405a70:	409c      	lsls	r4, r3
	if (ap) {
  405a72:	b189      	cbz	r1, 405a98 <inet_aton+0x78>
		ap->s_addr = _htonl(addr);
  405a74:	0e23      	lsrs	r3, r4, #24
  405a76:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  405a7a:	0222      	lsls	r2, r4, #8
  405a7c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  405a80:	431a      	orrs	r2, r3
  405a82:	0a23      	lsrs	r3, r4, #8
  405a84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  405a88:	4313      	orrs	r3, r2
  405a8a:	600b      	str	r3, [r1, #0]
	return 1;
  405a8c:	2001      	movs	r0, #1
  405a8e:	e7e8      	b.n	405a62 <inet_aton+0x42>
				return 0;
  405a90:	2000      	movs	r0, #0
  405a92:	e7e6      	b.n	405a62 <inet_aton+0x42>
				return 0;
  405a94:	2000      	movs	r0, #0
  405a96:	e7e4      	b.n	405a62 <inet_aton+0x42>
	return 1;
  405a98:	2001      	movs	r0, #1
  405a9a:	e7e2      	b.n	405a62 <inet_aton+0x42>

00405a9c <task_wifi>:
		printf(szList);
		vTaskDelay(1000);
	}
}

static void task_wifi(void *pvParameters) {
  405a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  405a9e:	b08d      	sub	sp, #52	; 0x34
	uint8_t mac_addr[6];
	uint8_t u8IsMacAddrValid;
	struct sockaddr_in addr_in;
	
	/* Initialize the BSP. */
	nm_bsp_init();
  405aa0:	4b38      	ldr	r3, [pc, #224]	; (405b84 <task_wifi+0xe8>)
  405aa2:	4798      	blx	r3
	
	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  405aa4:	2300      	movs	r3, #0
  405aa6:	9307      	str	r3, [sp, #28]
  405aa8:	9308      	str	r3, [sp, #32]
  405aaa:	9309      	str	r3, [sp, #36]	; 0x24
  405aac:	930a      	str	r3, [sp, #40]	; 0x28
  405aae:	930b      	str	r3, [sp, #44]	; 0x2c

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
  405ab0:	4b35      	ldr	r3, [pc, #212]	; (405b88 <task_wifi+0xec>)
  405ab2:	9306      	str	r3, [sp, #24]
	ret = m2m_wifi_init(&param);
  405ab4:	a806      	add	r0, sp, #24
  405ab6:	4b35      	ldr	r3, [pc, #212]	; (405b8c <task_wifi+0xf0>)
  405ab8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  405aba:	b120      	cbz	r0, 405ac6 <task_wifi+0x2a>
  405abc:	4601      	mov	r1, r0
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  405abe:	4834      	ldr	r0, [pc, #208]	; (405b90 <task_wifi+0xf4>)
  405ac0:	4b34      	ldr	r3, [pc, #208]	; (405b94 <task_wifi+0xf8>)
  405ac2:	4798      	blx	r3
  405ac4:	e7fe      	b.n	405ac4 <task_wifi+0x28>
		while (1) {
		}
	}
	
	/* Initialize socket module. */
	socketInit();
  405ac6:	4b34      	ldr	r3, [pc, #208]	; (405b98 <task_wifi+0xfc>)
  405ac8:	4798      	blx	r3

	/* Register socket callback function. */
	registerSocketCallback(socket_cb, resolve_cb);
  405aca:	4934      	ldr	r1, [pc, #208]	; (405b9c <task_wifi+0x100>)
  405acc:	4834      	ldr	r0, [pc, #208]	; (405ba0 <task_wifi+0x104>)
  405ace:	4b35      	ldr	r3, [pc, #212]	; (405ba4 <task_wifi+0x108>)
  405ad0:	4798      	blx	r3

	/* Connect to router. */
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
  405ad2:	4d35      	ldr	r5, [pc, #212]	; (405ba8 <task_wifi+0x10c>)
  405ad4:	4629      	mov	r1, r5
  405ad6:	4835      	ldr	r0, [pc, #212]	; (405bac <task_wifi+0x110>)
  405ad8:	4c2e      	ldr	r4, [pc, #184]	; (405b94 <task_wifi+0xf8>)
  405ada:	47a0      	blx	r4
	m2m_wifi_set_mac_address(gau8MacAddr);
  405adc:	4834      	ldr	r0, [pc, #208]	; (405bb0 <task_wifi+0x114>)
  405ade:	4b35      	ldr	r3, [pc, #212]	; (405bb4 <task_wifi+0x118>)
  405ae0:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  405ae2:	23ff      	movs	r3, #255	; 0xff
  405ae4:	9300      	str	r3, [sp, #0]
  405ae6:	4b34      	ldr	r3, [pc, #208]	; (405bb8 <task_wifi+0x11c>)
  405ae8:	2201      	movs	r2, #1
  405aea:	210b      	movs	r1, #11
  405aec:	4628      	mov	r0, r5
  405aee:	4d33      	ldr	r5, [pc, #204]	; (405bbc <task_wifi+0x120>)
  405af0:	47a8      	blx	r5

	addr_in.sin_family = AF_INET;
  405af2:	2302      	movs	r3, #2
  405af4:	f8ad 3008 	strh.w	r3, [sp, #8]
	addr_in.sin_port = _htons(MAIN_SERVER_PORT);
  405af8:	f648 0313 	movw	r3, #34835	; 0x8813
  405afc:	f8ad 300a 	strh.w	r3, [sp, #10]
	inet_aton(MAIN_SERVER_NAME, &addr_in.sin_addr);
  405b00:	a903      	add	r1, sp, #12
  405b02:	482f      	ldr	r0, [pc, #188]	; (405bc0 <task_wifi+0x124>)
  405b04:	4b2f      	ldr	r3, [pc, #188]	; (405bc4 <task_wifi+0x128>)
  405b06:	4798      	blx	r3
	printf("Inet aton : %d", addr_in.sin_addr);
  405b08:	9903      	ldr	r1, [sp, #12]
  405b0a:	482f      	ldr	r0, [pc, #188]	; (405bc8 <task_wifi+0x12c>)
  405b0c:	47a0      	blx	r4
	
	while(1){
		m2m_wifi_handle_events(NULL);
  405b0e:	4d2f      	ldr	r5, [pc, #188]	; (405bcc <task_wifi+0x130>)

		if (wifi_connected == M2M_WIFI_CONNECTED) {
  405b10:	4c2f      	ldr	r4, [pc, #188]	; (405bd0 <task_wifi+0x134>)
					}else{
					gbTcpConnection = true;
				}
			}
		}
		vTaskDelay(1000/portTICK_PERIOD_MS);
  405b12:	4e30      	ldr	r6, [pc, #192]	; (405bd4 <task_wifi+0x138>)
  405b14:	e010      	b.n	405b38 <task_wifi+0x9c>
					printf("main: failed to create TCP client socket error!\r\n");
  405b16:	4830      	ldr	r0, [pc, #192]	; (405bd8 <task_wifi+0x13c>)
  405b18:	4b1e      	ldr	r3, [pc, #120]	; (405b94 <task_wifi+0xf8>)
  405b1a:	4798      	blx	r3
					continue;
  405b1c:	e00c      	b.n	405b38 <task_wifi+0x9c>
					close(tcp_client_socket);
  405b1e:	4f2f      	ldr	r7, [pc, #188]	; (405bdc <task_wifi+0x140>)
  405b20:	f997 0000 	ldrsb.w	r0, [r7]
  405b24:	4b2e      	ldr	r3, [pc, #184]	; (405be0 <task_wifi+0x144>)
  405b26:	4798      	blx	r3
					tcp_client_socket = -1;
  405b28:	23ff      	movs	r3, #255	; 0xff
  405b2a:	703b      	strb	r3, [r7, #0]
					printf("error\n");
  405b2c:	482d      	ldr	r0, [pc, #180]	; (405be4 <task_wifi+0x148>)
  405b2e:	4b19      	ldr	r3, [pc, #100]	; (405b94 <task_wifi+0xf8>)
  405b30:	4798      	blx	r3
		vTaskDelay(1000/portTICK_PERIOD_MS);
  405b32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  405b36:	47b0      	blx	r6
		m2m_wifi_handle_events(NULL);
  405b38:	2000      	movs	r0, #0
  405b3a:	47a8      	blx	r5
		if (wifi_connected == M2M_WIFI_CONNECTED) {
  405b3c:	7823      	ldrb	r3, [r4, #0]
  405b3e:	2b01      	cmp	r3, #1
  405b40:	d1f7      	bne.n	405b32 <task_wifi+0x96>
			if (tcp_client_socket < 0) {
  405b42:	4b26      	ldr	r3, [pc, #152]	; (405bdc <task_wifi+0x140>)
  405b44:	f993 3000 	ldrsb.w	r3, [r3]
  405b48:	2b00      	cmp	r3, #0
  405b4a:	daf2      	bge.n	405b32 <task_wifi+0x96>
				printf("socket init \n");
  405b4c:	4826      	ldr	r0, [pc, #152]	; (405be8 <task_wifi+0x14c>)
  405b4e:	4b11      	ldr	r3, [pc, #68]	; (405b94 <task_wifi+0xf8>)
  405b50:	4798      	blx	r3
				if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  405b52:	2200      	movs	r2, #0
  405b54:	2101      	movs	r1, #1
  405b56:	2002      	movs	r0, #2
  405b58:	4b24      	ldr	r3, [pc, #144]	; (405bec <task_wifi+0x150>)
  405b5a:	4798      	blx	r3
  405b5c:	4b1f      	ldr	r3, [pc, #124]	; (405bdc <task_wifi+0x140>)
  405b5e:	7018      	strb	r0, [r3, #0]
  405b60:	2800      	cmp	r0, #0
  405b62:	dbd8      	blt.n	405b16 <task_wifi+0x7a>
				printf("socket connecting\n");
  405b64:	4822      	ldr	r0, [pc, #136]	; (405bf0 <task_wifi+0x154>)
  405b66:	4b0b      	ldr	r3, [pc, #44]	; (405b94 <task_wifi+0xf8>)
  405b68:	4798      	blx	r3
				if (connect(tcp_client_socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
  405b6a:	2210      	movs	r2, #16
  405b6c:	a902      	add	r1, sp, #8
  405b6e:	4b1b      	ldr	r3, [pc, #108]	; (405bdc <task_wifi+0x140>)
  405b70:	f993 0000 	ldrsb.w	r0, [r3]
  405b74:	4b1f      	ldr	r3, [pc, #124]	; (405bf4 <task_wifi+0x158>)
  405b76:	4798      	blx	r3
  405b78:	2800      	cmp	r0, #0
  405b7a:	d1d0      	bne.n	405b1e <task_wifi+0x82>
					gbTcpConnection = true;
  405b7c:	2201      	movs	r2, #1
  405b7e:	4b1e      	ldr	r3, [pc, #120]	; (405bf8 <task_wifi+0x15c>)
  405b80:	701a      	strb	r2, [r3, #0]
  405b82:	e7d6      	b.n	405b32 <task_wifi+0x96>
  405b84:	00401eb1 	.word	0x00401eb1
  405b88:	004057d9 	.word	0x004057d9
  405b8c:	00402cf1 	.word	0x00402cf1
  405b90:	00409a18 	.word	0x00409a18
  405b94:	00405d39 	.word	0x00405d39
  405b98:	004044d1 	.word	0x004044d1
  405b9c:	00405679 	.word	0x00405679
  405ba0:	004056a9 	.word	0x004056a9
  405ba4:	00404515 	.word	0x00404515
  405ba8:	00409a40 	.word	0x00409a40
  405bac:	00409a4c 	.word	0x00409a4c
  405bb0:	20400020 	.word	0x20400020
  405bb4:	00403065 	.word	0x00403065
  405bb8:	004099d4 	.word	0x004099d4
  405bbc:	00403049 	.word	0x00403049
  405bc0:	00409a70 	.word	0x00409a70
  405bc4:	00405a21 	.word	0x00405a21
  405bc8:	00409a7c 	.word	0x00409a7c
  405bcc:	00402ded 	.word	0x00402ded
  405bd0:	2040c968 	.word	0x2040c968
  405bd4:	004013d9 	.word	0x004013d9
  405bd8:	00409a9c 	.word	0x00409a9c
  405bdc:	20400026 	.word	0x20400026
  405be0:	004047d5 	.word	0x004047d5
  405be4:	00409ae4 	.word	0x00409ae4
  405be8:	00409a8c 	.word	0x00409a8c
  405bec:	00404529 	.word	0x00404529
  405bf0:	00409ad0 	.word	0x00409ad0
  405bf4:	00404609 	.word	0x00404609
  405bf8:	2040c960 	.word	0x2040c960

00405bfc <main>:
	}
}

int main(void)
{
  405bfc:	b500      	push	{lr}
  405bfe:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the board. */
	sysclk_init();
  405c00:	4b23      	ldr	r3, [pc, #140]	; (405c90 <main+0x94>)
  405c02:	4798      	blx	r3
	board_init();
  405c04:	4b23      	ldr	r3, [pc, #140]	; (405c94 <main+0x98>)
  405c06:	4798      	blx	r3
  405c08:	200e      	movs	r0, #14
  405c0a:	4e23      	ldr	r6, [pc, #140]	; (405c98 <main+0x9c>)
  405c0c:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  405c0e:	4d23      	ldr	r5, [pc, #140]	; (405c9c <main+0xa0>)
  405c10:	4b23      	ldr	r3, [pc, #140]	; (405ca0 <main+0xa4>)
  405c12:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  405c14:	4a23      	ldr	r2, [pc, #140]	; (405ca4 <main+0xa8>)
  405c16:	4b24      	ldr	r3, [pc, #144]	; (405ca8 <main+0xac>)
  405c18:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  405c1a:	4a24      	ldr	r2, [pc, #144]	; (405cac <main+0xb0>)
  405c1c:	4b24      	ldr	r3, [pc, #144]	; (405cb0 <main+0xb4>)
  405c1e:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  405c20:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  405c24:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  405c26:	23c0      	movs	r3, #192	; 0xc0
  405c28:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  405c2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  405c2e:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  405c30:	2400      	movs	r4, #0
  405c32:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  405c34:	9408      	str	r4, [sp, #32]
  405c36:	200e      	movs	r0, #14
  405c38:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  405c3a:	4a1e      	ldr	r2, [pc, #120]	; (405cb4 <main+0xb8>)
  405c3c:	a904      	add	r1, sp, #16
  405c3e:	4628      	mov	r0, r5
  405c40:	4b1d      	ldr	r3, [pc, #116]	; (405cb8 <main+0xbc>)
  405c42:	4798      	blx	r3
		usart_enable_tx(p_usart);
  405c44:	4628      	mov	r0, r5
  405c46:	4b1d      	ldr	r3, [pc, #116]	; (405cbc <main+0xc0>)
  405c48:	4798      	blx	r3
		usart_enable_rx(p_usart);
  405c4a:	4628      	mov	r0, r5
  405c4c:	4b1c      	ldr	r3, [pc, #112]	; (405cc0 <main+0xc4>)
  405c4e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  405c50:	4e1c      	ldr	r6, [pc, #112]	; (405cc4 <main+0xc8>)
  405c52:	6833      	ldr	r3, [r6, #0]
  405c54:	4621      	mov	r1, r4
  405c56:	6898      	ldr	r0, [r3, #8]
  405c58:	4d1b      	ldr	r5, [pc, #108]	; (405cc8 <main+0xcc>)
  405c5a:	47a8      	blx	r5
	setbuf(stdin, NULL);
  405c5c:	6833      	ldr	r3, [r6, #0]
  405c5e:	4621      	mov	r1, r4
  405c60:	6858      	ldr	r0, [r3, #4]
  405c62:	47a8      	blx	r5

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
  405c64:	4819      	ldr	r0, [pc, #100]	; (405ccc <main+0xd0>)
  405c66:	4b1a      	ldr	r3, [pc, #104]	; (405cd0 <main+0xd4>)
  405c68:	4798      	blx	r3
	
	
	if (xTaskCreate(task_wifi, "Wifi", TASK_WIFI_STACK_SIZE, NULL,
  405c6a:	9403      	str	r4, [sp, #12]
  405c6c:	9402      	str	r4, [sp, #8]
  405c6e:	9401      	str	r4, [sp, #4]
  405c70:	9400      	str	r4, [sp, #0]
  405c72:	4623      	mov	r3, r4
  405c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
  405c78:	4916      	ldr	r1, [pc, #88]	; (405cd4 <main+0xd8>)
  405c7a:	4817      	ldr	r0, [pc, #92]	; (405cd8 <main+0xdc>)
  405c7c:	4c17      	ldr	r4, [pc, #92]	; (405cdc <main+0xe0>)
  405c7e:	47a0      	blx	r4
  405c80:	2801      	cmp	r0, #1
  405c82:	d002      	beq.n	405c8a <main+0x8e>
	TASK_WIFI_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create Wifi task\r\n");
  405c84:	4816      	ldr	r0, [pc, #88]	; (405ce0 <main+0xe4>)
  405c86:	4b12      	ldr	r3, [pc, #72]	; (405cd0 <main+0xd4>)
  405c88:	4798      	blx	r3
	}

	vTaskStartScheduler();
  405c8a:	4b16      	ldr	r3, [pc, #88]	; (405ce4 <main+0xe8>)
  405c8c:	4798      	blx	r3
  405c8e:	e7fe      	b.n	405c8e <main+0x92>
  405c90:	00404939 	.word	0x00404939
  405c94:	00404a35 	.word	0x00404a35
  405c98:	00405101 	.word	0x00405101
  405c9c:	40028000 	.word	0x40028000
  405ca0:	2040caa8 	.word	0x2040caa8
  405ca4:	0040591d 	.word	0x0040591d
  405ca8:	2040caa4 	.word	0x2040caa4
  405cac:	00405841 	.word	0x00405841
  405cb0:	2040caa0 	.word	0x2040caa0
  405cb4:	08f0d180 	.word	0x08f0d180
  405cb8:	00405351 	.word	0x00405351
  405cbc:	004053a5 	.word	0x004053a5
  405cc0:	004053ab 	.word	0x004053ab
  405cc4:	20400028 	.word	0x20400028
  405cc8:	00405f31 	.word	0x00405f31
  405ccc:	004098cc 	.word	0x004098cc
  405cd0:	00405d39 	.word	0x00405d39
  405cd4:	00409930 	.word	0x00409930
  405cd8:	00405a9d 	.word	0x00405a9d
  405cdc:	00400e91 	.word	0x00400e91
  405ce0:	00409938 	.word	0x00409938
  405ce4:	004010c5 	.word	0x004010c5

00405ce8 <__libc_init_array>:
  405ce8:	b570      	push	{r4, r5, r6, lr}
  405cea:	4e0f      	ldr	r6, [pc, #60]	; (405d28 <__libc_init_array+0x40>)
  405cec:	4d0f      	ldr	r5, [pc, #60]	; (405d2c <__libc_init_array+0x44>)
  405cee:	1b76      	subs	r6, r6, r5
  405cf0:	10b6      	asrs	r6, r6, #2
  405cf2:	bf18      	it	ne
  405cf4:	2400      	movne	r4, #0
  405cf6:	d005      	beq.n	405d04 <__libc_init_array+0x1c>
  405cf8:	3401      	adds	r4, #1
  405cfa:	f855 3b04 	ldr.w	r3, [r5], #4
  405cfe:	4798      	blx	r3
  405d00:	42a6      	cmp	r6, r4
  405d02:	d1f9      	bne.n	405cf8 <__libc_init_array+0x10>
  405d04:	4e0a      	ldr	r6, [pc, #40]	; (405d30 <__libc_init_array+0x48>)
  405d06:	4d0b      	ldr	r5, [pc, #44]	; (405d34 <__libc_init_array+0x4c>)
  405d08:	1b76      	subs	r6, r6, r5
  405d0a:	f003 ffe5 	bl	409cd8 <_init>
  405d0e:	10b6      	asrs	r6, r6, #2
  405d10:	bf18      	it	ne
  405d12:	2400      	movne	r4, #0
  405d14:	d006      	beq.n	405d24 <__libc_init_array+0x3c>
  405d16:	3401      	adds	r4, #1
  405d18:	f855 3b04 	ldr.w	r3, [r5], #4
  405d1c:	4798      	blx	r3
  405d1e:	42a6      	cmp	r6, r4
  405d20:	d1f9      	bne.n	405d16 <__libc_init_array+0x2e>
  405d22:	bd70      	pop	{r4, r5, r6, pc}
  405d24:	bd70      	pop	{r4, r5, r6, pc}
  405d26:	bf00      	nop
  405d28:	00409ce4 	.word	0x00409ce4
  405d2c:	00409ce4 	.word	0x00409ce4
  405d30:	00409cec 	.word	0x00409cec
  405d34:	00409ce4 	.word	0x00409ce4

00405d38 <iprintf>:
  405d38:	b40f      	push	{r0, r1, r2, r3}
  405d3a:	b500      	push	{lr}
  405d3c:	4907      	ldr	r1, [pc, #28]	; (405d5c <iprintf+0x24>)
  405d3e:	b083      	sub	sp, #12
  405d40:	ab04      	add	r3, sp, #16
  405d42:	6808      	ldr	r0, [r1, #0]
  405d44:	f853 2b04 	ldr.w	r2, [r3], #4
  405d48:	6881      	ldr	r1, [r0, #8]
  405d4a:	9301      	str	r3, [sp, #4]
  405d4c:	f000 fa86 	bl	40625c <_vfiprintf_r>
  405d50:	b003      	add	sp, #12
  405d52:	f85d eb04 	ldr.w	lr, [sp], #4
  405d56:	b004      	add	sp, #16
  405d58:	4770      	bx	lr
  405d5a:	bf00      	nop
  405d5c:	20400028 	.word	0x20400028

00405d60 <memcpy>:
  405d60:	4684      	mov	ip, r0
  405d62:	ea41 0300 	orr.w	r3, r1, r0
  405d66:	f013 0303 	ands.w	r3, r3, #3
  405d6a:	d16d      	bne.n	405e48 <memcpy+0xe8>
  405d6c:	3a40      	subs	r2, #64	; 0x40
  405d6e:	d341      	bcc.n	405df4 <memcpy+0x94>
  405d70:	f851 3b04 	ldr.w	r3, [r1], #4
  405d74:	f840 3b04 	str.w	r3, [r0], #4
  405d78:	f851 3b04 	ldr.w	r3, [r1], #4
  405d7c:	f840 3b04 	str.w	r3, [r0], #4
  405d80:	f851 3b04 	ldr.w	r3, [r1], #4
  405d84:	f840 3b04 	str.w	r3, [r0], #4
  405d88:	f851 3b04 	ldr.w	r3, [r1], #4
  405d8c:	f840 3b04 	str.w	r3, [r0], #4
  405d90:	f851 3b04 	ldr.w	r3, [r1], #4
  405d94:	f840 3b04 	str.w	r3, [r0], #4
  405d98:	f851 3b04 	ldr.w	r3, [r1], #4
  405d9c:	f840 3b04 	str.w	r3, [r0], #4
  405da0:	f851 3b04 	ldr.w	r3, [r1], #4
  405da4:	f840 3b04 	str.w	r3, [r0], #4
  405da8:	f851 3b04 	ldr.w	r3, [r1], #4
  405dac:	f840 3b04 	str.w	r3, [r0], #4
  405db0:	f851 3b04 	ldr.w	r3, [r1], #4
  405db4:	f840 3b04 	str.w	r3, [r0], #4
  405db8:	f851 3b04 	ldr.w	r3, [r1], #4
  405dbc:	f840 3b04 	str.w	r3, [r0], #4
  405dc0:	f851 3b04 	ldr.w	r3, [r1], #4
  405dc4:	f840 3b04 	str.w	r3, [r0], #4
  405dc8:	f851 3b04 	ldr.w	r3, [r1], #4
  405dcc:	f840 3b04 	str.w	r3, [r0], #4
  405dd0:	f851 3b04 	ldr.w	r3, [r1], #4
  405dd4:	f840 3b04 	str.w	r3, [r0], #4
  405dd8:	f851 3b04 	ldr.w	r3, [r1], #4
  405ddc:	f840 3b04 	str.w	r3, [r0], #4
  405de0:	f851 3b04 	ldr.w	r3, [r1], #4
  405de4:	f840 3b04 	str.w	r3, [r0], #4
  405de8:	f851 3b04 	ldr.w	r3, [r1], #4
  405dec:	f840 3b04 	str.w	r3, [r0], #4
  405df0:	3a40      	subs	r2, #64	; 0x40
  405df2:	d2bd      	bcs.n	405d70 <memcpy+0x10>
  405df4:	3230      	adds	r2, #48	; 0x30
  405df6:	d311      	bcc.n	405e1c <memcpy+0xbc>
  405df8:	f851 3b04 	ldr.w	r3, [r1], #4
  405dfc:	f840 3b04 	str.w	r3, [r0], #4
  405e00:	f851 3b04 	ldr.w	r3, [r1], #4
  405e04:	f840 3b04 	str.w	r3, [r0], #4
  405e08:	f851 3b04 	ldr.w	r3, [r1], #4
  405e0c:	f840 3b04 	str.w	r3, [r0], #4
  405e10:	f851 3b04 	ldr.w	r3, [r1], #4
  405e14:	f840 3b04 	str.w	r3, [r0], #4
  405e18:	3a10      	subs	r2, #16
  405e1a:	d2ed      	bcs.n	405df8 <memcpy+0x98>
  405e1c:	320c      	adds	r2, #12
  405e1e:	d305      	bcc.n	405e2c <memcpy+0xcc>
  405e20:	f851 3b04 	ldr.w	r3, [r1], #4
  405e24:	f840 3b04 	str.w	r3, [r0], #4
  405e28:	3a04      	subs	r2, #4
  405e2a:	d2f9      	bcs.n	405e20 <memcpy+0xc0>
  405e2c:	3204      	adds	r2, #4
  405e2e:	d008      	beq.n	405e42 <memcpy+0xe2>
  405e30:	07d2      	lsls	r2, r2, #31
  405e32:	bf1c      	itt	ne
  405e34:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405e38:	f800 3b01 	strbne.w	r3, [r0], #1
  405e3c:	d301      	bcc.n	405e42 <memcpy+0xe2>
  405e3e:	880b      	ldrh	r3, [r1, #0]
  405e40:	8003      	strh	r3, [r0, #0]
  405e42:	4660      	mov	r0, ip
  405e44:	4770      	bx	lr
  405e46:	bf00      	nop
  405e48:	2a08      	cmp	r2, #8
  405e4a:	d313      	bcc.n	405e74 <memcpy+0x114>
  405e4c:	078b      	lsls	r3, r1, #30
  405e4e:	d08d      	beq.n	405d6c <memcpy+0xc>
  405e50:	f010 0303 	ands.w	r3, r0, #3
  405e54:	d08a      	beq.n	405d6c <memcpy+0xc>
  405e56:	f1c3 0304 	rsb	r3, r3, #4
  405e5a:	1ad2      	subs	r2, r2, r3
  405e5c:	07db      	lsls	r3, r3, #31
  405e5e:	bf1c      	itt	ne
  405e60:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405e64:	f800 3b01 	strbne.w	r3, [r0], #1
  405e68:	d380      	bcc.n	405d6c <memcpy+0xc>
  405e6a:	f831 3b02 	ldrh.w	r3, [r1], #2
  405e6e:	f820 3b02 	strh.w	r3, [r0], #2
  405e72:	e77b      	b.n	405d6c <memcpy+0xc>
  405e74:	3a04      	subs	r2, #4
  405e76:	d3d9      	bcc.n	405e2c <memcpy+0xcc>
  405e78:	3a01      	subs	r2, #1
  405e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
  405e7e:	f800 3b01 	strb.w	r3, [r0], #1
  405e82:	d2f9      	bcs.n	405e78 <memcpy+0x118>
  405e84:	780b      	ldrb	r3, [r1, #0]
  405e86:	7003      	strb	r3, [r0, #0]
  405e88:	784b      	ldrb	r3, [r1, #1]
  405e8a:	7043      	strb	r3, [r0, #1]
  405e8c:	788b      	ldrb	r3, [r1, #2]
  405e8e:	7083      	strb	r3, [r0, #2]
  405e90:	4660      	mov	r0, ip
  405e92:	4770      	bx	lr

00405e94 <memset>:
  405e94:	b470      	push	{r4, r5, r6}
  405e96:	0786      	lsls	r6, r0, #30
  405e98:	d046      	beq.n	405f28 <memset+0x94>
  405e9a:	1e54      	subs	r4, r2, #1
  405e9c:	2a00      	cmp	r2, #0
  405e9e:	d041      	beq.n	405f24 <memset+0x90>
  405ea0:	b2ca      	uxtb	r2, r1
  405ea2:	4603      	mov	r3, r0
  405ea4:	e002      	b.n	405eac <memset+0x18>
  405ea6:	f114 34ff 	adds.w	r4, r4, #4294967295
  405eaa:	d33b      	bcc.n	405f24 <memset+0x90>
  405eac:	f803 2b01 	strb.w	r2, [r3], #1
  405eb0:	079d      	lsls	r5, r3, #30
  405eb2:	d1f8      	bne.n	405ea6 <memset+0x12>
  405eb4:	2c03      	cmp	r4, #3
  405eb6:	d92e      	bls.n	405f16 <memset+0x82>
  405eb8:	b2cd      	uxtb	r5, r1
  405eba:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  405ebe:	2c0f      	cmp	r4, #15
  405ec0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  405ec4:	d919      	bls.n	405efa <memset+0x66>
  405ec6:	f103 0210 	add.w	r2, r3, #16
  405eca:	4626      	mov	r6, r4
  405ecc:	3e10      	subs	r6, #16
  405ece:	2e0f      	cmp	r6, #15
  405ed0:	f842 5c10 	str.w	r5, [r2, #-16]
  405ed4:	f842 5c0c 	str.w	r5, [r2, #-12]
  405ed8:	f842 5c08 	str.w	r5, [r2, #-8]
  405edc:	f842 5c04 	str.w	r5, [r2, #-4]
  405ee0:	f102 0210 	add.w	r2, r2, #16
  405ee4:	d8f2      	bhi.n	405ecc <memset+0x38>
  405ee6:	f1a4 0210 	sub.w	r2, r4, #16
  405eea:	f022 020f 	bic.w	r2, r2, #15
  405eee:	f004 040f 	and.w	r4, r4, #15
  405ef2:	3210      	adds	r2, #16
  405ef4:	2c03      	cmp	r4, #3
  405ef6:	4413      	add	r3, r2
  405ef8:	d90d      	bls.n	405f16 <memset+0x82>
  405efa:	461e      	mov	r6, r3
  405efc:	4622      	mov	r2, r4
  405efe:	3a04      	subs	r2, #4
  405f00:	2a03      	cmp	r2, #3
  405f02:	f846 5b04 	str.w	r5, [r6], #4
  405f06:	d8fa      	bhi.n	405efe <memset+0x6a>
  405f08:	1f22      	subs	r2, r4, #4
  405f0a:	f022 0203 	bic.w	r2, r2, #3
  405f0e:	3204      	adds	r2, #4
  405f10:	4413      	add	r3, r2
  405f12:	f004 0403 	and.w	r4, r4, #3
  405f16:	b12c      	cbz	r4, 405f24 <memset+0x90>
  405f18:	b2c9      	uxtb	r1, r1
  405f1a:	441c      	add	r4, r3
  405f1c:	f803 1b01 	strb.w	r1, [r3], #1
  405f20:	429c      	cmp	r4, r3
  405f22:	d1fb      	bne.n	405f1c <memset+0x88>
  405f24:	bc70      	pop	{r4, r5, r6}
  405f26:	4770      	bx	lr
  405f28:	4614      	mov	r4, r2
  405f2a:	4603      	mov	r3, r0
  405f2c:	e7c2      	b.n	405eb4 <memset+0x20>
  405f2e:	bf00      	nop

00405f30 <setbuf>:
  405f30:	2900      	cmp	r1, #0
  405f32:	bf0c      	ite	eq
  405f34:	2202      	moveq	r2, #2
  405f36:	2200      	movne	r2, #0
  405f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405f3c:	f000 b800 	b.w	405f40 <setvbuf>

00405f40 <setvbuf>:
  405f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405f44:	4c61      	ldr	r4, [pc, #388]	; (4060cc <setvbuf+0x18c>)
  405f46:	6825      	ldr	r5, [r4, #0]
  405f48:	b083      	sub	sp, #12
  405f4a:	4604      	mov	r4, r0
  405f4c:	460f      	mov	r7, r1
  405f4e:	4690      	mov	r8, r2
  405f50:	461e      	mov	r6, r3
  405f52:	b115      	cbz	r5, 405f5a <setvbuf+0x1a>
  405f54:	6bab      	ldr	r3, [r5, #56]	; 0x38
  405f56:	2b00      	cmp	r3, #0
  405f58:	d064      	beq.n	406024 <setvbuf+0xe4>
  405f5a:	f1b8 0f02 	cmp.w	r8, #2
  405f5e:	d006      	beq.n	405f6e <setvbuf+0x2e>
  405f60:	f1b8 0f01 	cmp.w	r8, #1
  405f64:	f200 809f 	bhi.w	4060a6 <setvbuf+0x166>
  405f68:	2e00      	cmp	r6, #0
  405f6a:	f2c0 809c 	blt.w	4060a6 <setvbuf+0x166>
  405f6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405f70:	07d8      	lsls	r0, r3, #31
  405f72:	d534      	bpl.n	405fde <setvbuf+0x9e>
  405f74:	4621      	mov	r1, r4
  405f76:	4628      	mov	r0, r5
  405f78:	f001 f90e 	bl	407198 <_fflush_r>
  405f7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405f7e:	b141      	cbz	r1, 405f92 <setvbuf+0x52>
  405f80:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405f84:	4299      	cmp	r1, r3
  405f86:	d002      	beq.n	405f8e <setvbuf+0x4e>
  405f88:	4628      	mov	r0, r5
  405f8a:	f001 fa83 	bl	407494 <_free_r>
  405f8e:	2300      	movs	r3, #0
  405f90:	6323      	str	r3, [r4, #48]	; 0x30
  405f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405f96:	2200      	movs	r2, #0
  405f98:	61a2      	str	r2, [r4, #24]
  405f9a:	6062      	str	r2, [r4, #4]
  405f9c:	061a      	lsls	r2, r3, #24
  405f9e:	d43a      	bmi.n	406016 <setvbuf+0xd6>
  405fa0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  405fa4:	f023 0303 	bic.w	r3, r3, #3
  405fa8:	f1b8 0f02 	cmp.w	r8, #2
  405fac:	81a3      	strh	r3, [r4, #12]
  405fae:	d01d      	beq.n	405fec <setvbuf+0xac>
  405fb0:	ab01      	add	r3, sp, #4
  405fb2:	466a      	mov	r2, sp
  405fb4:	4621      	mov	r1, r4
  405fb6:	4628      	mov	r0, r5
  405fb8:	f001 fd0a 	bl	4079d0 <__swhatbuf_r>
  405fbc:	89a3      	ldrh	r3, [r4, #12]
  405fbe:	4318      	orrs	r0, r3
  405fc0:	81a0      	strh	r0, [r4, #12]
  405fc2:	2e00      	cmp	r6, #0
  405fc4:	d132      	bne.n	40602c <setvbuf+0xec>
  405fc6:	9e00      	ldr	r6, [sp, #0]
  405fc8:	4630      	mov	r0, r6
  405fca:	f001 fd79 	bl	407ac0 <malloc>
  405fce:	4607      	mov	r7, r0
  405fd0:	2800      	cmp	r0, #0
  405fd2:	d06b      	beq.n	4060ac <setvbuf+0x16c>
  405fd4:	89a3      	ldrh	r3, [r4, #12]
  405fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405fda:	81a3      	strh	r3, [r4, #12]
  405fdc:	e028      	b.n	406030 <setvbuf+0xf0>
  405fde:	89a3      	ldrh	r3, [r4, #12]
  405fe0:	0599      	lsls	r1, r3, #22
  405fe2:	d4c7      	bmi.n	405f74 <setvbuf+0x34>
  405fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405fe6:	f001 fcef 	bl	4079c8 <__retarget_lock_acquire_recursive>
  405fea:	e7c3      	b.n	405f74 <setvbuf+0x34>
  405fec:	2500      	movs	r5, #0
  405fee:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405ff0:	2600      	movs	r6, #0
  405ff2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405ff6:	f043 0302 	orr.w	r3, r3, #2
  405ffa:	2001      	movs	r0, #1
  405ffc:	60a6      	str	r6, [r4, #8]
  405ffe:	07ce      	lsls	r6, r1, #31
  406000:	81a3      	strh	r3, [r4, #12]
  406002:	6022      	str	r2, [r4, #0]
  406004:	6122      	str	r2, [r4, #16]
  406006:	6160      	str	r0, [r4, #20]
  406008:	d401      	bmi.n	40600e <setvbuf+0xce>
  40600a:	0598      	lsls	r0, r3, #22
  40600c:	d53e      	bpl.n	40608c <setvbuf+0x14c>
  40600e:	4628      	mov	r0, r5
  406010:	b003      	add	sp, #12
  406012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406016:	6921      	ldr	r1, [r4, #16]
  406018:	4628      	mov	r0, r5
  40601a:	f001 fa3b 	bl	407494 <_free_r>
  40601e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406022:	e7bd      	b.n	405fa0 <setvbuf+0x60>
  406024:	4628      	mov	r0, r5
  406026:	f001 f90f 	bl	407248 <__sinit>
  40602a:	e796      	b.n	405f5a <setvbuf+0x1a>
  40602c:	2f00      	cmp	r7, #0
  40602e:	d0cb      	beq.n	405fc8 <setvbuf+0x88>
  406030:	6bab      	ldr	r3, [r5, #56]	; 0x38
  406032:	2b00      	cmp	r3, #0
  406034:	d033      	beq.n	40609e <setvbuf+0x15e>
  406036:	9b00      	ldr	r3, [sp, #0]
  406038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40603c:	6027      	str	r7, [r4, #0]
  40603e:	429e      	cmp	r6, r3
  406040:	bf1c      	itt	ne
  406042:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  406046:	81a2      	strhne	r2, [r4, #12]
  406048:	f1b8 0f01 	cmp.w	r8, #1
  40604c:	bf04      	itt	eq
  40604e:	f042 0201 	orreq.w	r2, r2, #1
  406052:	81a2      	strheq	r2, [r4, #12]
  406054:	b292      	uxth	r2, r2
  406056:	f012 0308 	ands.w	r3, r2, #8
  40605a:	6127      	str	r7, [r4, #16]
  40605c:	6166      	str	r6, [r4, #20]
  40605e:	d00e      	beq.n	40607e <setvbuf+0x13e>
  406060:	07d1      	lsls	r1, r2, #31
  406062:	d51a      	bpl.n	40609a <setvbuf+0x15a>
  406064:	6e65      	ldr	r5, [r4, #100]	; 0x64
  406066:	4276      	negs	r6, r6
  406068:	2300      	movs	r3, #0
  40606a:	f015 0501 	ands.w	r5, r5, #1
  40606e:	61a6      	str	r6, [r4, #24]
  406070:	60a3      	str	r3, [r4, #8]
  406072:	d009      	beq.n	406088 <setvbuf+0x148>
  406074:	2500      	movs	r5, #0
  406076:	4628      	mov	r0, r5
  406078:	b003      	add	sp, #12
  40607a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40607e:	60a3      	str	r3, [r4, #8]
  406080:	6e65      	ldr	r5, [r4, #100]	; 0x64
  406082:	f015 0501 	ands.w	r5, r5, #1
  406086:	d1f5      	bne.n	406074 <setvbuf+0x134>
  406088:	0593      	lsls	r3, r2, #22
  40608a:	d4c0      	bmi.n	40600e <setvbuf+0xce>
  40608c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40608e:	f001 fc9d 	bl	4079cc <__retarget_lock_release_recursive>
  406092:	4628      	mov	r0, r5
  406094:	b003      	add	sp, #12
  406096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40609a:	60a6      	str	r6, [r4, #8]
  40609c:	e7f0      	b.n	406080 <setvbuf+0x140>
  40609e:	4628      	mov	r0, r5
  4060a0:	f001 f8d2 	bl	407248 <__sinit>
  4060a4:	e7c7      	b.n	406036 <setvbuf+0xf6>
  4060a6:	f04f 35ff 	mov.w	r5, #4294967295
  4060aa:	e7b0      	b.n	40600e <setvbuf+0xce>
  4060ac:	f8dd 9000 	ldr.w	r9, [sp]
  4060b0:	45b1      	cmp	r9, r6
  4060b2:	d004      	beq.n	4060be <setvbuf+0x17e>
  4060b4:	4648      	mov	r0, r9
  4060b6:	f001 fd03 	bl	407ac0 <malloc>
  4060ba:	4607      	mov	r7, r0
  4060bc:	b920      	cbnz	r0, 4060c8 <setvbuf+0x188>
  4060be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4060c2:	f04f 35ff 	mov.w	r5, #4294967295
  4060c6:	e792      	b.n	405fee <setvbuf+0xae>
  4060c8:	464e      	mov	r6, r9
  4060ca:	e783      	b.n	405fd4 <setvbuf+0x94>
  4060cc:	20400028 	.word	0x20400028
	...

00406100 <strlen>:
  406100:	f890 f000 	pld	[r0]
  406104:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406108:	f020 0107 	bic.w	r1, r0, #7
  40610c:	f06f 0c00 	mvn.w	ip, #0
  406110:	f010 0407 	ands.w	r4, r0, #7
  406114:	f891 f020 	pld	[r1, #32]
  406118:	f040 8049 	bne.w	4061ae <strlen+0xae>
  40611c:	f04f 0400 	mov.w	r4, #0
  406120:	f06f 0007 	mvn.w	r0, #7
  406124:	e9d1 2300 	ldrd	r2, r3, [r1]
  406128:	f891 f040 	pld	[r1, #64]	; 0x40
  40612c:	f100 0008 	add.w	r0, r0, #8
  406130:	fa82 f24c 	uadd8	r2, r2, ip
  406134:	faa4 f28c 	sel	r2, r4, ip
  406138:	fa83 f34c 	uadd8	r3, r3, ip
  40613c:	faa2 f38c 	sel	r3, r2, ip
  406140:	bb4b      	cbnz	r3, 406196 <strlen+0x96>
  406142:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406146:	fa82 f24c 	uadd8	r2, r2, ip
  40614a:	f100 0008 	add.w	r0, r0, #8
  40614e:	faa4 f28c 	sel	r2, r4, ip
  406152:	fa83 f34c 	uadd8	r3, r3, ip
  406156:	faa2 f38c 	sel	r3, r2, ip
  40615a:	b9e3      	cbnz	r3, 406196 <strlen+0x96>
  40615c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406160:	fa82 f24c 	uadd8	r2, r2, ip
  406164:	f100 0008 	add.w	r0, r0, #8
  406168:	faa4 f28c 	sel	r2, r4, ip
  40616c:	fa83 f34c 	uadd8	r3, r3, ip
  406170:	faa2 f38c 	sel	r3, r2, ip
  406174:	b97b      	cbnz	r3, 406196 <strlen+0x96>
  406176:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40617a:	f101 0120 	add.w	r1, r1, #32
  40617e:	fa82 f24c 	uadd8	r2, r2, ip
  406182:	f100 0008 	add.w	r0, r0, #8
  406186:	faa4 f28c 	sel	r2, r4, ip
  40618a:	fa83 f34c 	uadd8	r3, r3, ip
  40618e:	faa2 f38c 	sel	r3, r2, ip
  406192:	2b00      	cmp	r3, #0
  406194:	d0c6      	beq.n	406124 <strlen+0x24>
  406196:	2a00      	cmp	r2, #0
  406198:	bf04      	itt	eq
  40619a:	3004      	addeq	r0, #4
  40619c:	461a      	moveq	r2, r3
  40619e:	ba12      	rev	r2, r2
  4061a0:	fab2 f282 	clz	r2, r2
  4061a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4061a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4061ac:	4770      	bx	lr
  4061ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4061b2:	f004 0503 	and.w	r5, r4, #3
  4061b6:	f1c4 0000 	rsb	r0, r4, #0
  4061ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4061be:	f014 0f04 	tst.w	r4, #4
  4061c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4061c6:	fa0c f505 	lsl.w	r5, ip, r5
  4061ca:	ea62 0205 	orn	r2, r2, r5
  4061ce:	bf1c      	itt	ne
  4061d0:	ea63 0305 	ornne	r3, r3, r5
  4061d4:	4662      	movne	r2, ip
  4061d6:	f04f 0400 	mov.w	r4, #0
  4061da:	e7a9      	b.n	406130 <strlen+0x30>

004061dc <__sprint_r.part.0>:
  4061dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4061e0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4061e2:	049c      	lsls	r4, r3, #18
  4061e4:	4693      	mov	fp, r2
  4061e6:	d52f      	bpl.n	406248 <__sprint_r.part.0+0x6c>
  4061e8:	6893      	ldr	r3, [r2, #8]
  4061ea:	6812      	ldr	r2, [r2, #0]
  4061ec:	b353      	cbz	r3, 406244 <__sprint_r.part.0+0x68>
  4061ee:	460e      	mov	r6, r1
  4061f0:	4607      	mov	r7, r0
  4061f2:	f102 0908 	add.w	r9, r2, #8
  4061f6:	e919 0420 	ldmdb	r9, {r5, sl}
  4061fa:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4061fe:	d017      	beq.n	406230 <__sprint_r.part.0+0x54>
  406200:	3d04      	subs	r5, #4
  406202:	2400      	movs	r4, #0
  406204:	e001      	b.n	40620a <__sprint_r.part.0+0x2e>
  406206:	45a0      	cmp	r8, r4
  406208:	d010      	beq.n	40622c <__sprint_r.part.0+0x50>
  40620a:	4632      	mov	r2, r6
  40620c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  406210:	4638      	mov	r0, r7
  406212:	f001 f8bb 	bl	40738c <_fputwc_r>
  406216:	1c43      	adds	r3, r0, #1
  406218:	f104 0401 	add.w	r4, r4, #1
  40621c:	d1f3      	bne.n	406206 <__sprint_r.part.0+0x2a>
  40621e:	2300      	movs	r3, #0
  406220:	f8cb 3008 	str.w	r3, [fp, #8]
  406224:	f8cb 3004 	str.w	r3, [fp, #4]
  406228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40622c:	f8db 3008 	ldr.w	r3, [fp, #8]
  406230:	f02a 0a03 	bic.w	sl, sl, #3
  406234:	eba3 030a 	sub.w	r3, r3, sl
  406238:	f8cb 3008 	str.w	r3, [fp, #8]
  40623c:	f109 0908 	add.w	r9, r9, #8
  406240:	2b00      	cmp	r3, #0
  406242:	d1d8      	bne.n	4061f6 <__sprint_r.part.0+0x1a>
  406244:	2000      	movs	r0, #0
  406246:	e7ea      	b.n	40621e <__sprint_r.part.0+0x42>
  406248:	f001 fa0a 	bl	407660 <__sfvwrite_r>
  40624c:	2300      	movs	r3, #0
  40624e:	f8cb 3008 	str.w	r3, [fp, #8]
  406252:	f8cb 3004 	str.w	r3, [fp, #4]
  406256:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40625a:	bf00      	nop

0040625c <_vfiprintf_r>:
  40625c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406260:	b0ad      	sub	sp, #180	; 0xb4
  406262:	461d      	mov	r5, r3
  406264:	468b      	mov	fp, r1
  406266:	4690      	mov	r8, r2
  406268:	9307      	str	r3, [sp, #28]
  40626a:	9006      	str	r0, [sp, #24]
  40626c:	b118      	cbz	r0, 406276 <_vfiprintf_r+0x1a>
  40626e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406270:	2b00      	cmp	r3, #0
  406272:	f000 80f3 	beq.w	40645c <_vfiprintf_r+0x200>
  406276:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40627a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40627e:	07df      	lsls	r7, r3, #31
  406280:	b281      	uxth	r1, r0
  406282:	d402      	bmi.n	40628a <_vfiprintf_r+0x2e>
  406284:	058e      	lsls	r6, r1, #22
  406286:	f140 80fc 	bpl.w	406482 <_vfiprintf_r+0x226>
  40628a:	048c      	lsls	r4, r1, #18
  40628c:	d40a      	bmi.n	4062a4 <_vfiprintf_r+0x48>
  40628e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406292:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  406296:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40629a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40629e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4062a2:	b289      	uxth	r1, r1
  4062a4:	0708      	lsls	r0, r1, #28
  4062a6:	f140 80b3 	bpl.w	406410 <_vfiprintf_r+0x1b4>
  4062aa:	f8db 3010 	ldr.w	r3, [fp, #16]
  4062ae:	2b00      	cmp	r3, #0
  4062b0:	f000 80ae 	beq.w	406410 <_vfiprintf_r+0x1b4>
  4062b4:	f001 031a 	and.w	r3, r1, #26
  4062b8:	2b0a      	cmp	r3, #10
  4062ba:	f000 80b5 	beq.w	406428 <_vfiprintf_r+0x1cc>
  4062be:	2300      	movs	r3, #0
  4062c0:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4062c4:	930b      	str	r3, [sp, #44]	; 0x2c
  4062c6:	9311      	str	r3, [sp, #68]	; 0x44
  4062c8:	9310      	str	r3, [sp, #64]	; 0x40
  4062ca:	9303      	str	r3, [sp, #12]
  4062cc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4062d0:	46ca      	mov	sl, r9
  4062d2:	f8cd b010 	str.w	fp, [sp, #16]
  4062d6:	f898 3000 	ldrb.w	r3, [r8]
  4062da:	4644      	mov	r4, r8
  4062dc:	b1fb      	cbz	r3, 40631e <_vfiprintf_r+0xc2>
  4062de:	2b25      	cmp	r3, #37	; 0x25
  4062e0:	d102      	bne.n	4062e8 <_vfiprintf_r+0x8c>
  4062e2:	e01c      	b.n	40631e <_vfiprintf_r+0xc2>
  4062e4:	2b25      	cmp	r3, #37	; 0x25
  4062e6:	d003      	beq.n	4062f0 <_vfiprintf_r+0x94>
  4062e8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4062ec:	2b00      	cmp	r3, #0
  4062ee:	d1f9      	bne.n	4062e4 <_vfiprintf_r+0x88>
  4062f0:	eba4 0508 	sub.w	r5, r4, r8
  4062f4:	b19d      	cbz	r5, 40631e <_vfiprintf_r+0xc2>
  4062f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4062f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4062fa:	f8ca 8000 	str.w	r8, [sl]
  4062fe:	3301      	adds	r3, #1
  406300:	442a      	add	r2, r5
  406302:	2b07      	cmp	r3, #7
  406304:	f8ca 5004 	str.w	r5, [sl, #4]
  406308:	9211      	str	r2, [sp, #68]	; 0x44
  40630a:	9310      	str	r3, [sp, #64]	; 0x40
  40630c:	dd7a      	ble.n	406404 <_vfiprintf_r+0x1a8>
  40630e:	2a00      	cmp	r2, #0
  406310:	f040 84b0 	bne.w	406c74 <_vfiprintf_r+0xa18>
  406314:	9b03      	ldr	r3, [sp, #12]
  406316:	9210      	str	r2, [sp, #64]	; 0x40
  406318:	442b      	add	r3, r5
  40631a:	46ca      	mov	sl, r9
  40631c:	9303      	str	r3, [sp, #12]
  40631e:	7823      	ldrb	r3, [r4, #0]
  406320:	2b00      	cmp	r3, #0
  406322:	f000 83e0 	beq.w	406ae6 <_vfiprintf_r+0x88a>
  406326:	2000      	movs	r0, #0
  406328:	f04f 0300 	mov.w	r3, #0
  40632c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  406330:	f104 0801 	add.w	r8, r4, #1
  406334:	7862      	ldrb	r2, [r4, #1]
  406336:	4605      	mov	r5, r0
  406338:	4606      	mov	r6, r0
  40633a:	4603      	mov	r3, r0
  40633c:	f04f 34ff 	mov.w	r4, #4294967295
  406340:	f108 0801 	add.w	r8, r8, #1
  406344:	f1a2 0120 	sub.w	r1, r2, #32
  406348:	2958      	cmp	r1, #88	; 0x58
  40634a:	f200 82de 	bhi.w	40690a <_vfiprintf_r+0x6ae>
  40634e:	e8df f011 	tbh	[pc, r1, lsl #1]
  406352:	0221      	.short	0x0221
  406354:	02dc02dc 	.word	0x02dc02dc
  406358:	02dc0229 	.word	0x02dc0229
  40635c:	02dc02dc 	.word	0x02dc02dc
  406360:	02dc02dc 	.word	0x02dc02dc
  406364:	028902dc 	.word	0x028902dc
  406368:	02dc0295 	.word	0x02dc0295
  40636c:	02bd00a2 	.word	0x02bd00a2
  406370:	019f02dc 	.word	0x019f02dc
  406374:	01a401a4 	.word	0x01a401a4
  406378:	01a401a4 	.word	0x01a401a4
  40637c:	01a401a4 	.word	0x01a401a4
  406380:	01a401a4 	.word	0x01a401a4
  406384:	02dc01a4 	.word	0x02dc01a4
  406388:	02dc02dc 	.word	0x02dc02dc
  40638c:	02dc02dc 	.word	0x02dc02dc
  406390:	02dc02dc 	.word	0x02dc02dc
  406394:	02dc02dc 	.word	0x02dc02dc
  406398:	01b202dc 	.word	0x01b202dc
  40639c:	02dc02dc 	.word	0x02dc02dc
  4063a0:	02dc02dc 	.word	0x02dc02dc
  4063a4:	02dc02dc 	.word	0x02dc02dc
  4063a8:	02dc02dc 	.word	0x02dc02dc
  4063ac:	02dc02dc 	.word	0x02dc02dc
  4063b0:	02dc0197 	.word	0x02dc0197
  4063b4:	02dc02dc 	.word	0x02dc02dc
  4063b8:	02dc02dc 	.word	0x02dc02dc
  4063bc:	02dc019b 	.word	0x02dc019b
  4063c0:	025302dc 	.word	0x025302dc
  4063c4:	02dc02dc 	.word	0x02dc02dc
  4063c8:	02dc02dc 	.word	0x02dc02dc
  4063cc:	02dc02dc 	.word	0x02dc02dc
  4063d0:	02dc02dc 	.word	0x02dc02dc
  4063d4:	02dc02dc 	.word	0x02dc02dc
  4063d8:	021b025a 	.word	0x021b025a
  4063dc:	02dc02dc 	.word	0x02dc02dc
  4063e0:	026e02dc 	.word	0x026e02dc
  4063e4:	02dc021b 	.word	0x02dc021b
  4063e8:	027302dc 	.word	0x027302dc
  4063ec:	01f502dc 	.word	0x01f502dc
  4063f0:	02090182 	.word	0x02090182
  4063f4:	02dc02d7 	.word	0x02dc02d7
  4063f8:	02dc029a 	.word	0x02dc029a
  4063fc:	02dc00a7 	.word	0x02dc00a7
  406400:	022e02dc 	.word	0x022e02dc
  406404:	f10a 0a08 	add.w	sl, sl, #8
  406408:	9b03      	ldr	r3, [sp, #12]
  40640a:	442b      	add	r3, r5
  40640c:	9303      	str	r3, [sp, #12]
  40640e:	e786      	b.n	40631e <_vfiprintf_r+0xc2>
  406410:	4659      	mov	r1, fp
  406412:	9806      	ldr	r0, [sp, #24]
  406414:	f000 fdac 	bl	406f70 <__swsetup_r>
  406418:	bb18      	cbnz	r0, 406462 <_vfiprintf_r+0x206>
  40641a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40641e:	f001 031a 	and.w	r3, r1, #26
  406422:	2b0a      	cmp	r3, #10
  406424:	f47f af4b 	bne.w	4062be <_vfiprintf_r+0x62>
  406428:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40642c:	2b00      	cmp	r3, #0
  40642e:	f6ff af46 	blt.w	4062be <_vfiprintf_r+0x62>
  406432:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406436:	07db      	lsls	r3, r3, #31
  406438:	d405      	bmi.n	406446 <_vfiprintf_r+0x1ea>
  40643a:	058f      	lsls	r7, r1, #22
  40643c:	d403      	bmi.n	406446 <_vfiprintf_r+0x1ea>
  40643e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406442:	f001 fac3 	bl	4079cc <__retarget_lock_release_recursive>
  406446:	462b      	mov	r3, r5
  406448:	4642      	mov	r2, r8
  40644a:	4659      	mov	r1, fp
  40644c:	9806      	ldr	r0, [sp, #24]
  40644e:	f000 fd4d 	bl	406eec <__sbprintf>
  406452:	9003      	str	r0, [sp, #12]
  406454:	9803      	ldr	r0, [sp, #12]
  406456:	b02d      	add	sp, #180	; 0xb4
  406458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40645c:	f000 fef4 	bl	407248 <__sinit>
  406460:	e709      	b.n	406276 <_vfiprintf_r+0x1a>
  406462:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406466:	07d9      	lsls	r1, r3, #31
  406468:	d404      	bmi.n	406474 <_vfiprintf_r+0x218>
  40646a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40646e:	059a      	lsls	r2, r3, #22
  406470:	f140 84aa 	bpl.w	406dc8 <_vfiprintf_r+0xb6c>
  406474:	f04f 33ff 	mov.w	r3, #4294967295
  406478:	9303      	str	r3, [sp, #12]
  40647a:	9803      	ldr	r0, [sp, #12]
  40647c:	b02d      	add	sp, #180	; 0xb4
  40647e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406482:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406486:	f001 fa9f 	bl	4079c8 <__retarget_lock_acquire_recursive>
  40648a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40648e:	b281      	uxth	r1, r0
  406490:	e6fb      	b.n	40628a <_vfiprintf_r+0x2e>
  406492:	4276      	negs	r6, r6
  406494:	9207      	str	r2, [sp, #28]
  406496:	f043 0304 	orr.w	r3, r3, #4
  40649a:	f898 2000 	ldrb.w	r2, [r8]
  40649e:	e74f      	b.n	406340 <_vfiprintf_r+0xe4>
  4064a0:	9608      	str	r6, [sp, #32]
  4064a2:	069e      	lsls	r6, r3, #26
  4064a4:	f100 8450 	bmi.w	406d48 <_vfiprintf_r+0xaec>
  4064a8:	9907      	ldr	r1, [sp, #28]
  4064aa:	06dd      	lsls	r5, r3, #27
  4064ac:	460a      	mov	r2, r1
  4064ae:	f100 83ef 	bmi.w	406c90 <_vfiprintf_r+0xa34>
  4064b2:	0658      	lsls	r0, r3, #25
  4064b4:	f140 83ec 	bpl.w	406c90 <_vfiprintf_r+0xa34>
  4064b8:	880e      	ldrh	r6, [r1, #0]
  4064ba:	3104      	adds	r1, #4
  4064bc:	2700      	movs	r7, #0
  4064be:	2201      	movs	r2, #1
  4064c0:	9107      	str	r1, [sp, #28]
  4064c2:	f04f 0100 	mov.w	r1, #0
  4064c6:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4064ca:	2500      	movs	r5, #0
  4064cc:	1c61      	adds	r1, r4, #1
  4064ce:	f000 8116 	beq.w	4066fe <_vfiprintf_r+0x4a2>
  4064d2:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4064d6:	9102      	str	r1, [sp, #8]
  4064d8:	ea56 0107 	orrs.w	r1, r6, r7
  4064dc:	f040 8114 	bne.w	406708 <_vfiprintf_r+0x4ac>
  4064e0:	2c00      	cmp	r4, #0
  4064e2:	f040 835c 	bne.w	406b9e <_vfiprintf_r+0x942>
  4064e6:	2a00      	cmp	r2, #0
  4064e8:	f040 83b7 	bne.w	406c5a <_vfiprintf_r+0x9fe>
  4064ec:	f013 0301 	ands.w	r3, r3, #1
  4064f0:	9305      	str	r3, [sp, #20]
  4064f2:	f000 8457 	beq.w	406da4 <_vfiprintf_r+0xb48>
  4064f6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4064fa:	2330      	movs	r3, #48	; 0x30
  4064fc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  406500:	9b05      	ldr	r3, [sp, #20]
  406502:	42a3      	cmp	r3, r4
  406504:	bfb8      	it	lt
  406506:	4623      	movlt	r3, r4
  406508:	9301      	str	r3, [sp, #4]
  40650a:	b10d      	cbz	r5, 406510 <_vfiprintf_r+0x2b4>
  40650c:	3301      	adds	r3, #1
  40650e:	9301      	str	r3, [sp, #4]
  406510:	9b02      	ldr	r3, [sp, #8]
  406512:	f013 0302 	ands.w	r3, r3, #2
  406516:	9309      	str	r3, [sp, #36]	; 0x24
  406518:	d002      	beq.n	406520 <_vfiprintf_r+0x2c4>
  40651a:	9b01      	ldr	r3, [sp, #4]
  40651c:	3302      	adds	r3, #2
  40651e:	9301      	str	r3, [sp, #4]
  406520:	9b02      	ldr	r3, [sp, #8]
  406522:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  406526:	930a      	str	r3, [sp, #40]	; 0x28
  406528:	f040 8217 	bne.w	40695a <_vfiprintf_r+0x6fe>
  40652c:	9b08      	ldr	r3, [sp, #32]
  40652e:	9a01      	ldr	r2, [sp, #4]
  406530:	1a9d      	subs	r5, r3, r2
  406532:	2d00      	cmp	r5, #0
  406534:	f340 8211 	ble.w	40695a <_vfiprintf_r+0x6fe>
  406538:	2d10      	cmp	r5, #16
  40653a:	f340 8490 	ble.w	406e5e <_vfiprintf_r+0xc02>
  40653e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406540:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406542:	4ec4      	ldr	r6, [pc, #784]	; (406854 <_vfiprintf_r+0x5f8>)
  406544:	46d6      	mov	lr, sl
  406546:	2710      	movs	r7, #16
  406548:	46a2      	mov	sl, r4
  40654a:	4619      	mov	r1, r3
  40654c:	9c06      	ldr	r4, [sp, #24]
  40654e:	e007      	b.n	406560 <_vfiprintf_r+0x304>
  406550:	f101 0c02 	add.w	ip, r1, #2
  406554:	f10e 0e08 	add.w	lr, lr, #8
  406558:	4601      	mov	r1, r0
  40655a:	3d10      	subs	r5, #16
  40655c:	2d10      	cmp	r5, #16
  40655e:	dd11      	ble.n	406584 <_vfiprintf_r+0x328>
  406560:	1c48      	adds	r0, r1, #1
  406562:	3210      	adds	r2, #16
  406564:	2807      	cmp	r0, #7
  406566:	9211      	str	r2, [sp, #68]	; 0x44
  406568:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40656c:	9010      	str	r0, [sp, #64]	; 0x40
  40656e:	ddef      	ble.n	406550 <_vfiprintf_r+0x2f4>
  406570:	2a00      	cmp	r2, #0
  406572:	f040 81e4 	bne.w	40693e <_vfiprintf_r+0x6e2>
  406576:	3d10      	subs	r5, #16
  406578:	2d10      	cmp	r5, #16
  40657a:	4611      	mov	r1, r2
  40657c:	f04f 0c01 	mov.w	ip, #1
  406580:	46ce      	mov	lr, r9
  406582:	dced      	bgt.n	406560 <_vfiprintf_r+0x304>
  406584:	4654      	mov	r4, sl
  406586:	4661      	mov	r1, ip
  406588:	46f2      	mov	sl, lr
  40658a:	442a      	add	r2, r5
  40658c:	2907      	cmp	r1, #7
  40658e:	9211      	str	r2, [sp, #68]	; 0x44
  406590:	f8ca 6000 	str.w	r6, [sl]
  406594:	f8ca 5004 	str.w	r5, [sl, #4]
  406598:	9110      	str	r1, [sp, #64]	; 0x40
  40659a:	f300 82ec 	bgt.w	406b76 <_vfiprintf_r+0x91a>
  40659e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4065a2:	f10a 0a08 	add.w	sl, sl, #8
  4065a6:	1c48      	adds	r0, r1, #1
  4065a8:	2d00      	cmp	r5, #0
  4065aa:	f040 81de 	bne.w	40696a <_vfiprintf_r+0x70e>
  4065ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4065b0:	2b00      	cmp	r3, #0
  4065b2:	f000 81f8 	beq.w	4069a6 <_vfiprintf_r+0x74a>
  4065b6:	3202      	adds	r2, #2
  4065b8:	a90e      	add	r1, sp, #56	; 0x38
  4065ba:	2302      	movs	r3, #2
  4065bc:	2807      	cmp	r0, #7
  4065be:	9211      	str	r2, [sp, #68]	; 0x44
  4065c0:	9010      	str	r0, [sp, #64]	; 0x40
  4065c2:	e88a 000a 	stmia.w	sl, {r1, r3}
  4065c6:	f340 81ea 	ble.w	40699e <_vfiprintf_r+0x742>
  4065ca:	2a00      	cmp	r2, #0
  4065cc:	f040 838c 	bne.w	406ce8 <_vfiprintf_r+0xa8c>
  4065d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4065d2:	2b80      	cmp	r3, #128	; 0x80
  4065d4:	f04f 0001 	mov.w	r0, #1
  4065d8:	4611      	mov	r1, r2
  4065da:	46ca      	mov	sl, r9
  4065dc:	f040 81e7 	bne.w	4069ae <_vfiprintf_r+0x752>
  4065e0:	9b08      	ldr	r3, [sp, #32]
  4065e2:	9d01      	ldr	r5, [sp, #4]
  4065e4:	1b5e      	subs	r6, r3, r5
  4065e6:	2e00      	cmp	r6, #0
  4065e8:	f340 81e1 	ble.w	4069ae <_vfiprintf_r+0x752>
  4065ec:	2e10      	cmp	r6, #16
  4065ee:	4d9a      	ldr	r5, [pc, #616]	; (406858 <_vfiprintf_r+0x5fc>)
  4065f0:	f340 8450 	ble.w	406e94 <_vfiprintf_r+0xc38>
  4065f4:	46d4      	mov	ip, sl
  4065f6:	2710      	movs	r7, #16
  4065f8:	46a2      	mov	sl, r4
  4065fa:	9c06      	ldr	r4, [sp, #24]
  4065fc:	e007      	b.n	40660e <_vfiprintf_r+0x3b2>
  4065fe:	f101 0e02 	add.w	lr, r1, #2
  406602:	f10c 0c08 	add.w	ip, ip, #8
  406606:	4601      	mov	r1, r0
  406608:	3e10      	subs	r6, #16
  40660a:	2e10      	cmp	r6, #16
  40660c:	dd11      	ble.n	406632 <_vfiprintf_r+0x3d6>
  40660e:	1c48      	adds	r0, r1, #1
  406610:	3210      	adds	r2, #16
  406612:	2807      	cmp	r0, #7
  406614:	9211      	str	r2, [sp, #68]	; 0x44
  406616:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40661a:	9010      	str	r0, [sp, #64]	; 0x40
  40661c:	ddef      	ble.n	4065fe <_vfiprintf_r+0x3a2>
  40661e:	2a00      	cmp	r2, #0
  406620:	f040 829d 	bne.w	406b5e <_vfiprintf_r+0x902>
  406624:	3e10      	subs	r6, #16
  406626:	2e10      	cmp	r6, #16
  406628:	f04f 0e01 	mov.w	lr, #1
  40662c:	4611      	mov	r1, r2
  40662e:	46cc      	mov	ip, r9
  406630:	dced      	bgt.n	40660e <_vfiprintf_r+0x3b2>
  406632:	4654      	mov	r4, sl
  406634:	46e2      	mov	sl, ip
  406636:	4432      	add	r2, r6
  406638:	f1be 0f07 	cmp.w	lr, #7
  40663c:	9211      	str	r2, [sp, #68]	; 0x44
  40663e:	e88a 0060 	stmia.w	sl, {r5, r6}
  406642:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  406646:	f300 8369 	bgt.w	406d1c <_vfiprintf_r+0xac0>
  40664a:	f10a 0a08 	add.w	sl, sl, #8
  40664e:	f10e 0001 	add.w	r0, lr, #1
  406652:	4671      	mov	r1, lr
  406654:	e1ab      	b.n	4069ae <_vfiprintf_r+0x752>
  406656:	9608      	str	r6, [sp, #32]
  406658:	f013 0220 	ands.w	r2, r3, #32
  40665c:	f040 838c 	bne.w	406d78 <_vfiprintf_r+0xb1c>
  406660:	f013 0110 	ands.w	r1, r3, #16
  406664:	f040 831a 	bne.w	406c9c <_vfiprintf_r+0xa40>
  406668:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40666c:	f000 8316 	beq.w	406c9c <_vfiprintf_r+0xa40>
  406670:	9807      	ldr	r0, [sp, #28]
  406672:	460a      	mov	r2, r1
  406674:	4601      	mov	r1, r0
  406676:	3104      	adds	r1, #4
  406678:	8806      	ldrh	r6, [r0, #0]
  40667a:	9107      	str	r1, [sp, #28]
  40667c:	2700      	movs	r7, #0
  40667e:	e720      	b.n	4064c2 <_vfiprintf_r+0x266>
  406680:	9608      	str	r6, [sp, #32]
  406682:	f043 0310 	orr.w	r3, r3, #16
  406686:	e7e7      	b.n	406658 <_vfiprintf_r+0x3fc>
  406688:	9608      	str	r6, [sp, #32]
  40668a:	f043 0310 	orr.w	r3, r3, #16
  40668e:	e708      	b.n	4064a2 <_vfiprintf_r+0x246>
  406690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406694:	f898 2000 	ldrb.w	r2, [r8]
  406698:	e652      	b.n	406340 <_vfiprintf_r+0xe4>
  40669a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40669e:	2600      	movs	r6, #0
  4066a0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4066a4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4066a8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4066ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4066b0:	2909      	cmp	r1, #9
  4066b2:	d9f5      	bls.n	4066a0 <_vfiprintf_r+0x444>
  4066b4:	e646      	b.n	406344 <_vfiprintf_r+0xe8>
  4066b6:	9608      	str	r6, [sp, #32]
  4066b8:	2800      	cmp	r0, #0
  4066ba:	f040 8408 	bne.w	406ece <_vfiprintf_r+0xc72>
  4066be:	f043 0310 	orr.w	r3, r3, #16
  4066c2:	069e      	lsls	r6, r3, #26
  4066c4:	f100 834c 	bmi.w	406d60 <_vfiprintf_r+0xb04>
  4066c8:	06dd      	lsls	r5, r3, #27
  4066ca:	f100 82f3 	bmi.w	406cb4 <_vfiprintf_r+0xa58>
  4066ce:	0658      	lsls	r0, r3, #25
  4066d0:	f140 82f0 	bpl.w	406cb4 <_vfiprintf_r+0xa58>
  4066d4:	9d07      	ldr	r5, [sp, #28]
  4066d6:	f9b5 6000 	ldrsh.w	r6, [r5]
  4066da:	462a      	mov	r2, r5
  4066dc:	17f7      	asrs	r7, r6, #31
  4066de:	3204      	adds	r2, #4
  4066e0:	4630      	mov	r0, r6
  4066e2:	4639      	mov	r1, r7
  4066e4:	9207      	str	r2, [sp, #28]
  4066e6:	2800      	cmp	r0, #0
  4066e8:	f171 0200 	sbcs.w	r2, r1, #0
  4066ec:	f2c0 835d 	blt.w	406daa <_vfiprintf_r+0xb4e>
  4066f0:	1c61      	adds	r1, r4, #1
  4066f2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4066f6:	f04f 0201 	mov.w	r2, #1
  4066fa:	f47f aeea 	bne.w	4064d2 <_vfiprintf_r+0x276>
  4066fe:	ea56 0107 	orrs.w	r1, r6, r7
  406702:	f000 824d 	beq.w	406ba0 <_vfiprintf_r+0x944>
  406706:	9302      	str	r3, [sp, #8]
  406708:	2a01      	cmp	r2, #1
  40670a:	f000 828c 	beq.w	406c26 <_vfiprintf_r+0x9ca>
  40670e:	2a02      	cmp	r2, #2
  406710:	f040 825c 	bne.w	406bcc <_vfiprintf_r+0x970>
  406714:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406716:	46cb      	mov	fp, r9
  406718:	0933      	lsrs	r3, r6, #4
  40671a:	f006 010f 	and.w	r1, r6, #15
  40671e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  406722:	093a      	lsrs	r2, r7, #4
  406724:	461e      	mov	r6, r3
  406726:	4617      	mov	r7, r2
  406728:	5c43      	ldrb	r3, [r0, r1]
  40672a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40672e:	ea56 0307 	orrs.w	r3, r6, r7
  406732:	d1f1      	bne.n	406718 <_vfiprintf_r+0x4bc>
  406734:	eba9 030b 	sub.w	r3, r9, fp
  406738:	9305      	str	r3, [sp, #20]
  40673a:	e6e1      	b.n	406500 <_vfiprintf_r+0x2a4>
  40673c:	2800      	cmp	r0, #0
  40673e:	f040 83c0 	bne.w	406ec2 <_vfiprintf_r+0xc66>
  406742:	0699      	lsls	r1, r3, #26
  406744:	f100 8367 	bmi.w	406e16 <_vfiprintf_r+0xbba>
  406748:	06da      	lsls	r2, r3, #27
  40674a:	f100 80f1 	bmi.w	406930 <_vfiprintf_r+0x6d4>
  40674e:	065b      	lsls	r3, r3, #25
  406750:	f140 80ee 	bpl.w	406930 <_vfiprintf_r+0x6d4>
  406754:	9a07      	ldr	r2, [sp, #28]
  406756:	6813      	ldr	r3, [r2, #0]
  406758:	3204      	adds	r2, #4
  40675a:	9207      	str	r2, [sp, #28]
  40675c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  406760:	801a      	strh	r2, [r3, #0]
  406762:	e5b8      	b.n	4062d6 <_vfiprintf_r+0x7a>
  406764:	9807      	ldr	r0, [sp, #28]
  406766:	4a3d      	ldr	r2, [pc, #244]	; (40685c <_vfiprintf_r+0x600>)
  406768:	9608      	str	r6, [sp, #32]
  40676a:	920b      	str	r2, [sp, #44]	; 0x2c
  40676c:	6806      	ldr	r6, [r0, #0]
  40676e:	2278      	movs	r2, #120	; 0x78
  406770:	2130      	movs	r1, #48	; 0x30
  406772:	3004      	adds	r0, #4
  406774:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406778:	f043 0302 	orr.w	r3, r3, #2
  40677c:	9007      	str	r0, [sp, #28]
  40677e:	2700      	movs	r7, #0
  406780:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406784:	2202      	movs	r2, #2
  406786:	e69c      	b.n	4064c2 <_vfiprintf_r+0x266>
  406788:	9608      	str	r6, [sp, #32]
  40678a:	2800      	cmp	r0, #0
  40678c:	d099      	beq.n	4066c2 <_vfiprintf_r+0x466>
  40678e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406792:	e796      	b.n	4066c2 <_vfiprintf_r+0x466>
  406794:	f898 2000 	ldrb.w	r2, [r8]
  406798:	2d00      	cmp	r5, #0
  40679a:	f47f add1 	bne.w	406340 <_vfiprintf_r+0xe4>
  40679e:	2001      	movs	r0, #1
  4067a0:	2520      	movs	r5, #32
  4067a2:	e5cd      	b.n	406340 <_vfiprintf_r+0xe4>
  4067a4:	f043 0301 	orr.w	r3, r3, #1
  4067a8:	f898 2000 	ldrb.w	r2, [r8]
  4067ac:	e5c8      	b.n	406340 <_vfiprintf_r+0xe4>
  4067ae:	9608      	str	r6, [sp, #32]
  4067b0:	2800      	cmp	r0, #0
  4067b2:	f040 8393 	bne.w	406edc <_vfiprintf_r+0xc80>
  4067b6:	4929      	ldr	r1, [pc, #164]	; (40685c <_vfiprintf_r+0x600>)
  4067b8:	910b      	str	r1, [sp, #44]	; 0x2c
  4067ba:	069f      	lsls	r7, r3, #26
  4067bc:	f100 82e8 	bmi.w	406d90 <_vfiprintf_r+0xb34>
  4067c0:	9807      	ldr	r0, [sp, #28]
  4067c2:	06de      	lsls	r6, r3, #27
  4067c4:	4601      	mov	r1, r0
  4067c6:	f100 8270 	bmi.w	406caa <_vfiprintf_r+0xa4e>
  4067ca:	065d      	lsls	r5, r3, #25
  4067cc:	f140 826d 	bpl.w	406caa <_vfiprintf_r+0xa4e>
  4067d0:	3104      	adds	r1, #4
  4067d2:	8806      	ldrh	r6, [r0, #0]
  4067d4:	9107      	str	r1, [sp, #28]
  4067d6:	2700      	movs	r7, #0
  4067d8:	07d8      	lsls	r0, r3, #31
  4067da:	f140 8222 	bpl.w	406c22 <_vfiprintf_r+0x9c6>
  4067de:	ea56 0107 	orrs.w	r1, r6, r7
  4067e2:	f000 821e 	beq.w	406c22 <_vfiprintf_r+0x9c6>
  4067e6:	2130      	movs	r1, #48	; 0x30
  4067e8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4067ec:	f043 0302 	orr.w	r3, r3, #2
  4067f0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4067f4:	2202      	movs	r2, #2
  4067f6:	e664      	b.n	4064c2 <_vfiprintf_r+0x266>
  4067f8:	9608      	str	r6, [sp, #32]
  4067fa:	2800      	cmp	r0, #0
  4067fc:	f040 836b 	bne.w	406ed6 <_vfiprintf_r+0xc7a>
  406800:	4917      	ldr	r1, [pc, #92]	; (406860 <_vfiprintf_r+0x604>)
  406802:	910b      	str	r1, [sp, #44]	; 0x2c
  406804:	e7d9      	b.n	4067ba <_vfiprintf_r+0x55e>
  406806:	9907      	ldr	r1, [sp, #28]
  406808:	9608      	str	r6, [sp, #32]
  40680a:	680a      	ldr	r2, [r1, #0]
  40680c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  406810:	f04f 0000 	mov.w	r0, #0
  406814:	460a      	mov	r2, r1
  406816:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40681a:	3204      	adds	r2, #4
  40681c:	2001      	movs	r0, #1
  40681e:	9001      	str	r0, [sp, #4]
  406820:	9207      	str	r2, [sp, #28]
  406822:	9005      	str	r0, [sp, #20]
  406824:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  406828:	9302      	str	r3, [sp, #8]
  40682a:	2400      	movs	r4, #0
  40682c:	e670      	b.n	406510 <_vfiprintf_r+0x2b4>
  40682e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406832:	f898 2000 	ldrb.w	r2, [r8]
  406836:	e583      	b.n	406340 <_vfiprintf_r+0xe4>
  406838:	f898 2000 	ldrb.w	r2, [r8]
  40683c:	2a6c      	cmp	r2, #108	; 0x6c
  40683e:	bf03      	ittte	eq
  406840:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  406844:	f043 0320 	orreq.w	r3, r3, #32
  406848:	f108 0801 	addeq.w	r8, r8, #1
  40684c:	f043 0310 	orrne.w	r3, r3, #16
  406850:	e576      	b.n	406340 <_vfiprintf_r+0xe4>
  406852:	bf00      	nop
  406854:	00409ba4 	.word	0x00409ba4
  406858:	00409bb4 	.word	0x00409bb4
  40685c:	00409b88 	.word	0x00409b88
  406860:	00409b74 	.word	0x00409b74
  406864:	9907      	ldr	r1, [sp, #28]
  406866:	680e      	ldr	r6, [r1, #0]
  406868:	460a      	mov	r2, r1
  40686a:	2e00      	cmp	r6, #0
  40686c:	f102 0204 	add.w	r2, r2, #4
  406870:	f6ff ae0f 	blt.w	406492 <_vfiprintf_r+0x236>
  406874:	9207      	str	r2, [sp, #28]
  406876:	f898 2000 	ldrb.w	r2, [r8]
  40687a:	e561      	b.n	406340 <_vfiprintf_r+0xe4>
  40687c:	f898 2000 	ldrb.w	r2, [r8]
  406880:	2001      	movs	r0, #1
  406882:	252b      	movs	r5, #43	; 0x2b
  406884:	e55c      	b.n	406340 <_vfiprintf_r+0xe4>
  406886:	9907      	ldr	r1, [sp, #28]
  406888:	9608      	str	r6, [sp, #32]
  40688a:	f8d1 b000 	ldr.w	fp, [r1]
  40688e:	f04f 0200 	mov.w	r2, #0
  406892:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406896:	1d0e      	adds	r6, r1, #4
  406898:	f1bb 0f00 	cmp.w	fp, #0
  40689c:	f000 82e5 	beq.w	406e6a <_vfiprintf_r+0xc0e>
  4068a0:	1c67      	adds	r7, r4, #1
  4068a2:	f000 82c4 	beq.w	406e2e <_vfiprintf_r+0xbd2>
  4068a6:	4622      	mov	r2, r4
  4068a8:	2100      	movs	r1, #0
  4068aa:	4658      	mov	r0, fp
  4068ac:	9301      	str	r3, [sp, #4]
  4068ae:	f001 fbd7 	bl	408060 <memchr>
  4068b2:	9b01      	ldr	r3, [sp, #4]
  4068b4:	2800      	cmp	r0, #0
  4068b6:	f000 82e5 	beq.w	406e84 <_vfiprintf_r+0xc28>
  4068ba:	eba0 020b 	sub.w	r2, r0, fp
  4068be:	9205      	str	r2, [sp, #20]
  4068c0:	9607      	str	r6, [sp, #28]
  4068c2:	9302      	str	r3, [sp, #8]
  4068c4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4068c8:	2400      	movs	r4, #0
  4068ca:	e619      	b.n	406500 <_vfiprintf_r+0x2a4>
  4068cc:	f898 2000 	ldrb.w	r2, [r8]
  4068d0:	2a2a      	cmp	r2, #42	; 0x2a
  4068d2:	f108 0701 	add.w	r7, r8, #1
  4068d6:	f000 82e9 	beq.w	406eac <_vfiprintf_r+0xc50>
  4068da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4068de:	2909      	cmp	r1, #9
  4068e0:	46b8      	mov	r8, r7
  4068e2:	f04f 0400 	mov.w	r4, #0
  4068e6:	f63f ad2d 	bhi.w	406344 <_vfiprintf_r+0xe8>
  4068ea:	f818 2b01 	ldrb.w	r2, [r8], #1
  4068ee:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4068f2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4068f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4068fa:	2909      	cmp	r1, #9
  4068fc:	d9f5      	bls.n	4068ea <_vfiprintf_r+0x68e>
  4068fe:	e521      	b.n	406344 <_vfiprintf_r+0xe8>
  406900:	f043 0320 	orr.w	r3, r3, #32
  406904:	f898 2000 	ldrb.w	r2, [r8]
  406908:	e51a      	b.n	406340 <_vfiprintf_r+0xe4>
  40690a:	9608      	str	r6, [sp, #32]
  40690c:	2800      	cmp	r0, #0
  40690e:	f040 82db 	bne.w	406ec8 <_vfiprintf_r+0xc6c>
  406912:	2a00      	cmp	r2, #0
  406914:	f000 80e7 	beq.w	406ae6 <_vfiprintf_r+0x88a>
  406918:	2101      	movs	r1, #1
  40691a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40691e:	f04f 0200 	mov.w	r2, #0
  406922:	9101      	str	r1, [sp, #4]
  406924:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406928:	9105      	str	r1, [sp, #20]
  40692a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40692e:	e77b      	b.n	406828 <_vfiprintf_r+0x5cc>
  406930:	9a07      	ldr	r2, [sp, #28]
  406932:	6813      	ldr	r3, [r2, #0]
  406934:	3204      	adds	r2, #4
  406936:	9207      	str	r2, [sp, #28]
  406938:	9a03      	ldr	r2, [sp, #12]
  40693a:	601a      	str	r2, [r3, #0]
  40693c:	e4cb      	b.n	4062d6 <_vfiprintf_r+0x7a>
  40693e:	aa0f      	add	r2, sp, #60	; 0x3c
  406940:	9904      	ldr	r1, [sp, #16]
  406942:	4620      	mov	r0, r4
  406944:	f7ff fc4a 	bl	4061dc <__sprint_r.part.0>
  406948:	2800      	cmp	r0, #0
  40694a:	f040 8139 	bne.w	406bc0 <_vfiprintf_r+0x964>
  40694e:	9910      	ldr	r1, [sp, #64]	; 0x40
  406950:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406952:	f101 0c01 	add.w	ip, r1, #1
  406956:	46ce      	mov	lr, r9
  406958:	e5ff      	b.n	40655a <_vfiprintf_r+0x2fe>
  40695a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40695c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40695e:	1c48      	adds	r0, r1, #1
  406960:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406964:	2d00      	cmp	r5, #0
  406966:	f43f ae22 	beq.w	4065ae <_vfiprintf_r+0x352>
  40696a:	3201      	adds	r2, #1
  40696c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  406970:	2101      	movs	r1, #1
  406972:	2807      	cmp	r0, #7
  406974:	9211      	str	r2, [sp, #68]	; 0x44
  406976:	9010      	str	r0, [sp, #64]	; 0x40
  406978:	f8ca 5000 	str.w	r5, [sl]
  40697c:	f8ca 1004 	str.w	r1, [sl, #4]
  406980:	f340 8108 	ble.w	406b94 <_vfiprintf_r+0x938>
  406984:	2a00      	cmp	r2, #0
  406986:	f040 81bc 	bne.w	406d02 <_vfiprintf_r+0xaa6>
  40698a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40698c:	2b00      	cmp	r3, #0
  40698e:	f43f ae1f 	beq.w	4065d0 <_vfiprintf_r+0x374>
  406992:	ab0e      	add	r3, sp, #56	; 0x38
  406994:	2202      	movs	r2, #2
  406996:	4608      	mov	r0, r1
  406998:	931c      	str	r3, [sp, #112]	; 0x70
  40699a:	921d      	str	r2, [sp, #116]	; 0x74
  40699c:	46ca      	mov	sl, r9
  40699e:	4601      	mov	r1, r0
  4069a0:	f10a 0a08 	add.w	sl, sl, #8
  4069a4:	3001      	adds	r0, #1
  4069a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4069a8:	2b80      	cmp	r3, #128	; 0x80
  4069aa:	f43f ae19 	beq.w	4065e0 <_vfiprintf_r+0x384>
  4069ae:	9b05      	ldr	r3, [sp, #20]
  4069b0:	1ae4      	subs	r4, r4, r3
  4069b2:	2c00      	cmp	r4, #0
  4069b4:	dd2e      	ble.n	406a14 <_vfiprintf_r+0x7b8>
  4069b6:	2c10      	cmp	r4, #16
  4069b8:	4db3      	ldr	r5, [pc, #716]	; (406c88 <_vfiprintf_r+0xa2c>)
  4069ba:	dd1e      	ble.n	4069fa <_vfiprintf_r+0x79e>
  4069bc:	46d6      	mov	lr, sl
  4069be:	2610      	movs	r6, #16
  4069c0:	9f06      	ldr	r7, [sp, #24]
  4069c2:	f8dd a010 	ldr.w	sl, [sp, #16]
  4069c6:	e006      	b.n	4069d6 <_vfiprintf_r+0x77a>
  4069c8:	1c88      	adds	r0, r1, #2
  4069ca:	f10e 0e08 	add.w	lr, lr, #8
  4069ce:	4619      	mov	r1, r3
  4069d0:	3c10      	subs	r4, #16
  4069d2:	2c10      	cmp	r4, #16
  4069d4:	dd10      	ble.n	4069f8 <_vfiprintf_r+0x79c>
  4069d6:	1c4b      	adds	r3, r1, #1
  4069d8:	3210      	adds	r2, #16
  4069da:	2b07      	cmp	r3, #7
  4069dc:	9211      	str	r2, [sp, #68]	; 0x44
  4069de:	e88e 0060 	stmia.w	lr, {r5, r6}
  4069e2:	9310      	str	r3, [sp, #64]	; 0x40
  4069e4:	ddf0      	ble.n	4069c8 <_vfiprintf_r+0x76c>
  4069e6:	2a00      	cmp	r2, #0
  4069e8:	d165      	bne.n	406ab6 <_vfiprintf_r+0x85a>
  4069ea:	3c10      	subs	r4, #16
  4069ec:	2c10      	cmp	r4, #16
  4069ee:	f04f 0001 	mov.w	r0, #1
  4069f2:	4611      	mov	r1, r2
  4069f4:	46ce      	mov	lr, r9
  4069f6:	dcee      	bgt.n	4069d6 <_vfiprintf_r+0x77a>
  4069f8:	46f2      	mov	sl, lr
  4069fa:	4422      	add	r2, r4
  4069fc:	2807      	cmp	r0, #7
  4069fe:	9211      	str	r2, [sp, #68]	; 0x44
  406a00:	f8ca 5000 	str.w	r5, [sl]
  406a04:	f8ca 4004 	str.w	r4, [sl, #4]
  406a08:	9010      	str	r0, [sp, #64]	; 0x40
  406a0a:	f300 8085 	bgt.w	406b18 <_vfiprintf_r+0x8bc>
  406a0e:	f10a 0a08 	add.w	sl, sl, #8
  406a12:	3001      	adds	r0, #1
  406a14:	9905      	ldr	r1, [sp, #20]
  406a16:	f8ca b000 	str.w	fp, [sl]
  406a1a:	440a      	add	r2, r1
  406a1c:	2807      	cmp	r0, #7
  406a1e:	9211      	str	r2, [sp, #68]	; 0x44
  406a20:	f8ca 1004 	str.w	r1, [sl, #4]
  406a24:	9010      	str	r0, [sp, #64]	; 0x40
  406a26:	f340 8082 	ble.w	406b2e <_vfiprintf_r+0x8d2>
  406a2a:	2a00      	cmp	r2, #0
  406a2c:	f040 8118 	bne.w	406c60 <_vfiprintf_r+0xa04>
  406a30:	9b02      	ldr	r3, [sp, #8]
  406a32:	9210      	str	r2, [sp, #64]	; 0x40
  406a34:	0758      	lsls	r0, r3, #29
  406a36:	d535      	bpl.n	406aa4 <_vfiprintf_r+0x848>
  406a38:	9b08      	ldr	r3, [sp, #32]
  406a3a:	9901      	ldr	r1, [sp, #4]
  406a3c:	1a5c      	subs	r4, r3, r1
  406a3e:	2c00      	cmp	r4, #0
  406a40:	f340 80e7 	ble.w	406c12 <_vfiprintf_r+0x9b6>
  406a44:	46ca      	mov	sl, r9
  406a46:	2c10      	cmp	r4, #16
  406a48:	f340 8218 	ble.w	406e7c <_vfiprintf_r+0xc20>
  406a4c:	9910      	ldr	r1, [sp, #64]	; 0x40
  406a4e:	4e8f      	ldr	r6, [pc, #572]	; (406c8c <_vfiprintf_r+0xa30>)
  406a50:	9f06      	ldr	r7, [sp, #24]
  406a52:	f8dd b010 	ldr.w	fp, [sp, #16]
  406a56:	2510      	movs	r5, #16
  406a58:	e006      	b.n	406a68 <_vfiprintf_r+0x80c>
  406a5a:	1c88      	adds	r0, r1, #2
  406a5c:	f10a 0a08 	add.w	sl, sl, #8
  406a60:	4619      	mov	r1, r3
  406a62:	3c10      	subs	r4, #16
  406a64:	2c10      	cmp	r4, #16
  406a66:	dd11      	ble.n	406a8c <_vfiprintf_r+0x830>
  406a68:	1c4b      	adds	r3, r1, #1
  406a6a:	3210      	adds	r2, #16
  406a6c:	2b07      	cmp	r3, #7
  406a6e:	9211      	str	r2, [sp, #68]	; 0x44
  406a70:	f8ca 6000 	str.w	r6, [sl]
  406a74:	f8ca 5004 	str.w	r5, [sl, #4]
  406a78:	9310      	str	r3, [sp, #64]	; 0x40
  406a7a:	ddee      	ble.n	406a5a <_vfiprintf_r+0x7fe>
  406a7c:	bb42      	cbnz	r2, 406ad0 <_vfiprintf_r+0x874>
  406a7e:	3c10      	subs	r4, #16
  406a80:	2c10      	cmp	r4, #16
  406a82:	f04f 0001 	mov.w	r0, #1
  406a86:	4611      	mov	r1, r2
  406a88:	46ca      	mov	sl, r9
  406a8a:	dced      	bgt.n	406a68 <_vfiprintf_r+0x80c>
  406a8c:	4422      	add	r2, r4
  406a8e:	2807      	cmp	r0, #7
  406a90:	9211      	str	r2, [sp, #68]	; 0x44
  406a92:	f8ca 6000 	str.w	r6, [sl]
  406a96:	f8ca 4004 	str.w	r4, [sl, #4]
  406a9a:	9010      	str	r0, [sp, #64]	; 0x40
  406a9c:	dd51      	ble.n	406b42 <_vfiprintf_r+0x8e6>
  406a9e:	2a00      	cmp	r2, #0
  406aa0:	f040 819b 	bne.w	406dda <_vfiprintf_r+0xb7e>
  406aa4:	9b03      	ldr	r3, [sp, #12]
  406aa6:	9a08      	ldr	r2, [sp, #32]
  406aa8:	9901      	ldr	r1, [sp, #4]
  406aaa:	428a      	cmp	r2, r1
  406aac:	bfac      	ite	ge
  406aae:	189b      	addge	r3, r3, r2
  406ab0:	185b      	addlt	r3, r3, r1
  406ab2:	9303      	str	r3, [sp, #12]
  406ab4:	e04e      	b.n	406b54 <_vfiprintf_r+0x8f8>
  406ab6:	aa0f      	add	r2, sp, #60	; 0x3c
  406ab8:	4651      	mov	r1, sl
  406aba:	4638      	mov	r0, r7
  406abc:	f7ff fb8e 	bl	4061dc <__sprint_r.part.0>
  406ac0:	2800      	cmp	r0, #0
  406ac2:	f040 813f 	bne.w	406d44 <_vfiprintf_r+0xae8>
  406ac6:	9910      	ldr	r1, [sp, #64]	; 0x40
  406ac8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406aca:	1c48      	adds	r0, r1, #1
  406acc:	46ce      	mov	lr, r9
  406ace:	e77f      	b.n	4069d0 <_vfiprintf_r+0x774>
  406ad0:	aa0f      	add	r2, sp, #60	; 0x3c
  406ad2:	4659      	mov	r1, fp
  406ad4:	4638      	mov	r0, r7
  406ad6:	f7ff fb81 	bl	4061dc <__sprint_r.part.0>
  406ada:	b960      	cbnz	r0, 406af6 <_vfiprintf_r+0x89a>
  406adc:	9910      	ldr	r1, [sp, #64]	; 0x40
  406ade:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406ae0:	1c48      	adds	r0, r1, #1
  406ae2:	46ca      	mov	sl, r9
  406ae4:	e7bd      	b.n	406a62 <_vfiprintf_r+0x806>
  406ae6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406ae8:	f8dd b010 	ldr.w	fp, [sp, #16]
  406aec:	2b00      	cmp	r3, #0
  406aee:	f040 81d4 	bne.w	406e9a <_vfiprintf_r+0xc3e>
  406af2:	2300      	movs	r3, #0
  406af4:	9310      	str	r3, [sp, #64]	; 0x40
  406af6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406afa:	f013 0f01 	tst.w	r3, #1
  406afe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406b02:	d102      	bne.n	406b0a <_vfiprintf_r+0x8ae>
  406b04:	059a      	lsls	r2, r3, #22
  406b06:	f140 80de 	bpl.w	406cc6 <_vfiprintf_r+0xa6a>
  406b0a:	065b      	lsls	r3, r3, #25
  406b0c:	f53f acb2 	bmi.w	406474 <_vfiprintf_r+0x218>
  406b10:	9803      	ldr	r0, [sp, #12]
  406b12:	b02d      	add	sp, #180	; 0xb4
  406b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b18:	2a00      	cmp	r2, #0
  406b1a:	f040 8106 	bne.w	406d2a <_vfiprintf_r+0xace>
  406b1e:	9a05      	ldr	r2, [sp, #20]
  406b20:	921d      	str	r2, [sp, #116]	; 0x74
  406b22:	2301      	movs	r3, #1
  406b24:	9211      	str	r2, [sp, #68]	; 0x44
  406b26:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  406b2a:	9310      	str	r3, [sp, #64]	; 0x40
  406b2c:	46ca      	mov	sl, r9
  406b2e:	f10a 0a08 	add.w	sl, sl, #8
  406b32:	9b02      	ldr	r3, [sp, #8]
  406b34:	0759      	lsls	r1, r3, #29
  406b36:	d504      	bpl.n	406b42 <_vfiprintf_r+0x8e6>
  406b38:	9b08      	ldr	r3, [sp, #32]
  406b3a:	9901      	ldr	r1, [sp, #4]
  406b3c:	1a5c      	subs	r4, r3, r1
  406b3e:	2c00      	cmp	r4, #0
  406b40:	dc81      	bgt.n	406a46 <_vfiprintf_r+0x7ea>
  406b42:	9b03      	ldr	r3, [sp, #12]
  406b44:	9908      	ldr	r1, [sp, #32]
  406b46:	9801      	ldr	r0, [sp, #4]
  406b48:	4281      	cmp	r1, r0
  406b4a:	bfac      	ite	ge
  406b4c:	185b      	addge	r3, r3, r1
  406b4e:	181b      	addlt	r3, r3, r0
  406b50:	9303      	str	r3, [sp, #12]
  406b52:	bb72      	cbnz	r2, 406bb2 <_vfiprintf_r+0x956>
  406b54:	2300      	movs	r3, #0
  406b56:	9310      	str	r3, [sp, #64]	; 0x40
  406b58:	46ca      	mov	sl, r9
  406b5a:	f7ff bbbc 	b.w	4062d6 <_vfiprintf_r+0x7a>
  406b5e:	aa0f      	add	r2, sp, #60	; 0x3c
  406b60:	9904      	ldr	r1, [sp, #16]
  406b62:	4620      	mov	r0, r4
  406b64:	f7ff fb3a 	bl	4061dc <__sprint_r.part.0>
  406b68:	bb50      	cbnz	r0, 406bc0 <_vfiprintf_r+0x964>
  406b6a:	9910      	ldr	r1, [sp, #64]	; 0x40
  406b6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406b6e:	f101 0e01 	add.w	lr, r1, #1
  406b72:	46cc      	mov	ip, r9
  406b74:	e548      	b.n	406608 <_vfiprintf_r+0x3ac>
  406b76:	2a00      	cmp	r2, #0
  406b78:	f040 8140 	bne.w	406dfc <_vfiprintf_r+0xba0>
  406b7c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  406b80:	2900      	cmp	r1, #0
  406b82:	f000 811b 	beq.w	406dbc <_vfiprintf_r+0xb60>
  406b86:	2201      	movs	r2, #1
  406b88:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  406b8c:	4610      	mov	r0, r2
  406b8e:	921d      	str	r2, [sp, #116]	; 0x74
  406b90:	911c      	str	r1, [sp, #112]	; 0x70
  406b92:	46ca      	mov	sl, r9
  406b94:	4601      	mov	r1, r0
  406b96:	f10a 0a08 	add.w	sl, sl, #8
  406b9a:	3001      	adds	r0, #1
  406b9c:	e507      	b.n	4065ae <_vfiprintf_r+0x352>
  406b9e:	9b02      	ldr	r3, [sp, #8]
  406ba0:	2a01      	cmp	r2, #1
  406ba2:	f000 8098 	beq.w	406cd6 <_vfiprintf_r+0xa7a>
  406ba6:	2a02      	cmp	r2, #2
  406ba8:	d10d      	bne.n	406bc6 <_vfiprintf_r+0x96a>
  406baa:	9302      	str	r3, [sp, #8]
  406bac:	2600      	movs	r6, #0
  406bae:	2700      	movs	r7, #0
  406bb0:	e5b0      	b.n	406714 <_vfiprintf_r+0x4b8>
  406bb2:	aa0f      	add	r2, sp, #60	; 0x3c
  406bb4:	9904      	ldr	r1, [sp, #16]
  406bb6:	9806      	ldr	r0, [sp, #24]
  406bb8:	f7ff fb10 	bl	4061dc <__sprint_r.part.0>
  406bbc:	2800      	cmp	r0, #0
  406bbe:	d0c9      	beq.n	406b54 <_vfiprintf_r+0x8f8>
  406bc0:	f8dd b010 	ldr.w	fp, [sp, #16]
  406bc4:	e797      	b.n	406af6 <_vfiprintf_r+0x89a>
  406bc6:	9302      	str	r3, [sp, #8]
  406bc8:	2600      	movs	r6, #0
  406bca:	2700      	movs	r7, #0
  406bcc:	4649      	mov	r1, r9
  406bce:	e000      	b.n	406bd2 <_vfiprintf_r+0x976>
  406bd0:	4659      	mov	r1, fp
  406bd2:	08f2      	lsrs	r2, r6, #3
  406bd4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  406bd8:	08f8      	lsrs	r0, r7, #3
  406bda:	f006 0307 	and.w	r3, r6, #7
  406bde:	4607      	mov	r7, r0
  406be0:	4616      	mov	r6, r2
  406be2:	3330      	adds	r3, #48	; 0x30
  406be4:	ea56 0207 	orrs.w	r2, r6, r7
  406be8:	f801 3c01 	strb.w	r3, [r1, #-1]
  406bec:	f101 3bff 	add.w	fp, r1, #4294967295
  406bf0:	d1ee      	bne.n	406bd0 <_vfiprintf_r+0x974>
  406bf2:	9a02      	ldr	r2, [sp, #8]
  406bf4:	07d6      	lsls	r6, r2, #31
  406bf6:	f57f ad9d 	bpl.w	406734 <_vfiprintf_r+0x4d8>
  406bfa:	2b30      	cmp	r3, #48	; 0x30
  406bfc:	f43f ad9a 	beq.w	406734 <_vfiprintf_r+0x4d8>
  406c00:	3902      	subs	r1, #2
  406c02:	2330      	movs	r3, #48	; 0x30
  406c04:	f80b 3c01 	strb.w	r3, [fp, #-1]
  406c08:	eba9 0301 	sub.w	r3, r9, r1
  406c0c:	9305      	str	r3, [sp, #20]
  406c0e:	468b      	mov	fp, r1
  406c10:	e476      	b.n	406500 <_vfiprintf_r+0x2a4>
  406c12:	9b03      	ldr	r3, [sp, #12]
  406c14:	9a08      	ldr	r2, [sp, #32]
  406c16:	428a      	cmp	r2, r1
  406c18:	bfac      	ite	ge
  406c1a:	189b      	addge	r3, r3, r2
  406c1c:	185b      	addlt	r3, r3, r1
  406c1e:	9303      	str	r3, [sp, #12]
  406c20:	e798      	b.n	406b54 <_vfiprintf_r+0x8f8>
  406c22:	2202      	movs	r2, #2
  406c24:	e44d      	b.n	4064c2 <_vfiprintf_r+0x266>
  406c26:	2f00      	cmp	r7, #0
  406c28:	bf08      	it	eq
  406c2a:	2e0a      	cmpeq	r6, #10
  406c2c:	d352      	bcc.n	406cd4 <_vfiprintf_r+0xa78>
  406c2e:	46cb      	mov	fp, r9
  406c30:	4630      	mov	r0, r6
  406c32:	4639      	mov	r1, r7
  406c34:	220a      	movs	r2, #10
  406c36:	2300      	movs	r3, #0
  406c38:	f001 fe9c 	bl	408974 <__aeabi_uldivmod>
  406c3c:	3230      	adds	r2, #48	; 0x30
  406c3e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  406c42:	4630      	mov	r0, r6
  406c44:	4639      	mov	r1, r7
  406c46:	2300      	movs	r3, #0
  406c48:	220a      	movs	r2, #10
  406c4a:	f001 fe93 	bl	408974 <__aeabi_uldivmod>
  406c4e:	4606      	mov	r6, r0
  406c50:	460f      	mov	r7, r1
  406c52:	ea56 0307 	orrs.w	r3, r6, r7
  406c56:	d1eb      	bne.n	406c30 <_vfiprintf_r+0x9d4>
  406c58:	e56c      	b.n	406734 <_vfiprintf_r+0x4d8>
  406c5a:	9405      	str	r4, [sp, #20]
  406c5c:	46cb      	mov	fp, r9
  406c5e:	e44f      	b.n	406500 <_vfiprintf_r+0x2a4>
  406c60:	aa0f      	add	r2, sp, #60	; 0x3c
  406c62:	9904      	ldr	r1, [sp, #16]
  406c64:	9806      	ldr	r0, [sp, #24]
  406c66:	f7ff fab9 	bl	4061dc <__sprint_r.part.0>
  406c6a:	2800      	cmp	r0, #0
  406c6c:	d1a8      	bne.n	406bc0 <_vfiprintf_r+0x964>
  406c6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406c70:	46ca      	mov	sl, r9
  406c72:	e75e      	b.n	406b32 <_vfiprintf_r+0x8d6>
  406c74:	aa0f      	add	r2, sp, #60	; 0x3c
  406c76:	9904      	ldr	r1, [sp, #16]
  406c78:	9806      	ldr	r0, [sp, #24]
  406c7a:	f7ff faaf 	bl	4061dc <__sprint_r.part.0>
  406c7e:	2800      	cmp	r0, #0
  406c80:	d19e      	bne.n	406bc0 <_vfiprintf_r+0x964>
  406c82:	46ca      	mov	sl, r9
  406c84:	f7ff bbc0 	b.w	406408 <_vfiprintf_r+0x1ac>
  406c88:	00409bb4 	.word	0x00409bb4
  406c8c:	00409ba4 	.word	0x00409ba4
  406c90:	3104      	adds	r1, #4
  406c92:	6816      	ldr	r6, [r2, #0]
  406c94:	9107      	str	r1, [sp, #28]
  406c96:	2201      	movs	r2, #1
  406c98:	2700      	movs	r7, #0
  406c9a:	e412      	b.n	4064c2 <_vfiprintf_r+0x266>
  406c9c:	9807      	ldr	r0, [sp, #28]
  406c9e:	4601      	mov	r1, r0
  406ca0:	3104      	adds	r1, #4
  406ca2:	6806      	ldr	r6, [r0, #0]
  406ca4:	9107      	str	r1, [sp, #28]
  406ca6:	2700      	movs	r7, #0
  406ca8:	e40b      	b.n	4064c2 <_vfiprintf_r+0x266>
  406caa:	680e      	ldr	r6, [r1, #0]
  406cac:	3104      	adds	r1, #4
  406cae:	9107      	str	r1, [sp, #28]
  406cb0:	2700      	movs	r7, #0
  406cb2:	e591      	b.n	4067d8 <_vfiprintf_r+0x57c>
  406cb4:	9907      	ldr	r1, [sp, #28]
  406cb6:	680e      	ldr	r6, [r1, #0]
  406cb8:	460a      	mov	r2, r1
  406cba:	17f7      	asrs	r7, r6, #31
  406cbc:	3204      	adds	r2, #4
  406cbe:	9207      	str	r2, [sp, #28]
  406cc0:	4630      	mov	r0, r6
  406cc2:	4639      	mov	r1, r7
  406cc4:	e50f      	b.n	4066e6 <_vfiprintf_r+0x48a>
  406cc6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406cca:	f000 fe7f 	bl	4079cc <__retarget_lock_release_recursive>
  406cce:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406cd2:	e71a      	b.n	406b0a <_vfiprintf_r+0x8ae>
  406cd4:	9b02      	ldr	r3, [sp, #8]
  406cd6:	9302      	str	r3, [sp, #8]
  406cd8:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  406cdc:	3630      	adds	r6, #48	; 0x30
  406cde:	2301      	movs	r3, #1
  406ce0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  406ce4:	9305      	str	r3, [sp, #20]
  406ce6:	e40b      	b.n	406500 <_vfiprintf_r+0x2a4>
  406ce8:	aa0f      	add	r2, sp, #60	; 0x3c
  406cea:	9904      	ldr	r1, [sp, #16]
  406cec:	9806      	ldr	r0, [sp, #24]
  406cee:	f7ff fa75 	bl	4061dc <__sprint_r.part.0>
  406cf2:	2800      	cmp	r0, #0
  406cf4:	f47f af64 	bne.w	406bc0 <_vfiprintf_r+0x964>
  406cf8:	9910      	ldr	r1, [sp, #64]	; 0x40
  406cfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406cfc:	1c48      	adds	r0, r1, #1
  406cfe:	46ca      	mov	sl, r9
  406d00:	e651      	b.n	4069a6 <_vfiprintf_r+0x74a>
  406d02:	aa0f      	add	r2, sp, #60	; 0x3c
  406d04:	9904      	ldr	r1, [sp, #16]
  406d06:	9806      	ldr	r0, [sp, #24]
  406d08:	f7ff fa68 	bl	4061dc <__sprint_r.part.0>
  406d0c:	2800      	cmp	r0, #0
  406d0e:	f47f af57 	bne.w	406bc0 <_vfiprintf_r+0x964>
  406d12:	9910      	ldr	r1, [sp, #64]	; 0x40
  406d14:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d16:	1c48      	adds	r0, r1, #1
  406d18:	46ca      	mov	sl, r9
  406d1a:	e448      	b.n	4065ae <_vfiprintf_r+0x352>
  406d1c:	2a00      	cmp	r2, #0
  406d1e:	f040 8091 	bne.w	406e44 <_vfiprintf_r+0xbe8>
  406d22:	2001      	movs	r0, #1
  406d24:	4611      	mov	r1, r2
  406d26:	46ca      	mov	sl, r9
  406d28:	e641      	b.n	4069ae <_vfiprintf_r+0x752>
  406d2a:	aa0f      	add	r2, sp, #60	; 0x3c
  406d2c:	9904      	ldr	r1, [sp, #16]
  406d2e:	9806      	ldr	r0, [sp, #24]
  406d30:	f7ff fa54 	bl	4061dc <__sprint_r.part.0>
  406d34:	2800      	cmp	r0, #0
  406d36:	f47f af43 	bne.w	406bc0 <_vfiprintf_r+0x964>
  406d3a:	9810      	ldr	r0, [sp, #64]	; 0x40
  406d3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d3e:	3001      	adds	r0, #1
  406d40:	46ca      	mov	sl, r9
  406d42:	e667      	b.n	406a14 <_vfiprintf_r+0x7b8>
  406d44:	46d3      	mov	fp, sl
  406d46:	e6d6      	b.n	406af6 <_vfiprintf_r+0x89a>
  406d48:	9e07      	ldr	r6, [sp, #28]
  406d4a:	3607      	adds	r6, #7
  406d4c:	f026 0207 	bic.w	r2, r6, #7
  406d50:	f102 0108 	add.w	r1, r2, #8
  406d54:	e9d2 6700 	ldrd	r6, r7, [r2]
  406d58:	9107      	str	r1, [sp, #28]
  406d5a:	2201      	movs	r2, #1
  406d5c:	f7ff bbb1 	b.w	4064c2 <_vfiprintf_r+0x266>
  406d60:	9e07      	ldr	r6, [sp, #28]
  406d62:	3607      	adds	r6, #7
  406d64:	f026 0607 	bic.w	r6, r6, #7
  406d68:	e9d6 0100 	ldrd	r0, r1, [r6]
  406d6c:	f106 0208 	add.w	r2, r6, #8
  406d70:	9207      	str	r2, [sp, #28]
  406d72:	4606      	mov	r6, r0
  406d74:	460f      	mov	r7, r1
  406d76:	e4b6      	b.n	4066e6 <_vfiprintf_r+0x48a>
  406d78:	9e07      	ldr	r6, [sp, #28]
  406d7a:	3607      	adds	r6, #7
  406d7c:	f026 0207 	bic.w	r2, r6, #7
  406d80:	f102 0108 	add.w	r1, r2, #8
  406d84:	e9d2 6700 	ldrd	r6, r7, [r2]
  406d88:	9107      	str	r1, [sp, #28]
  406d8a:	2200      	movs	r2, #0
  406d8c:	f7ff bb99 	b.w	4064c2 <_vfiprintf_r+0x266>
  406d90:	9e07      	ldr	r6, [sp, #28]
  406d92:	3607      	adds	r6, #7
  406d94:	f026 0107 	bic.w	r1, r6, #7
  406d98:	f101 0008 	add.w	r0, r1, #8
  406d9c:	9007      	str	r0, [sp, #28]
  406d9e:	e9d1 6700 	ldrd	r6, r7, [r1]
  406da2:	e519      	b.n	4067d8 <_vfiprintf_r+0x57c>
  406da4:	46cb      	mov	fp, r9
  406da6:	f7ff bbab 	b.w	406500 <_vfiprintf_r+0x2a4>
  406daa:	252d      	movs	r5, #45	; 0x2d
  406dac:	4276      	negs	r6, r6
  406dae:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  406db2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406db6:	2201      	movs	r2, #1
  406db8:	f7ff bb88 	b.w	4064cc <_vfiprintf_r+0x270>
  406dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406dbe:	b9b3      	cbnz	r3, 406dee <_vfiprintf_r+0xb92>
  406dc0:	4611      	mov	r1, r2
  406dc2:	2001      	movs	r0, #1
  406dc4:	46ca      	mov	sl, r9
  406dc6:	e5f2      	b.n	4069ae <_vfiprintf_r+0x752>
  406dc8:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406dcc:	f000 fdfe 	bl	4079cc <__retarget_lock_release_recursive>
  406dd0:	f04f 33ff 	mov.w	r3, #4294967295
  406dd4:	9303      	str	r3, [sp, #12]
  406dd6:	f7ff bb50 	b.w	40647a <_vfiprintf_r+0x21e>
  406dda:	aa0f      	add	r2, sp, #60	; 0x3c
  406ddc:	9904      	ldr	r1, [sp, #16]
  406dde:	9806      	ldr	r0, [sp, #24]
  406de0:	f7ff f9fc 	bl	4061dc <__sprint_r.part.0>
  406de4:	2800      	cmp	r0, #0
  406de6:	f47f aeeb 	bne.w	406bc0 <_vfiprintf_r+0x964>
  406dea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406dec:	e6a9      	b.n	406b42 <_vfiprintf_r+0x8e6>
  406dee:	ab0e      	add	r3, sp, #56	; 0x38
  406df0:	2202      	movs	r2, #2
  406df2:	931c      	str	r3, [sp, #112]	; 0x70
  406df4:	921d      	str	r2, [sp, #116]	; 0x74
  406df6:	2001      	movs	r0, #1
  406df8:	46ca      	mov	sl, r9
  406dfa:	e5d0      	b.n	40699e <_vfiprintf_r+0x742>
  406dfc:	aa0f      	add	r2, sp, #60	; 0x3c
  406dfe:	9904      	ldr	r1, [sp, #16]
  406e00:	9806      	ldr	r0, [sp, #24]
  406e02:	f7ff f9eb 	bl	4061dc <__sprint_r.part.0>
  406e06:	2800      	cmp	r0, #0
  406e08:	f47f aeda 	bne.w	406bc0 <_vfiprintf_r+0x964>
  406e0c:	9910      	ldr	r1, [sp, #64]	; 0x40
  406e0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406e10:	1c48      	adds	r0, r1, #1
  406e12:	46ca      	mov	sl, r9
  406e14:	e5a4      	b.n	406960 <_vfiprintf_r+0x704>
  406e16:	9a07      	ldr	r2, [sp, #28]
  406e18:	9903      	ldr	r1, [sp, #12]
  406e1a:	6813      	ldr	r3, [r2, #0]
  406e1c:	17cd      	asrs	r5, r1, #31
  406e1e:	4608      	mov	r0, r1
  406e20:	3204      	adds	r2, #4
  406e22:	4629      	mov	r1, r5
  406e24:	9207      	str	r2, [sp, #28]
  406e26:	e9c3 0100 	strd	r0, r1, [r3]
  406e2a:	f7ff ba54 	b.w	4062d6 <_vfiprintf_r+0x7a>
  406e2e:	4658      	mov	r0, fp
  406e30:	9607      	str	r6, [sp, #28]
  406e32:	9302      	str	r3, [sp, #8]
  406e34:	f7ff f964 	bl	406100 <strlen>
  406e38:	2400      	movs	r4, #0
  406e3a:	9005      	str	r0, [sp, #20]
  406e3c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406e40:	f7ff bb5e 	b.w	406500 <_vfiprintf_r+0x2a4>
  406e44:	aa0f      	add	r2, sp, #60	; 0x3c
  406e46:	9904      	ldr	r1, [sp, #16]
  406e48:	9806      	ldr	r0, [sp, #24]
  406e4a:	f7ff f9c7 	bl	4061dc <__sprint_r.part.0>
  406e4e:	2800      	cmp	r0, #0
  406e50:	f47f aeb6 	bne.w	406bc0 <_vfiprintf_r+0x964>
  406e54:	9910      	ldr	r1, [sp, #64]	; 0x40
  406e56:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406e58:	1c48      	adds	r0, r1, #1
  406e5a:	46ca      	mov	sl, r9
  406e5c:	e5a7      	b.n	4069ae <_vfiprintf_r+0x752>
  406e5e:	9910      	ldr	r1, [sp, #64]	; 0x40
  406e60:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406e62:	4e20      	ldr	r6, [pc, #128]	; (406ee4 <_vfiprintf_r+0xc88>)
  406e64:	3101      	adds	r1, #1
  406e66:	f7ff bb90 	b.w	40658a <_vfiprintf_r+0x32e>
  406e6a:	2c06      	cmp	r4, #6
  406e6c:	bf28      	it	cs
  406e6e:	2406      	movcs	r4, #6
  406e70:	9405      	str	r4, [sp, #20]
  406e72:	9607      	str	r6, [sp, #28]
  406e74:	9401      	str	r4, [sp, #4]
  406e76:	f8df b070 	ldr.w	fp, [pc, #112]	; 406ee8 <_vfiprintf_r+0xc8c>
  406e7a:	e4d5      	b.n	406828 <_vfiprintf_r+0x5cc>
  406e7c:	9810      	ldr	r0, [sp, #64]	; 0x40
  406e7e:	4e19      	ldr	r6, [pc, #100]	; (406ee4 <_vfiprintf_r+0xc88>)
  406e80:	3001      	adds	r0, #1
  406e82:	e603      	b.n	406a8c <_vfiprintf_r+0x830>
  406e84:	9405      	str	r4, [sp, #20]
  406e86:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406e8a:	9607      	str	r6, [sp, #28]
  406e8c:	9302      	str	r3, [sp, #8]
  406e8e:	4604      	mov	r4, r0
  406e90:	f7ff bb36 	b.w	406500 <_vfiprintf_r+0x2a4>
  406e94:	4686      	mov	lr, r0
  406e96:	f7ff bbce 	b.w	406636 <_vfiprintf_r+0x3da>
  406e9a:	9806      	ldr	r0, [sp, #24]
  406e9c:	aa0f      	add	r2, sp, #60	; 0x3c
  406e9e:	4659      	mov	r1, fp
  406ea0:	f7ff f99c 	bl	4061dc <__sprint_r.part.0>
  406ea4:	2800      	cmp	r0, #0
  406ea6:	f43f ae24 	beq.w	406af2 <_vfiprintf_r+0x896>
  406eaa:	e624      	b.n	406af6 <_vfiprintf_r+0x89a>
  406eac:	9907      	ldr	r1, [sp, #28]
  406eae:	f898 2001 	ldrb.w	r2, [r8, #1]
  406eb2:	680c      	ldr	r4, [r1, #0]
  406eb4:	3104      	adds	r1, #4
  406eb6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  406eba:	46b8      	mov	r8, r7
  406ebc:	9107      	str	r1, [sp, #28]
  406ebe:	f7ff ba3f 	b.w	406340 <_vfiprintf_r+0xe4>
  406ec2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406ec6:	e43c      	b.n	406742 <_vfiprintf_r+0x4e6>
  406ec8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406ecc:	e521      	b.n	406912 <_vfiprintf_r+0x6b6>
  406ece:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406ed2:	f7ff bbf4 	b.w	4066be <_vfiprintf_r+0x462>
  406ed6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406eda:	e491      	b.n	406800 <_vfiprintf_r+0x5a4>
  406edc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406ee0:	e469      	b.n	4067b6 <_vfiprintf_r+0x55a>
  406ee2:	bf00      	nop
  406ee4:	00409ba4 	.word	0x00409ba4
  406ee8:	00409b9c 	.word	0x00409b9c

00406eec <__sbprintf>:
  406eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406ef0:	460c      	mov	r4, r1
  406ef2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  406ef6:	8989      	ldrh	r1, [r1, #12]
  406ef8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406efa:	89e5      	ldrh	r5, [r4, #14]
  406efc:	9619      	str	r6, [sp, #100]	; 0x64
  406efe:	f021 0102 	bic.w	r1, r1, #2
  406f02:	4606      	mov	r6, r0
  406f04:	69e0      	ldr	r0, [r4, #28]
  406f06:	f8ad 100c 	strh.w	r1, [sp, #12]
  406f0a:	4617      	mov	r7, r2
  406f0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  406f10:	6a62      	ldr	r2, [r4, #36]	; 0x24
  406f12:	f8ad 500e 	strh.w	r5, [sp, #14]
  406f16:	4698      	mov	r8, r3
  406f18:	ad1a      	add	r5, sp, #104	; 0x68
  406f1a:	2300      	movs	r3, #0
  406f1c:	9007      	str	r0, [sp, #28]
  406f1e:	a816      	add	r0, sp, #88	; 0x58
  406f20:	9209      	str	r2, [sp, #36]	; 0x24
  406f22:	9306      	str	r3, [sp, #24]
  406f24:	9500      	str	r5, [sp, #0]
  406f26:	9504      	str	r5, [sp, #16]
  406f28:	9102      	str	r1, [sp, #8]
  406f2a:	9105      	str	r1, [sp, #20]
  406f2c:	f000 fd48 	bl	4079c0 <__retarget_lock_init_recursive>
  406f30:	4643      	mov	r3, r8
  406f32:	463a      	mov	r2, r7
  406f34:	4669      	mov	r1, sp
  406f36:	4630      	mov	r0, r6
  406f38:	f7ff f990 	bl	40625c <_vfiprintf_r>
  406f3c:	1e05      	subs	r5, r0, #0
  406f3e:	db07      	blt.n	406f50 <__sbprintf+0x64>
  406f40:	4630      	mov	r0, r6
  406f42:	4669      	mov	r1, sp
  406f44:	f000 f928 	bl	407198 <_fflush_r>
  406f48:	2800      	cmp	r0, #0
  406f4a:	bf18      	it	ne
  406f4c:	f04f 35ff 	movne.w	r5, #4294967295
  406f50:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  406f54:	065b      	lsls	r3, r3, #25
  406f56:	d503      	bpl.n	406f60 <__sbprintf+0x74>
  406f58:	89a3      	ldrh	r3, [r4, #12]
  406f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406f5e:	81a3      	strh	r3, [r4, #12]
  406f60:	9816      	ldr	r0, [sp, #88]	; 0x58
  406f62:	f000 fd2f 	bl	4079c4 <__retarget_lock_close_recursive>
  406f66:	4628      	mov	r0, r5
  406f68:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  406f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00406f70 <__swsetup_r>:
  406f70:	b538      	push	{r3, r4, r5, lr}
  406f72:	4b30      	ldr	r3, [pc, #192]	; (407034 <__swsetup_r+0xc4>)
  406f74:	681b      	ldr	r3, [r3, #0]
  406f76:	4605      	mov	r5, r0
  406f78:	460c      	mov	r4, r1
  406f7a:	b113      	cbz	r3, 406f82 <__swsetup_r+0x12>
  406f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  406f7e:	2a00      	cmp	r2, #0
  406f80:	d038      	beq.n	406ff4 <__swsetup_r+0x84>
  406f82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406f86:	b293      	uxth	r3, r2
  406f88:	0718      	lsls	r0, r3, #28
  406f8a:	d50c      	bpl.n	406fa6 <__swsetup_r+0x36>
  406f8c:	6920      	ldr	r0, [r4, #16]
  406f8e:	b1a8      	cbz	r0, 406fbc <__swsetup_r+0x4c>
  406f90:	f013 0201 	ands.w	r2, r3, #1
  406f94:	d01e      	beq.n	406fd4 <__swsetup_r+0x64>
  406f96:	6963      	ldr	r3, [r4, #20]
  406f98:	2200      	movs	r2, #0
  406f9a:	425b      	negs	r3, r3
  406f9c:	61a3      	str	r3, [r4, #24]
  406f9e:	60a2      	str	r2, [r4, #8]
  406fa0:	b1f0      	cbz	r0, 406fe0 <__swsetup_r+0x70>
  406fa2:	2000      	movs	r0, #0
  406fa4:	bd38      	pop	{r3, r4, r5, pc}
  406fa6:	06d9      	lsls	r1, r3, #27
  406fa8:	d53c      	bpl.n	407024 <__swsetup_r+0xb4>
  406faa:	0758      	lsls	r0, r3, #29
  406fac:	d426      	bmi.n	406ffc <__swsetup_r+0x8c>
  406fae:	6920      	ldr	r0, [r4, #16]
  406fb0:	f042 0308 	orr.w	r3, r2, #8
  406fb4:	81a3      	strh	r3, [r4, #12]
  406fb6:	b29b      	uxth	r3, r3
  406fb8:	2800      	cmp	r0, #0
  406fba:	d1e9      	bne.n	406f90 <__swsetup_r+0x20>
  406fbc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  406fc0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406fc4:	d0e4      	beq.n	406f90 <__swsetup_r+0x20>
  406fc6:	4628      	mov	r0, r5
  406fc8:	4621      	mov	r1, r4
  406fca:	f000 fd2f 	bl	407a2c <__smakebuf_r>
  406fce:	89a3      	ldrh	r3, [r4, #12]
  406fd0:	6920      	ldr	r0, [r4, #16]
  406fd2:	e7dd      	b.n	406f90 <__swsetup_r+0x20>
  406fd4:	0799      	lsls	r1, r3, #30
  406fd6:	bf58      	it	pl
  406fd8:	6962      	ldrpl	r2, [r4, #20]
  406fda:	60a2      	str	r2, [r4, #8]
  406fdc:	2800      	cmp	r0, #0
  406fde:	d1e0      	bne.n	406fa2 <__swsetup_r+0x32>
  406fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406fe4:	061a      	lsls	r2, r3, #24
  406fe6:	d5dd      	bpl.n	406fa4 <__swsetup_r+0x34>
  406fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406fec:	81a3      	strh	r3, [r4, #12]
  406fee:	f04f 30ff 	mov.w	r0, #4294967295
  406ff2:	bd38      	pop	{r3, r4, r5, pc}
  406ff4:	4618      	mov	r0, r3
  406ff6:	f000 f927 	bl	407248 <__sinit>
  406ffa:	e7c2      	b.n	406f82 <__swsetup_r+0x12>
  406ffc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406ffe:	b151      	cbz	r1, 407016 <__swsetup_r+0xa6>
  407000:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407004:	4299      	cmp	r1, r3
  407006:	d004      	beq.n	407012 <__swsetup_r+0xa2>
  407008:	4628      	mov	r0, r5
  40700a:	f000 fa43 	bl	407494 <_free_r>
  40700e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407012:	2300      	movs	r3, #0
  407014:	6323      	str	r3, [r4, #48]	; 0x30
  407016:	2300      	movs	r3, #0
  407018:	6920      	ldr	r0, [r4, #16]
  40701a:	6063      	str	r3, [r4, #4]
  40701c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  407020:	6020      	str	r0, [r4, #0]
  407022:	e7c5      	b.n	406fb0 <__swsetup_r+0x40>
  407024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  407028:	2309      	movs	r3, #9
  40702a:	602b      	str	r3, [r5, #0]
  40702c:	f04f 30ff 	mov.w	r0, #4294967295
  407030:	81a2      	strh	r2, [r4, #12]
  407032:	bd38      	pop	{r3, r4, r5, pc}
  407034:	20400028 	.word	0x20400028

00407038 <register_fini>:
  407038:	4b02      	ldr	r3, [pc, #8]	; (407044 <register_fini+0xc>)
  40703a:	b113      	cbz	r3, 407042 <register_fini+0xa>
  40703c:	4802      	ldr	r0, [pc, #8]	; (407048 <register_fini+0x10>)
  40703e:	f000 b805 	b.w	40704c <atexit>
  407042:	4770      	bx	lr
  407044:	00000000 	.word	0x00000000
  407048:	004072b9 	.word	0x004072b9

0040704c <atexit>:
  40704c:	2300      	movs	r3, #0
  40704e:	4601      	mov	r1, r0
  407050:	461a      	mov	r2, r3
  407052:	4618      	mov	r0, r3
  407054:	f001 bb66 	b.w	408724 <__register_exitproc>

00407058 <__sflush_r>:
  407058:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40705c:	b29a      	uxth	r2, r3
  40705e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407062:	460d      	mov	r5, r1
  407064:	0711      	lsls	r1, r2, #28
  407066:	4680      	mov	r8, r0
  407068:	d43a      	bmi.n	4070e0 <__sflush_r+0x88>
  40706a:	686a      	ldr	r2, [r5, #4]
  40706c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  407070:	2a00      	cmp	r2, #0
  407072:	81ab      	strh	r3, [r5, #12]
  407074:	dd6f      	ble.n	407156 <__sflush_r+0xfe>
  407076:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407078:	2c00      	cmp	r4, #0
  40707a:	d049      	beq.n	407110 <__sflush_r+0xb8>
  40707c:	2200      	movs	r2, #0
  40707e:	b29b      	uxth	r3, r3
  407080:	f8d8 6000 	ldr.w	r6, [r8]
  407084:	f8c8 2000 	str.w	r2, [r8]
  407088:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40708c:	d067      	beq.n	40715e <__sflush_r+0x106>
  40708e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  407090:	075f      	lsls	r7, r3, #29
  407092:	d505      	bpl.n	4070a0 <__sflush_r+0x48>
  407094:	6869      	ldr	r1, [r5, #4]
  407096:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  407098:	1a52      	subs	r2, r2, r1
  40709a:	b10b      	cbz	r3, 4070a0 <__sflush_r+0x48>
  40709c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40709e:	1ad2      	subs	r2, r2, r3
  4070a0:	2300      	movs	r3, #0
  4070a2:	69e9      	ldr	r1, [r5, #28]
  4070a4:	4640      	mov	r0, r8
  4070a6:	47a0      	blx	r4
  4070a8:	1c44      	adds	r4, r0, #1
  4070aa:	d03c      	beq.n	407126 <__sflush_r+0xce>
  4070ac:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4070b0:	692a      	ldr	r2, [r5, #16]
  4070b2:	602a      	str	r2, [r5, #0]
  4070b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4070b8:	2200      	movs	r2, #0
  4070ba:	81ab      	strh	r3, [r5, #12]
  4070bc:	04db      	lsls	r3, r3, #19
  4070be:	606a      	str	r2, [r5, #4]
  4070c0:	d447      	bmi.n	407152 <__sflush_r+0xfa>
  4070c2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4070c4:	f8c8 6000 	str.w	r6, [r8]
  4070c8:	b311      	cbz	r1, 407110 <__sflush_r+0xb8>
  4070ca:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4070ce:	4299      	cmp	r1, r3
  4070d0:	d002      	beq.n	4070d8 <__sflush_r+0x80>
  4070d2:	4640      	mov	r0, r8
  4070d4:	f000 f9de 	bl	407494 <_free_r>
  4070d8:	2000      	movs	r0, #0
  4070da:	6328      	str	r0, [r5, #48]	; 0x30
  4070dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4070e0:	692e      	ldr	r6, [r5, #16]
  4070e2:	b1ae      	cbz	r6, 407110 <__sflush_r+0xb8>
  4070e4:	682c      	ldr	r4, [r5, #0]
  4070e6:	602e      	str	r6, [r5, #0]
  4070e8:	0791      	lsls	r1, r2, #30
  4070ea:	bf0c      	ite	eq
  4070ec:	696b      	ldreq	r3, [r5, #20]
  4070ee:	2300      	movne	r3, #0
  4070f0:	1ba4      	subs	r4, r4, r6
  4070f2:	60ab      	str	r3, [r5, #8]
  4070f4:	e00a      	b.n	40710c <__sflush_r+0xb4>
  4070f6:	4623      	mov	r3, r4
  4070f8:	4632      	mov	r2, r6
  4070fa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4070fc:	69e9      	ldr	r1, [r5, #28]
  4070fe:	4640      	mov	r0, r8
  407100:	47b8      	blx	r7
  407102:	2800      	cmp	r0, #0
  407104:	eba4 0400 	sub.w	r4, r4, r0
  407108:	4406      	add	r6, r0
  40710a:	dd04      	ble.n	407116 <__sflush_r+0xbe>
  40710c:	2c00      	cmp	r4, #0
  40710e:	dcf2      	bgt.n	4070f6 <__sflush_r+0x9e>
  407110:	2000      	movs	r0, #0
  407112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407116:	89ab      	ldrh	r3, [r5, #12]
  407118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40711c:	81ab      	strh	r3, [r5, #12]
  40711e:	f04f 30ff 	mov.w	r0, #4294967295
  407122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407126:	f8d8 4000 	ldr.w	r4, [r8]
  40712a:	2c1d      	cmp	r4, #29
  40712c:	d8f3      	bhi.n	407116 <__sflush_r+0xbe>
  40712e:	4b19      	ldr	r3, [pc, #100]	; (407194 <__sflush_r+0x13c>)
  407130:	40e3      	lsrs	r3, r4
  407132:	43db      	mvns	r3, r3
  407134:	f013 0301 	ands.w	r3, r3, #1
  407138:	d1ed      	bne.n	407116 <__sflush_r+0xbe>
  40713a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40713e:	606b      	str	r3, [r5, #4]
  407140:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  407144:	6929      	ldr	r1, [r5, #16]
  407146:	81ab      	strh	r3, [r5, #12]
  407148:	04da      	lsls	r2, r3, #19
  40714a:	6029      	str	r1, [r5, #0]
  40714c:	d5b9      	bpl.n	4070c2 <__sflush_r+0x6a>
  40714e:	2c00      	cmp	r4, #0
  407150:	d1b7      	bne.n	4070c2 <__sflush_r+0x6a>
  407152:	6528      	str	r0, [r5, #80]	; 0x50
  407154:	e7b5      	b.n	4070c2 <__sflush_r+0x6a>
  407156:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  407158:	2a00      	cmp	r2, #0
  40715a:	dc8c      	bgt.n	407076 <__sflush_r+0x1e>
  40715c:	e7d8      	b.n	407110 <__sflush_r+0xb8>
  40715e:	2301      	movs	r3, #1
  407160:	69e9      	ldr	r1, [r5, #28]
  407162:	4640      	mov	r0, r8
  407164:	47a0      	blx	r4
  407166:	1c43      	adds	r3, r0, #1
  407168:	4602      	mov	r2, r0
  40716a:	d002      	beq.n	407172 <__sflush_r+0x11a>
  40716c:	89ab      	ldrh	r3, [r5, #12]
  40716e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407170:	e78e      	b.n	407090 <__sflush_r+0x38>
  407172:	f8d8 3000 	ldr.w	r3, [r8]
  407176:	2b00      	cmp	r3, #0
  407178:	d0f8      	beq.n	40716c <__sflush_r+0x114>
  40717a:	2b1d      	cmp	r3, #29
  40717c:	d001      	beq.n	407182 <__sflush_r+0x12a>
  40717e:	2b16      	cmp	r3, #22
  407180:	d102      	bne.n	407188 <__sflush_r+0x130>
  407182:	f8c8 6000 	str.w	r6, [r8]
  407186:	e7c3      	b.n	407110 <__sflush_r+0xb8>
  407188:	89ab      	ldrh	r3, [r5, #12]
  40718a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40718e:	81ab      	strh	r3, [r5, #12]
  407190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407194:	20400001 	.word	0x20400001

00407198 <_fflush_r>:
  407198:	b538      	push	{r3, r4, r5, lr}
  40719a:	460d      	mov	r5, r1
  40719c:	4604      	mov	r4, r0
  40719e:	b108      	cbz	r0, 4071a4 <_fflush_r+0xc>
  4071a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4071a2:	b1bb      	cbz	r3, 4071d4 <_fflush_r+0x3c>
  4071a4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4071a8:	b188      	cbz	r0, 4071ce <_fflush_r+0x36>
  4071aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4071ac:	07db      	lsls	r3, r3, #31
  4071ae:	d401      	bmi.n	4071b4 <_fflush_r+0x1c>
  4071b0:	0581      	lsls	r1, r0, #22
  4071b2:	d517      	bpl.n	4071e4 <_fflush_r+0x4c>
  4071b4:	4620      	mov	r0, r4
  4071b6:	4629      	mov	r1, r5
  4071b8:	f7ff ff4e 	bl	407058 <__sflush_r>
  4071bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4071be:	07da      	lsls	r2, r3, #31
  4071c0:	4604      	mov	r4, r0
  4071c2:	d402      	bmi.n	4071ca <_fflush_r+0x32>
  4071c4:	89ab      	ldrh	r3, [r5, #12]
  4071c6:	059b      	lsls	r3, r3, #22
  4071c8:	d507      	bpl.n	4071da <_fflush_r+0x42>
  4071ca:	4620      	mov	r0, r4
  4071cc:	bd38      	pop	{r3, r4, r5, pc}
  4071ce:	4604      	mov	r4, r0
  4071d0:	4620      	mov	r0, r4
  4071d2:	bd38      	pop	{r3, r4, r5, pc}
  4071d4:	f000 f838 	bl	407248 <__sinit>
  4071d8:	e7e4      	b.n	4071a4 <_fflush_r+0xc>
  4071da:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4071dc:	f000 fbf6 	bl	4079cc <__retarget_lock_release_recursive>
  4071e0:	4620      	mov	r0, r4
  4071e2:	bd38      	pop	{r3, r4, r5, pc}
  4071e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4071e6:	f000 fbef 	bl	4079c8 <__retarget_lock_acquire_recursive>
  4071ea:	e7e3      	b.n	4071b4 <_fflush_r+0x1c>

004071ec <_cleanup_r>:
  4071ec:	4901      	ldr	r1, [pc, #4]	; (4071f4 <_cleanup_r+0x8>)
  4071ee:	f000 bbaf 	b.w	407950 <_fwalk_reent>
  4071f2:	bf00      	nop
  4071f4:	0040880d 	.word	0x0040880d

004071f8 <std.isra.0>:
  4071f8:	b510      	push	{r4, lr}
  4071fa:	2300      	movs	r3, #0
  4071fc:	4604      	mov	r4, r0
  4071fe:	8181      	strh	r1, [r0, #12]
  407200:	81c2      	strh	r2, [r0, #14]
  407202:	6003      	str	r3, [r0, #0]
  407204:	6043      	str	r3, [r0, #4]
  407206:	6083      	str	r3, [r0, #8]
  407208:	6643      	str	r3, [r0, #100]	; 0x64
  40720a:	6103      	str	r3, [r0, #16]
  40720c:	6143      	str	r3, [r0, #20]
  40720e:	6183      	str	r3, [r0, #24]
  407210:	4619      	mov	r1, r3
  407212:	2208      	movs	r2, #8
  407214:	305c      	adds	r0, #92	; 0x5c
  407216:	f7fe fe3d 	bl	405e94 <memset>
  40721a:	4807      	ldr	r0, [pc, #28]	; (407238 <std.isra.0+0x40>)
  40721c:	4907      	ldr	r1, [pc, #28]	; (40723c <std.isra.0+0x44>)
  40721e:	4a08      	ldr	r2, [pc, #32]	; (407240 <std.isra.0+0x48>)
  407220:	4b08      	ldr	r3, [pc, #32]	; (407244 <std.isra.0+0x4c>)
  407222:	6220      	str	r0, [r4, #32]
  407224:	61e4      	str	r4, [r4, #28]
  407226:	6261      	str	r1, [r4, #36]	; 0x24
  407228:	62a2      	str	r2, [r4, #40]	; 0x28
  40722a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40722c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  407230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407234:	f000 bbc4 	b.w	4079c0 <__retarget_lock_init_recursive>
  407238:	00408551 	.word	0x00408551
  40723c:	00408575 	.word	0x00408575
  407240:	004085b1 	.word	0x004085b1
  407244:	004085d1 	.word	0x004085d1

00407248 <__sinit>:
  407248:	b510      	push	{r4, lr}
  40724a:	4604      	mov	r4, r0
  40724c:	4812      	ldr	r0, [pc, #72]	; (407298 <__sinit+0x50>)
  40724e:	f000 fbbb 	bl	4079c8 <__retarget_lock_acquire_recursive>
  407252:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  407254:	b9d2      	cbnz	r2, 40728c <__sinit+0x44>
  407256:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40725a:	4810      	ldr	r0, [pc, #64]	; (40729c <__sinit+0x54>)
  40725c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  407260:	2103      	movs	r1, #3
  407262:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  407266:	63e0      	str	r0, [r4, #60]	; 0x3c
  407268:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40726c:	6860      	ldr	r0, [r4, #4]
  40726e:	2104      	movs	r1, #4
  407270:	f7ff ffc2 	bl	4071f8 <std.isra.0>
  407274:	2201      	movs	r2, #1
  407276:	2109      	movs	r1, #9
  407278:	68a0      	ldr	r0, [r4, #8]
  40727a:	f7ff ffbd 	bl	4071f8 <std.isra.0>
  40727e:	2202      	movs	r2, #2
  407280:	2112      	movs	r1, #18
  407282:	68e0      	ldr	r0, [r4, #12]
  407284:	f7ff ffb8 	bl	4071f8 <std.isra.0>
  407288:	2301      	movs	r3, #1
  40728a:	63a3      	str	r3, [r4, #56]	; 0x38
  40728c:	4802      	ldr	r0, [pc, #8]	; (407298 <__sinit+0x50>)
  40728e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407292:	f000 bb9b 	b.w	4079cc <__retarget_lock_release_recursive>
  407296:	bf00      	nop
  407298:	2040cab8 	.word	0x2040cab8
  40729c:	004071ed 	.word	0x004071ed

004072a0 <__sfp_lock_acquire>:
  4072a0:	4801      	ldr	r0, [pc, #4]	; (4072a8 <__sfp_lock_acquire+0x8>)
  4072a2:	f000 bb91 	b.w	4079c8 <__retarget_lock_acquire_recursive>
  4072a6:	bf00      	nop
  4072a8:	2040cacc 	.word	0x2040cacc

004072ac <__sfp_lock_release>:
  4072ac:	4801      	ldr	r0, [pc, #4]	; (4072b4 <__sfp_lock_release+0x8>)
  4072ae:	f000 bb8d 	b.w	4079cc <__retarget_lock_release_recursive>
  4072b2:	bf00      	nop
  4072b4:	2040cacc 	.word	0x2040cacc

004072b8 <__libc_fini_array>:
  4072b8:	b538      	push	{r3, r4, r5, lr}
  4072ba:	4c0a      	ldr	r4, [pc, #40]	; (4072e4 <__libc_fini_array+0x2c>)
  4072bc:	4d0a      	ldr	r5, [pc, #40]	; (4072e8 <__libc_fini_array+0x30>)
  4072be:	1b64      	subs	r4, r4, r5
  4072c0:	10a4      	asrs	r4, r4, #2
  4072c2:	d00a      	beq.n	4072da <__libc_fini_array+0x22>
  4072c4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4072c8:	3b01      	subs	r3, #1
  4072ca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4072ce:	3c01      	subs	r4, #1
  4072d0:	f855 3904 	ldr.w	r3, [r5], #-4
  4072d4:	4798      	blx	r3
  4072d6:	2c00      	cmp	r4, #0
  4072d8:	d1f9      	bne.n	4072ce <__libc_fini_array+0x16>
  4072da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4072de:	f002 bd05 	b.w	409cec <_fini>
  4072e2:	bf00      	nop
  4072e4:	00409cfc 	.word	0x00409cfc
  4072e8:	00409cf8 	.word	0x00409cf8

004072ec <__fputwc>:
  4072ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4072f0:	b082      	sub	sp, #8
  4072f2:	4680      	mov	r8, r0
  4072f4:	4689      	mov	r9, r1
  4072f6:	4614      	mov	r4, r2
  4072f8:	f000 fb54 	bl	4079a4 <__locale_mb_cur_max>
  4072fc:	2801      	cmp	r0, #1
  4072fe:	d036      	beq.n	40736e <__fputwc+0x82>
  407300:	464a      	mov	r2, r9
  407302:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  407306:	a901      	add	r1, sp, #4
  407308:	4640      	mov	r0, r8
  40730a:	f001 f9bd 	bl	408688 <_wcrtomb_r>
  40730e:	1c42      	adds	r2, r0, #1
  407310:	4606      	mov	r6, r0
  407312:	d025      	beq.n	407360 <__fputwc+0x74>
  407314:	b3a8      	cbz	r0, 407382 <__fputwc+0x96>
  407316:	f89d e004 	ldrb.w	lr, [sp, #4]
  40731a:	2500      	movs	r5, #0
  40731c:	f10d 0a04 	add.w	sl, sp, #4
  407320:	e009      	b.n	407336 <__fputwc+0x4a>
  407322:	6823      	ldr	r3, [r4, #0]
  407324:	1c5a      	adds	r2, r3, #1
  407326:	6022      	str	r2, [r4, #0]
  407328:	f883 e000 	strb.w	lr, [r3]
  40732c:	3501      	adds	r5, #1
  40732e:	42b5      	cmp	r5, r6
  407330:	d227      	bcs.n	407382 <__fputwc+0x96>
  407332:	f815 e00a 	ldrb.w	lr, [r5, sl]
  407336:	68a3      	ldr	r3, [r4, #8]
  407338:	3b01      	subs	r3, #1
  40733a:	2b00      	cmp	r3, #0
  40733c:	60a3      	str	r3, [r4, #8]
  40733e:	daf0      	bge.n	407322 <__fputwc+0x36>
  407340:	69a7      	ldr	r7, [r4, #24]
  407342:	42bb      	cmp	r3, r7
  407344:	4671      	mov	r1, lr
  407346:	4622      	mov	r2, r4
  407348:	4640      	mov	r0, r8
  40734a:	db02      	blt.n	407352 <__fputwc+0x66>
  40734c:	f1be 0f0a 	cmp.w	lr, #10
  407350:	d1e7      	bne.n	407322 <__fputwc+0x36>
  407352:	f001 f941 	bl	4085d8 <__swbuf_r>
  407356:	1c43      	adds	r3, r0, #1
  407358:	d1e8      	bne.n	40732c <__fputwc+0x40>
  40735a:	b002      	add	sp, #8
  40735c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407360:	89a3      	ldrh	r3, [r4, #12]
  407362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407366:	81a3      	strh	r3, [r4, #12]
  407368:	b002      	add	sp, #8
  40736a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40736e:	f109 33ff 	add.w	r3, r9, #4294967295
  407372:	2bfe      	cmp	r3, #254	; 0xfe
  407374:	d8c4      	bhi.n	407300 <__fputwc+0x14>
  407376:	fa5f fe89 	uxtb.w	lr, r9
  40737a:	4606      	mov	r6, r0
  40737c:	f88d e004 	strb.w	lr, [sp, #4]
  407380:	e7cb      	b.n	40731a <__fputwc+0x2e>
  407382:	4648      	mov	r0, r9
  407384:	b002      	add	sp, #8
  407386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40738a:	bf00      	nop

0040738c <_fputwc_r>:
  40738c:	b530      	push	{r4, r5, lr}
  40738e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  407390:	f013 0f01 	tst.w	r3, #1
  407394:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  407398:	4614      	mov	r4, r2
  40739a:	b083      	sub	sp, #12
  40739c:	4605      	mov	r5, r0
  40739e:	b29a      	uxth	r2, r3
  4073a0:	d101      	bne.n	4073a6 <_fputwc_r+0x1a>
  4073a2:	0590      	lsls	r0, r2, #22
  4073a4:	d51c      	bpl.n	4073e0 <_fputwc_r+0x54>
  4073a6:	0490      	lsls	r0, r2, #18
  4073a8:	d406      	bmi.n	4073b8 <_fputwc_r+0x2c>
  4073aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4073ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4073b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4073b4:	81a3      	strh	r3, [r4, #12]
  4073b6:	6662      	str	r2, [r4, #100]	; 0x64
  4073b8:	4628      	mov	r0, r5
  4073ba:	4622      	mov	r2, r4
  4073bc:	f7ff ff96 	bl	4072ec <__fputwc>
  4073c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4073c2:	07da      	lsls	r2, r3, #31
  4073c4:	4605      	mov	r5, r0
  4073c6:	d402      	bmi.n	4073ce <_fputwc_r+0x42>
  4073c8:	89a3      	ldrh	r3, [r4, #12]
  4073ca:	059b      	lsls	r3, r3, #22
  4073cc:	d502      	bpl.n	4073d4 <_fputwc_r+0x48>
  4073ce:	4628      	mov	r0, r5
  4073d0:	b003      	add	sp, #12
  4073d2:	bd30      	pop	{r4, r5, pc}
  4073d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4073d6:	f000 faf9 	bl	4079cc <__retarget_lock_release_recursive>
  4073da:	4628      	mov	r0, r5
  4073dc:	b003      	add	sp, #12
  4073de:	bd30      	pop	{r4, r5, pc}
  4073e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4073e2:	9101      	str	r1, [sp, #4]
  4073e4:	f000 faf0 	bl	4079c8 <__retarget_lock_acquire_recursive>
  4073e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4073ec:	9901      	ldr	r1, [sp, #4]
  4073ee:	b29a      	uxth	r2, r3
  4073f0:	e7d9      	b.n	4073a6 <_fputwc_r+0x1a>
  4073f2:	bf00      	nop

004073f4 <_malloc_trim_r>:
  4073f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4073f6:	4f24      	ldr	r7, [pc, #144]	; (407488 <_malloc_trim_r+0x94>)
  4073f8:	460c      	mov	r4, r1
  4073fa:	4606      	mov	r6, r0
  4073fc:	f000 fee4 	bl	4081c8 <__malloc_lock>
  407400:	68bb      	ldr	r3, [r7, #8]
  407402:	685d      	ldr	r5, [r3, #4]
  407404:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407408:	310f      	adds	r1, #15
  40740a:	f025 0503 	bic.w	r5, r5, #3
  40740e:	4429      	add	r1, r5
  407410:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407414:	f021 010f 	bic.w	r1, r1, #15
  407418:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40741c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407420:	db07      	blt.n	407432 <_malloc_trim_r+0x3e>
  407422:	2100      	movs	r1, #0
  407424:	4630      	mov	r0, r6
  407426:	f001 f881 	bl	40852c <_sbrk_r>
  40742a:	68bb      	ldr	r3, [r7, #8]
  40742c:	442b      	add	r3, r5
  40742e:	4298      	cmp	r0, r3
  407430:	d004      	beq.n	40743c <_malloc_trim_r+0x48>
  407432:	4630      	mov	r0, r6
  407434:	f000 fece 	bl	4081d4 <__malloc_unlock>
  407438:	2000      	movs	r0, #0
  40743a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40743c:	4261      	negs	r1, r4
  40743e:	4630      	mov	r0, r6
  407440:	f001 f874 	bl	40852c <_sbrk_r>
  407444:	3001      	adds	r0, #1
  407446:	d00d      	beq.n	407464 <_malloc_trim_r+0x70>
  407448:	4b10      	ldr	r3, [pc, #64]	; (40748c <_malloc_trim_r+0x98>)
  40744a:	68ba      	ldr	r2, [r7, #8]
  40744c:	6819      	ldr	r1, [r3, #0]
  40744e:	1b2d      	subs	r5, r5, r4
  407450:	f045 0501 	orr.w	r5, r5, #1
  407454:	4630      	mov	r0, r6
  407456:	1b09      	subs	r1, r1, r4
  407458:	6055      	str	r5, [r2, #4]
  40745a:	6019      	str	r1, [r3, #0]
  40745c:	f000 feba 	bl	4081d4 <__malloc_unlock>
  407460:	2001      	movs	r0, #1
  407462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407464:	2100      	movs	r1, #0
  407466:	4630      	mov	r0, r6
  407468:	f001 f860 	bl	40852c <_sbrk_r>
  40746c:	68ba      	ldr	r2, [r7, #8]
  40746e:	1a83      	subs	r3, r0, r2
  407470:	2b0f      	cmp	r3, #15
  407472:	ddde      	ble.n	407432 <_malloc_trim_r+0x3e>
  407474:	4c06      	ldr	r4, [pc, #24]	; (407490 <_malloc_trim_r+0x9c>)
  407476:	4905      	ldr	r1, [pc, #20]	; (40748c <_malloc_trim_r+0x98>)
  407478:	6824      	ldr	r4, [r4, #0]
  40747a:	f043 0301 	orr.w	r3, r3, #1
  40747e:	1b00      	subs	r0, r0, r4
  407480:	6053      	str	r3, [r2, #4]
  407482:	6008      	str	r0, [r1, #0]
  407484:	e7d5      	b.n	407432 <_malloc_trim_r+0x3e>
  407486:	bf00      	nop
  407488:	204005c8 	.word	0x204005c8
  40748c:	2040c96c 	.word	0x2040c96c
  407490:	204009d0 	.word	0x204009d0

00407494 <_free_r>:
  407494:	2900      	cmp	r1, #0
  407496:	d044      	beq.n	407522 <_free_r+0x8e>
  407498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40749c:	460d      	mov	r5, r1
  40749e:	4680      	mov	r8, r0
  4074a0:	f000 fe92 	bl	4081c8 <__malloc_lock>
  4074a4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4074a8:	4969      	ldr	r1, [pc, #420]	; (407650 <_free_r+0x1bc>)
  4074aa:	f027 0301 	bic.w	r3, r7, #1
  4074ae:	f1a5 0408 	sub.w	r4, r5, #8
  4074b2:	18e2      	adds	r2, r4, r3
  4074b4:	688e      	ldr	r6, [r1, #8]
  4074b6:	6850      	ldr	r0, [r2, #4]
  4074b8:	42b2      	cmp	r2, r6
  4074ba:	f020 0003 	bic.w	r0, r0, #3
  4074be:	d05e      	beq.n	40757e <_free_r+0xea>
  4074c0:	07fe      	lsls	r6, r7, #31
  4074c2:	6050      	str	r0, [r2, #4]
  4074c4:	d40b      	bmi.n	4074de <_free_r+0x4a>
  4074c6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4074ca:	1be4      	subs	r4, r4, r7
  4074cc:	f101 0e08 	add.w	lr, r1, #8
  4074d0:	68a5      	ldr	r5, [r4, #8]
  4074d2:	4575      	cmp	r5, lr
  4074d4:	443b      	add	r3, r7
  4074d6:	d06d      	beq.n	4075b4 <_free_r+0x120>
  4074d8:	68e7      	ldr	r7, [r4, #12]
  4074da:	60ef      	str	r7, [r5, #12]
  4074dc:	60bd      	str	r5, [r7, #8]
  4074de:	1815      	adds	r5, r2, r0
  4074e0:	686d      	ldr	r5, [r5, #4]
  4074e2:	07ed      	lsls	r5, r5, #31
  4074e4:	d53e      	bpl.n	407564 <_free_r+0xd0>
  4074e6:	f043 0201 	orr.w	r2, r3, #1
  4074ea:	6062      	str	r2, [r4, #4]
  4074ec:	50e3      	str	r3, [r4, r3]
  4074ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4074f2:	d217      	bcs.n	407524 <_free_r+0x90>
  4074f4:	08db      	lsrs	r3, r3, #3
  4074f6:	1c58      	adds	r0, r3, #1
  4074f8:	109a      	asrs	r2, r3, #2
  4074fa:	684d      	ldr	r5, [r1, #4]
  4074fc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  407500:	60a7      	str	r7, [r4, #8]
  407502:	2301      	movs	r3, #1
  407504:	4093      	lsls	r3, r2
  407506:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40750a:	432b      	orrs	r3, r5
  40750c:	3a08      	subs	r2, #8
  40750e:	60e2      	str	r2, [r4, #12]
  407510:	604b      	str	r3, [r1, #4]
  407512:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  407516:	60fc      	str	r4, [r7, #12]
  407518:	4640      	mov	r0, r8
  40751a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40751e:	f000 be59 	b.w	4081d4 <__malloc_unlock>
  407522:	4770      	bx	lr
  407524:	0a5a      	lsrs	r2, r3, #9
  407526:	2a04      	cmp	r2, #4
  407528:	d852      	bhi.n	4075d0 <_free_r+0x13c>
  40752a:	099a      	lsrs	r2, r3, #6
  40752c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407530:	00ff      	lsls	r7, r7, #3
  407532:	f102 0538 	add.w	r5, r2, #56	; 0x38
  407536:	19c8      	adds	r0, r1, r7
  407538:	59ca      	ldr	r2, [r1, r7]
  40753a:	3808      	subs	r0, #8
  40753c:	4290      	cmp	r0, r2
  40753e:	d04f      	beq.n	4075e0 <_free_r+0x14c>
  407540:	6851      	ldr	r1, [r2, #4]
  407542:	f021 0103 	bic.w	r1, r1, #3
  407546:	428b      	cmp	r3, r1
  407548:	d232      	bcs.n	4075b0 <_free_r+0x11c>
  40754a:	6892      	ldr	r2, [r2, #8]
  40754c:	4290      	cmp	r0, r2
  40754e:	d1f7      	bne.n	407540 <_free_r+0xac>
  407550:	68c3      	ldr	r3, [r0, #12]
  407552:	60a0      	str	r0, [r4, #8]
  407554:	60e3      	str	r3, [r4, #12]
  407556:	609c      	str	r4, [r3, #8]
  407558:	60c4      	str	r4, [r0, #12]
  40755a:	4640      	mov	r0, r8
  40755c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407560:	f000 be38 	b.w	4081d4 <__malloc_unlock>
  407564:	6895      	ldr	r5, [r2, #8]
  407566:	4f3b      	ldr	r7, [pc, #236]	; (407654 <_free_r+0x1c0>)
  407568:	42bd      	cmp	r5, r7
  40756a:	4403      	add	r3, r0
  40756c:	d040      	beq.n	4075f0 <_free_r+0x15c>
  40756e:	68d0      	ldr	r0, [r2, #12]
  407570:	60e8      	str	r0, [r5, #12]
  407572:	f043 0201 	orr.w	r2, r3, #1
  407576:	6085      	str	r5, [r0, #8]
  407578:	6062      	str	r2, [r4, #4]
  40757a:	50e3      	str	r3, [r4, r3]
  40757c:	e7b7      	b.n	4074ee <_free_r+0x5a>
  40757e:	07ff      	lsls	r7, r7, #31
  407580:	4403      	add	r3, r0
  407582:	d407      	bmi.n	407594 <_free_r+0x100>
  407584:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407588:	1aa4      	subs	r4, r4, r2
  40758a:	4413      	add	r3, r2
  40758c:	68a0      	ldr	r0, [r4, #8]
  40758e:	68e2      	ldr	r2, [r4, #12]
  407590:	60c2      	str	r2, [r0, #12]
  407592:	6090      	str	r0, [r2, #8]
  407594:	4a30      	ldr	r2, [pc, #192]	; (407658 <_free_r+0x1c4>)
  407596:	6812      	ldr	r2, [r2, #0]
  407598:	f043 0001 	orr.w	r0, r3, #1
  40759c:	4293      	cmp	r3, r2
  40759e:	6060      	str	r0, [r4, #4]
  4075a0:	608c      	str	r4, [r1, #8]
  4075a2:	d3b9      	bcc.n	407518 <_free_r+0x84>
  4075a4:	4b2d      	ldr	r3, [pc, #180]	; (40765c <_free_r+0x1c8>)
  4075a6:	4640      	mov	r0, r8
  4075a8:	6819      	ldr	r1, [r3, #0]
  4075aa:	f7ff ff23 	bl	4073f4 <_malloc_trim_r>
  4075ae:	e7b3      	b.n	407518 <_free_r+0x84>
  4075b0:	4610      	mov	r0, r2
  4075b2:	e7cd      	b.n	407550 <_free_r+0xbc>
  4075b4:	1811      	adds	r1, r2, r0
  4075b6:	6849      	ldr	r1, [r1, #4]
  4075b8:	07c9      	lsls	r1, r1, #31
  4075ba:	d444      	bmi.n	407646 <_free_r+0x1b2>
  4075bc:	6891      	ldr	r1, [r2, #8]
  4075be:	68d2      	ldr	r2, [r2, #12]
  4075c0:	60ca      	str	r2, [r1, #12]
  4075c2:	4403      	add	r3, r0
  4075c4:	f043 0001 	orr.w	r0, r3, #1
  4075c8:	6091      	str	r1, [r2, #8]
  4075ca:	6060      	str	r0, [r4, #4]
  4075cc:	50e3      	str	r3, [r4, r3]
  4075ce:	e7a3      	b.n	407518 <_free_r+0x84>
  4075d0:	2a14      	cmp	r2, #20
  4075d2:	d816      	bhi.n	407602 <_free_r+0x16e>
  4075d4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4075d8:	00ff      	lsls	r7, r7, #3
  4075da:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4075de:	e7aa      	b.n	407536 <_free_r+0xa2>
  4075e0:	10aa      	asrs	r2, r5, #2
  4075e2:	2301      	movs	r3, #1
  4075e4:	684d      	ldr	r5, [r1, #4]
  4075e6:	4093      	lsls	r3, r2
  4075e8:	432b      	orrs	r3, r5
  4075ea:	604b      	str	r3, [r1, #4]
  4075ec:	4603      	mov	r3, r0
  4075ee:	e7b0      	b.n	407552 <_free_r+0xbe>
  4075f0:	f043 0201 	orr.w	r2, r3, #1
  4075f4:	614c      	str	r4, [r1, #20]
  4075f6:	610c      	str	r4, [r1, #16]
  4075f8:	60e5      	str	r5, [r4, #12]
  4075fa:	60a5      	str	r5, [r4, #8]
  4075fc:	6062      	str	r2, [r4, #4]
  4075fe:	50e3      	str	r3, [r4, r3]
  407600:	e78a      	b.n	407518 <_free_r+0x84>
  407602:	2a54      	cmp	r2, #84	; 0x54
  407604:	d806      	bhi.n	407614 <_free_r+0x180>
  407606:	0b1a      	lsrs	r2, r3, #12
  407608:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40760c:	00ff      	lsls	r7, r7, #3
  40760e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  407612:	e790      	b.n	407536 <_free_r+0xa2>
  407614:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407618:	d806      	bhi.n	407628 <_free_r+0x194>
  40761a:	0bda      	lsrs	r2, r3, #15
  40761c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407620:	00ff      	lsls	r7, r7, #3
  407622:	f102 0577 	add.w	r5, r2, #119	; 0x77
  407626:	e786      	b.n	407536 <_free_r+0xa2>
  407628:	f240 5054 	movw	r0, #1364	; 0x554
  40762c:	4282      	cmp	r2, r0
  40762e:	d806      	bhi.n	40763e <_free_r+0x1aa>
  407630:	0c9a      	lsrs	r2, r3, #18
  407632:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  407636:	00ff      	lsls	r7, r7, #3
  407638:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40763c:	e77b      	b.n	407536 <_free_r+0xa2>
  40763e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  407642:	257e      	movs	r5, #126	; 0x7e
  407644:	e777      	b.n	407536 <_free_r+0xa2>
  407646:	f043 0101 	orr.w	r1, r3, #1
  40764a:	6061      	str	r1, [r4, #4]
  40764c:	6013      	str	r3, [r2, #0]
  40764e:	e763      	b.n	407518 <_free_r+0x84>
  407650:	204005c8 	.word	0x204005c8
  407654:	204005d0 	.word	0x204005d0
  407658:	204009d4 	.word	0x204009d4
  40765c:	2040c99c 	.word	0x2040c99c

00407660 <__sfvwrite_r>:
  407660:	6893      	ldr	r3, [r2, #8]
  407662:	2b00      	cmp	r3, #0
  407664:	d073      	beq.n	40774e <__sfvwrite_r+0xee>
  407666:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40766a:	898b      	ldrh	r3, [r1, #12]
  40766c:	b083      	sub	sp, #12
  40766e:	460c      	mov	r4, r1
  407670:	0719      	lsls	r1, r3, #28
  407672:	9000      	str	r0, [sp, #0]
  407674:	4616      	mov	r6, r2
  407676:	d526      	bpl.n	4076c6 <__sfvwrite_r+0x66>
  407678:	6922      	ldr	r2, [r4, #16]
  40767a:	b322      	cbz	r2, 4076c6 <__sfvwrite_r+0x66>
  40767c:	f013 0002 	ands.w	r0, r3, #2
  407680:	6835      	ldr	r5, [r6, #0]
  407682:	d02c      	beq.n	4076de <__sfvwrite_r+0x7e>
  407684:	f04f 0900 	mov.w	r9, #0
  407688:	4fb0      	ldr	r7, [pc, #704]	; (40794c <__sfvwrite_r+0x2ec>)
  40768a:	46c8      	mov	r8, r9
  40768c:	46b2      	mov	sl, r6
  40768e:	45b8      	cmp	r8, r7
  407690:	4643      	mov	r3, r8
  407692:	464a      	mov	r2, r9
  407694:	bf28      	it	cs
  407696:	463b      	movcs	r3, r7
  407698:	9800      	ldr	r0, [sp, #0]
  40769a:	f1b8 0f00 	cmp.w	r8, #0
  40769e:	d050      	beq.n	407742 <__sfvwrite_r+0xe2>
  4076a0:	69e1      	ldr	r1, [r4, #28]
  4076a2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4076a4:	47b0      	blx	r6
  4076a6:	2800      	cmp	r0, #0
  4076a8:	dd58      	ble.n	40775c <__sfvwrite_r+0xfc>
  4076aa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4076ae:	1a1b      	subs	r3, r3, r0
  4076b0:	4481      	add	r9, r0
  4076b2:	eba8 0800 	sub.w	r8, r8, r0
  4076b6:	f8ca 3008 	str.w	r3, [sl, #8]
  4076ba:	2b00      	cmp	r3, #0
  4076bc:	d1e7      	bne.n	40768e <__sfvwrite_r+0x2e>
  4076be:	2000      	movs	r0, #0
  4076c0:	b003      	add	sp, #12
  4076c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4076c6:	4621      	mov	r1, r4
  4076c8:	9800      	ldr	r0, [sp, #0]
  4076ca:	f7ff fc51 	bl	406f70 <__swsetup_r>
  4076ce:	2800      	cmp	r0, #0
  4076d0:	f040 8133 	bne.w	40793a <__sfvwrite_r+0x2da>
  4076d4:	89a3      	ldrh	r3, [r4, #12]
  4076d6:	6835      	ldr	r5, [r6, #0]
  4076d8:	f013 0002 	ands.w	r0, r3, #2
  4076dc:	d1d2      	bne.n	407684 <__sfvwrite_r+0x24>
  4076de:	f013 0901 	ands.w	r9, r3, #1
  4076e2:	d145      	bne.n	407770 <__sfvwrite_r+0x110>
  4076e4:	464f      	mov	r7, r9
  4076e6:	9601      	str	r6, [sp, #4]
  4076e8:	b337      	cbz	r7, 407738 <__sfvwrite_r+0xd8>
  4076ea:	059a      	lsls	r2, r3, #22
  4076ec:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4076f0:	f140 8083 	bpl.w	4077fa <__sfvwrite_r+0x19a>
  4076f4:	4547      	cmp	r7, r8
  4076f6:	46c3      	mov	fp, r8
  4076f8:	f0c0 80ab 	bcc.w	407852 <__sfvwrite_r+0x1f2>
  4076fc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  407700:	f040 80ac 	bne.w	40785c <__sfvwrite_r+0x1fc>
  407704:	6820      	ldr	r0, [r4, #0]
  407706:	46ba      	mov	sl, r7
  407708:	465a      	mov	r2, fp
  40770a:	4649      	mov	r1, r9
  40770c:	f000 fcf8 	bl	408100 <memmove>
  407710:	68a2      	ldr	r2, [r4, #8]
  407712:	6823      	ldr	r3, [r4, #0]
  407714:	eba2 0208 	sub.w	r2, r2, r8
  407718:	445b      	add	r3, fp
  40771a:	60a2      	str	r2, [r4, #8]
  40771c:	6023      	str	r3, [r4, #0]
  40771e:	9a01      	ldr	r2, [sp, #4]
  407720:	6893      	ldr	r3, [r2, #8]
  407722:	eba3 030a 	sub.w	r3, r3, sl
  407726:	44d1      	add	r9, sl
  407728:	eba7 070a 	sub.w	r7, r7, sl
  40772c:	6093      	str	r3, [r2, #8]
  40772e:	2b00      	cmp	r3, #0
  407730:	d0c5      	beq.n	4076be <__sfvwrite_r+0x5e>
  407732:	89a3      	ldrh	r3, [r4, #12]
  407734:	2f00      	cmp	r7, #0
  407736:	d1d8      	bne.n	4076ea <__sfvwrite_r+0x8a>
  407738:	f8d5 9000 	ldr.w	r9, [r5]
  40773c:	686f      	ldr	r7, [r5, #4]
  40773e:	3508      	adds	r5, #8
  407740:	e7d2      	b.n	4076e8 <__sfvwrite_r+0x88>
  407742:	f8d5 9000 	ldr.w	r9, [r5]
  407746:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40774a:	3508      	adds	r5, #8
  40774c:	e79f      	b.n	40768e <__sfvwrite_r+0x2e>
  40774e:	2000      	movs	r0, #0
  407750:	4770      	bx	lr
  407752:	4621      	mov	r1, r4
  407754:	9800      	ldr	r0, [sp, #0]
  407756:	f7ff fd1f 	bl	407198 <_fflush_r>
  40775a:	b370      	cbz	r0, 4077ba <__sfvwrite_r+0x15a>
  40775c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407764:	f04f 30ff 	mov.w	r0, #4294967295
  407768:	81a3      	strh	r3, [r4, #12]
  40776a:	b003      	add	sp, #12
  40776c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407770:	4681      	mov	r9, r0
  407772:	4633      	mov	r3, r6
  407774:	464e      	mov	r6, r9
  407776:	46a8      	mov	r8, r5
  407778:	469a      	mov	sl, r3
  40777a:	464d      	mov	r5, r9
  40777c:	b34e      	cbz	r6, 4077d2 <__sfvwrite_r+0x172>
  40777e:	b380      	cbz	r0, 4077e2 <__sfvwrite_r+0x182>
  407780:	6820      	ldr	r0, [r4, #0]
  407782:	6923      	ldr	r3, [r4, #16]
  407784:	6962      	ldr	r2, [r4, #20]
  407786:	45b1      	cmp	r9, r6
  407788:	46cb      	mov	fp, r9
  40778a:	bf28      	it	cs
  40778c:	46b3      	movcs	fp, r6
  40778e:	4298      	cmp	r0, r3
  407790:	465f      	mov	r7, fp
  407792:	d904      	bls.n	40779e <__sfvwrite_r+0x13e>
  407794:	68a3      	ldr	r3, [r4, #8]
  407796:	4413      	add	r3, r2
  407798:	459b      	cmp	fp, r3
  40779a:	f300 80a6 	bgt.w	4078ea <__sfvwrite_r+0x28a>
  40779e:	4593      	cmp	fp, r2
  4077a0:	db4b      	blt.n	40783a <__sfvwrite_r+0x1da>
  4077a2:	4613      	mov	r3, r2
  4077a4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4077a6:	69e1      	ldr	r1, [r4, #28]
  4077a8:	9800      	ldr	r0, [sp, #0]
  4077aa:	462a      	mov	r2, r5
  4077ac:	47b8      	blx	r7
  4077ae:	1e07      	subs	r7, r0, #0
  4077b0:	ddd4      	ble.n	40775c <__sfvwrite_r+0xfc>
  4077b2:	ebb9 0907 	subs.w	r9, r9, r7
  4077b6:	d0cc      	beq.n	407752 <__sfvwrite_r+0xf2>
  4077b8:	2001      	movs	r0, #1
  4077ba:	f8da 3008 	ldr.w	r3, [sl, #8]
  4077be:	1bdb      	subs	r3, r3, r7
  4077c0:	443d      	add	r5, r7
  4077c2:	1bf6      	subs	r6, r6, r7
  4077c4:	f8ca 3008 	str.w	r3, [sl, #8]
  4077c8:	2b00      	cmp	r3, #0
  4077ca:	f43f af78 	beq.w	4076be <__sfvwrite_r+0x5e>
  4077ce:	2e00      	cmp	r6, #0
  4077d0:	d1d5      	bne.n	40777e <__sfvwrite_r+0x11e>
  4077d2:	f108 0308 	add.w	r3, r8, #8
  4077d6:	e913 0060 	ldmdb	r3, {r5, r6}
  4077da:	4698      	mov	r8, r3
  4077dc:	3308      	adds	r3, #8
  4077de:	2e00      	cmp	r6, #0
  4077e0:	d0f9      	beq.n	4077d6 <__sfvwrite_r+0x176>
  4077e2:	4632      	mov	r2, r6
  4077e4:	210a      	movs	r1, #10
  4077e6:	4628      	mov	r0, r5
  4077e8:	f000 fc3a 	bl	408060 <memchr>
  4077ec:	2800      	cmp	r0, #0
  4077ee:	f000 80a1 	beq.w	407934 <__sfvwrite_r+0x2d4>
  4077f2:	3001      	adds	r0, #1
  4077f4:	eba0 0905 	sub.w	r9, r0, r5
  4077f8:	e7c2      	b.n	407780 <__sfvwrite_r+0x120>
  4077fa:	6820      	ldr	r0, [r4, #0]
  4077fc:	6923      	ldr	r3, [r4, #16]
  4077fe:	4298      	cmp	r0, r3
  407800:	d802      	bhi.n	407808 <__sfvwrite_r+0x1a8>
  407802:	6963      	ldr	r3, [r4, #20]
  407804:	429f      	cmp	r7, r3
  407806:	d25d      	bcs.n	4078c4 <__sfvwrite_r+0x264>
  407808:	45b8      	cmp	r8, r7
  40780a:	bf28      	it	cs
  40780c:	46b8      	movcs	r8, r7
  40780e:	4642      	mov	r2, r8
  407810:	4649      	mov	r1, r9
  407812:	f000 fc75 	bl	408100 <memmove>
  407816:	68a3      	ldr	r3, [r4, #8]
  407818:	6822      	ldr	r2, [r4, #0]
  40781a:	eba3 0308 	sub.w	r3, r3, r8
  40781e:	4442      	add	r2, r8
  407820:	60a3      	str	r3, [r4, #8]
  407822:	6022      	str	r2, [r4, #0]
  407824:	b10b      	cbz	r3, 40782a <__sfvwrite_r+0x1ca>
  407826:	46c2      	mov	sl, r8
  407828:	e779      	b.n	40771e <__sfvwrite_r+0xbe>
  40782a:	4621      	mov	r1, r4
  40782c:	9800      	ldr	r0, [sp, #0]
  40782e:	f7ff fcb3 	bl	407198 <_fflush_r>
  407832:	2800      	cmp	r0, #0
  407834:	d192      	bne.n	40775c <__sfvwrite_r+0xfc>
  407836:	46c2      	mov	sl, r8
  407838:	e771      	b.n	40771e <__sfvwrite_r+0xbe>
  40783a:	465a      	mov	r2, fp
  40783c:	4629      	mov	r1, r5
  40783e:	f000 fc5f 	bl	408100 <memmove>
  407842:	68a2      	ldr	r2, [r4, #8]
  407844:	6823      	ldr	r3, [r4, #0]
  407846:	eba2 020b 	sub.w	r2, r2, fp
  40784a:	445b      	add	r3, fp
  40784c:	60a2      	str	r2, [r4, #8]
  40784e:	6023      	str	r3, [r4, #0]
  407850:	e7af      	b.n	4077b2 <__sfvwrite_r+0x152>
  407852:	6820      	ldr	r0, [r4, #0]
  407854:	46b8      	mov	r8, r7
  407856:	46ba      	mov	sl, r7
  407858:	46bb      	mov	fp, r7
  40785a:	e755      	b.n	407708 <__sfvwrite_r+0xa8>
  40785c:	6962      	ldr	r2, [r4, #20]
  40785e:	6820      	ldr	r0, [r4, #0]
  407860:	6921      	ldr	r1, [r4, #16]
  407862:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  407866:	eba0 0a01 	sub.w	sl, r0, r1
  40786a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40786e:	f10a 0001 	add.w	r0, sl, #1
  407872:	ea4f 0868 	mov.w	r8, r8, asr #1
  407876:	4438      	add	r0, r7
  407878:	4540      	cmp	r0, r8
  40787a:	4642      	mov	r2, r8
  40787c:	bf84      	itt	hi
  40787e:	4680      	movhi	r8, r0
  407880:	4642      	movhi	r2, r8
  407882:	055b      	lsls	r3, r3, #21
  407884:	d544      	bpl.n	407910 <__sfvwrite_r+0x2b0>
  407886:	4611      	mov	r1, r2
  407888:	9800      	ldr	r0, [sp, #0]
  40788a:	f000 f921 	bl	407ad0 <_malloc_r>
  40788e:	4683      	mov	fp, r0
  407890:	2800      	cmp	r0, #0
  407892:	d055      	beq.n	407940 <__sfvwrite_r+0x2e0>
  407894:	4652      	mov	r2, sl
  407896:	6921      	ldr	r1, [r4, #16]
  407898:	f7fe fa62 	bl	405d60 <memcpy>
  40789c:	89a3      	ldrh	r3, [r4, #12]
  40789e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4078a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4078a6:	81a3      	strh	r3, [r4, #12]
  4078a8:	eb0b 000a 	add.w	r0, fp, sl
  4078ac:	eba8 030a 	sub.w	r3, r8, sl
  4078b0:	f8c4 b010 	str.w	fp, [r4, #16]
  4078b4:	f8c4 8014 	str.w	r8, [r4, #20]
  4078b8:	6020      	str	r0, [r4, #0]
  4078ba:	60a3      	str	r3, [r4, #8]
  4078bc:	46b8      	mov	r8, r7
  4078be:	46ba      	mov	sl, r7
  4078c0:	46bb      	mov	fp, r7
  4078c2:	e721      	b.n	407708 <__sfvwrite_r+0xa8>
  4078c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4078c8:	42b9      	cmp	r1, r7
  4078ca:	bf28      	it	cs
  4078cc:	4639      	movcs	r1, r7
  4078ce:	464a      	mov	r2, r9
  4078d0:	fb91 f1f3 	sdiv	r1, r1, r3
  4078d4:	9800      	ldr	r0, [sp, #0]
  4078d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4078d8:	fb03 f301 	mul.w	r3, r3, r1
  4078dc:	69e1      	ldr	r1, [r4, #28]
  4078de:	47b0      	blx	r6
  4078e0:	f1b0 0a00 	subs.w	sl, r0, #0
  4078e4:	f73f af1b 	bgt.w	40771e <__sfvwrite_r+0xbe>
  4078e8:	e738      	b.n	40775c <__sfvwrite_r+0xfc>
  4078ea:	461a      	mov	r2, r3
  4078ec:	4629      	mov	r1, r5
  4078ee:	9301      	str	r3, [sp, #4]
  4078f0:	f000 fc06 	bl	408100 <memmove>
  4078f4:	6822      	ldr	r2, [r4, #0]
  4078f6:	9b01      	ldr	r3, [sp, #4]
  4078f8:	9800      	ldr	r0, [sp, #0]
  4078fa:	441a      	add	r2, r3
  4078fc:	6022      	str	r2, [r4, #0]
  4078fe:	4621      	mov	r1, r4
  407900:	f7ff fc4a 	bl	407198 <_fflush_r>
  407904:	9b01      	ldr	r3, [sp, #4]
  407906:	2800      	cmp	r0, #0
  407908:	f47f af28 	bne.w	40775c <__sfvwrite_r+0xfc>
  40790c:	461f      	mov	r7, r3
  40790e:	e750      	b.n	4077b2 <__sfvwrite_r+0x152>
  407910:	9800      	ldr	r0, [sp, #0]
  407912:	f000 fc65 	bl	4081e0 <_realloc_r>
  407916:	4683      	mov	fp, r0
  407918:	2800      	cmp	r0, #0
  40791a:	d1c5      	bne.n	4078a8 <__sfvwrite_r+0x248>
  40791c:	9d00      	ldr	r5, [sp, #0]
  40791e:	6921      	ldr	r1, [r4, #16]
  407920:	4628      	mov	r0, r5
  407922:	f7ff fdb7 	bl	407494 <_free_r>
  407926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40792a:	220c      	movs	r2, #12
  40792c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  407930:	602a      	str	r2, [r5, #0]
  407932:	e715      	b.n	407760 <__sfvwrite_r+0x100>
  407934:	f106 0901 	add.w	r9, r6, #1
  407938:	e722      	b.n	407780 <__sfvwrite_r+0x120>
  40793a:	f04f 30ff 	mov.w	r0, #4294967295
  40793e:	e6bf      	b.n	4076c0 <__sfvwrite_r+0x60>
  407940:	9a00      	ldr	r2, [sp, #0]
  407942:	230c      	movs	r3, #12
  407944:	6013      	str	r3, [r2, #0]
  407946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40794a:	e709      	b.n	407760 <__sfvwrite_r+0x100>
  40794c:	7ffffc00 	.word	0x7ffffc00

00407950 <_fwalk_reent>:
  407950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407954:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  407958:	d01f      	beq.n	40799a <_fwalk_reent+0x4a>
  40795a:	4688      	mov	r8, r1
  40795c:	4606      	mov	r6, r0
  40795e:	f04f 0900 	mov.w	r9, #0
  407962:	687d      	ldr	r5, [r7, #4]
  407964:	68bc      	ldr	r4, [r7, #8]
  407966:	3d01      	subs	r5, #1
  407968:	d411      	bmi.n	40798e <_fwalk_reent+0x3e>
  40796a:	89a3      	ldrh	r3, [r4, #12]
  40796c:	2b01      	cmp	r3, #1
  40796e:	f105 35ff 	add.w	r5, r5, #4294967295
  407972:	d908      	bls.n	407986 <_fwalk_reent+0x36>
  407974:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  407978:	3301      	adds	r3, #1
  40797a:	4621      	mov	r1, r4
  40797c:	4630      	mov	r0, r6
  40797e:	d002      	beq.n	407986 <_fwalk_reent+0x36>
  407980:	47c0      	blx	r8
  407982:	ea49 0900 	orr.w	r9, r9, r0
  407986:	1c6b      	adds	r3, r5, #1
  407988:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40798c:	d1ed      	bne.n	40796a <_fwalk_reent+0x1a>
  40798e:	683f      	ldr	r7, [r7, #0]
  407990:	2f00      	cmp	r7, #0
  407992:	d1e6      	bne.n	407962 <_fwalk_reent+0x12>
  407994:	4648      	mov	r0, r9
  407996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40799a:	46b9      	mov	r9, r7
  40799c:	4648      	mov	r0, r9
  40799e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4079a2:	bf00      	nop

004079a4 <__locale_mb_cur_max>:
  4079a4:	4b04      	ldr	r3, [pc, #16]	; (4079b8 <__locale_mb_cur_max+0x14>)
  4079a6:	4a05      	ldr	r2, [pc, #20]	; (4079bc <__locale_mb_cur_max+0x18>)
  4079a8:	681b      	ldr	r3, [r3, #0]
  4079aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4079ac:	2b00      	cmp	r3, #0
  4079ae:	bf08      	it	eq
  4079b0:	4613      	moveq	r3, r2
  4079b2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4079b6:	4770      	bx	lr
  4079b8:	20400028 	.word	0x20400028
  4079bc:	2040045c 	.word	0x2040045c

004079c0 <__retarget_lock_init_recursive>:
  4079c0:	4770      	bx	lr
  4079c2:	bf00      	nop

004079c4 <__retarget_lock_close_recursive>:
  4079c4:	4770      	bx	lr
  4079c6:	bf00      	nop

004079c8 <__retarget_lock_acquire_recursive>:
  4079c8:	4770      	bx	lr
  4079ca:	bf00      	nop

004079cc <__retarget_lock_release_recursive>:
  4079cc:	4770      	bx	lr
  4079ce:	bf00      	nop

004079d0 <__swhatbuf_r>:
  4079d0:	b570      	push	{r4, r5, r6, lr}
  4079d2:	460c      	mov	r4, r1
  4079d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4079d8:	2900      	cmp	r1, #0
  4079da:	b090      	sub	sp, #64	; 0x40
  4079dc:	4615      	mov	r5, r2
  4079de:	461e      	mov	r6, r3
  4079e0:	db14      	blt.n	407a0c <__swhatbuf_r+0x3c>
  4079e2:	aa01      	add	r2, sp, #4
  4079e4:	f000 ff74 	bl	4088d0 <_fstat_r>
  4079e8:	2800      	cmp	r0, #0
  4079ea:	db0f      	blt.n	407a0c <__swhatbuf_r+0x3c>
  4079ec:	9a02      	ldr	r2, [sp, #8]
  4079ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4079f2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4079f6:	fab2 f282 	clz	r2, r2
  4079fa:	0952      	lsrs	r2, r2, #5
  4079fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407a00:	f44f 6000 	mov.w	r0, #2048	; 0x800
  407a04:	6032      	str	r2, [r6, #0]
  407a06:	602b      	str	r3, [r5, #0]
  407a08:	b010      	add	sp, #64	; 0x40
  407a0a:	bd70      	pop	{r4, r5, r6, pc}
  407a0c:	89a2      	ldrh	r2, [r4, #12]
  407a0e:	2300      	movs	r3, #0
  407a10:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  407a14:	6033      	str	r3, [r6, #0]
  407a16:	d004      	beq.n	407a22 <__swhatbuf_r+0x52>
  407a18:	2240      	movs	r2, #64	; 0x40
  407a1a:	4618      	mov	r0, r3
  407a1c:	602a      	str	r2, [r5, #0]
  407a1e:	b010      	add	sp, #64	; 0x40
  407a20:	bd70      	pop	{r4, r5, r6, pc}
  407a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407a26:	602b      	str	r3, [r5, #0]
  407a28:	b010      	add	sp, #64	; 0x40
  407a2a:	bd70      	pop	{r4, r5, r6, pc}

00407a2c <__smakebuf_r>:
  407a2c:	898a      	ldrh	r2, [r1, #12]
  407a2e:	0792      	lsls	r2, r2, #30
  407a30:	460b      	mov	r3, r1
  407a32:	d506      	bpl.n	407a42 <__smakebuf_r+0x16>
  407a34:	f101 0243 	add.w	r2, r1, #67	; 0x43
  407a38:	2101      	movs	r1, #1
  407a3a:	601a      	str	r2, [r3, #0]
  407a3c:	611a      	str	r2, [r3, #16]
  407a3e:	6159      	str	r1, [r3, #20]
  407a40:	4770      	bx	lr
  407a42:	b5f0      	push	{r4, r5, r6, r7, lr}
  407a44:	b083      	sub	sp, #12
  407a46:	ab01      	add	r3, sp, #4
  407a48:	466a      	mov	r2, sp
  407a4a:	460c      	mov	r4, r1
  407a4c:	4606      	mov	r6, r0
  407a4e:	f7ff ffbf 	bl	4079d0 <__swhatbuf_r>
  407a52:	9900      	ldr	r1, [sp, #0]
  407a54:	4605      	mov	r5, r0
  407a56:	4630      	mov	r0, r6
  407a58:	f000 f83a 	bl	407ad0 <_malloc_r>
  407a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407a60:	b1d8      	cbz	r0, 407a9a <__smakebuf_r+0x6e>
  407a62:	9a01      	ldr	r2, [sp, #4]
  407a64:	4f15      	ldr	r7, [pc, #84]	; (407abc <__smakebuf_r+0x90>)
  407a66:	9900      	ldr	r1, [sp, #0]
  407a68:	63f7      	str	r7, [r6, #60]	; 0x3c
  407a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407a6e:	81a3      	strh	r3, [r4, #12]
  407a70:	6020      	str	r0, [r4, #0]
  407a72:	6120      	str	r0, [r4, #16]
  407a74:	6161      	str	r1, [r4, #20]
  407a76:	b91a      	cbnz	r2, 407a80 <__smakebuf_r+0x54>
  407a78:	432b      	orrs	r3, r5
  407a7a:	81a3      	strh	r3, [r4, #12]
  407a7c:	b003      	add	sp, #12
  407a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407a80:	4630      	mov	r0, r6
  407a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407a86:	f000 ff37 	bl	4088f8 <_isatty_r>
  407a8a:	b1a0      	cbz	r0, 407ab6 <__smakebuf_r+0x8a>
  407a8c:	89a3      	ldrh	r3, [r4, #12]
  407a8e:	f023 0303 	bic.w	r3, r3, #3
  407a92:	f043 0301 	orr.w	r3, r3, #1
  407a96:	b21b      	sxth	r3, r3
  407a98:	e7ee      	b.n	407a78 <__smakebuf_r+0x4c>
  407a9a:	059a      	lsls	r2, r3, #22
  407a9c:	d4ee      	bmi.n	407a7c <__smakebuf_r+0x50>
  407a9e:	f023 0303 	bic.w	r3, r3, #3
  407aa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407aa6:	f043 0302 	orr.w	r3, r3, #2
  407aaa:	2101      	movs	r1, #1
  407aac:	81a3      	strh	r3, [r4, #12]
  407aae:	6022      	str	r2, [r4, #0]
  407ab0:	6122      	str	r2, [r4, #16]
  407ab2:	6161      	str	r1, [r4, #20]
  407ab4:	e7e2      	b.n	407a7c <__smakebuf_r+0x50>
  407ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407aba:	e7dd      	b.n	407a78 <__smakebuf_r+0x4c>
  407abc:	004071ed 	.word	0x004071ed

00407ac0 <malloc>:
  407ac0:	4b02      	ldr	r3, [pc, #8]	; (407acc <malloc+0xc>)
  407ac2:	4601      	mov	r1, r0
  407ac4:	6818      	ldr	r0, [r3, #0]
  407ac6:	f000 b803 	b.w	407ad0 <_malloc_r>
  407aca:	bf00      	nop
  407acc:	20400028 	.word	0x20400028

00407ad0 <_malloc_r>:
  407ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407ad4:	f101 060b 	add.w	r6, r1, #11
  407ad8:	2e16      	cmp	r6, #22
  407ada:	b083      	sub	sp, #12
  407adc:	4605      	mov	r5, r0
  407ade:	f240 809e 	bls.w	407c1e <_malloc_r+0x14e>
  407ae2:	f036 0607 	bics.w	r6, r6, #7
  407ae6:	f100 80bd 	bmi.w	407c64 <_malloc_r+0x194>
  407aea:	42b1      	cmp	r1, r6
  407aec:	f200 80ba 	bhi.w	407c64 <_malloc_r+0x194>
  407af0:	f000 fb6a 	bl	4081c8 <__malloc_lock>
  407af4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  407af8:	f0c0 8293 	bcc.w	408022 <_malloc_r+0x552>
  407afc:	0a73      	lsrs	r3, r6, #9
  407afe:	f000 80b8 	beq.w	407c72 <_malloc_r+0x1a2>
  407b02:	2b04      	cmp	r3, #4
  407b04:	f200 8179 	bhi.w	407dfa <_malloc_r+0x32a>
  407b08:	09b3      	lsrs	r3, r6, #6
  407b0a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  407b0e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  407b12:	00c3      	lsls	r3, r0, #3
  407b14:	4fbf      	ldr	r7, [pc, #764]	; (407e14 <_malloc_r+0x344>)
  407b16:	443b      	add	r3, r7
  407b18:	f1a3 0108 	sub.w	r1, r3, #8
  407b1c:	685c      	ldr	r4, [r3, #4]
  407b1e:	42a1      	cmp	r1, r4
  407b20:	d106      	bne.n	407b30 <_malloc_r+0x60>
  407b22:	e00c      	b.n	407b3e <_malloc_r+0x6e>
  407b24:	2a00      	cmp	r2, #0
  407b26:	f280 80aa 	bge.w	407c7e <_malloc_r+0x1ae>
  407b2a:	68e4      	ldr	r4, [r4, #12]
  407b2c:	42a1      	cmp	r1, r4
  407b2e:	d006      	beq.n	407b3e <_malloc_r+0x6e>
  407b30:	6863      	ldr	r3, [r4, #4]
  407b32:	f023 0303 	bic.w	r3, r3, #3
  407b36:	1b9a      	subs	r2, r3, r6
  407b38:	2a0f      	cmp	r2, #15
  407b3a:	ddf3      	ble.n	407b24 <_malloc_r+0x54>
  407b3c:	4670      	mov	r0, lr
  407b3e:	693c      	ldr	r4, [r7, #16]
  407b40:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 407e28 <_malloc_r+0x358>
  407b44:	4574      	cmp	r4, lr
  407b46:	f000 81ab 	beq.w	407ea0 <_malloc_r+0x3d0>
  407b4a:	6863      	ldr	r3, [r4, #4]
  407b4c:	f023 0303 	bic.w	r3, r3, #3
  407b50:	1b9a      	subs	r2, r3, r6
  407b52:	2a0f      	cmp	r2, #15
  407b54:	f300 8190 	bgt.w	407e78 <_malloc_r+0x3a8>
  407b58:	2a00      	cmp	r2, #0
  407b5a:	f8c7 e014 	str.w	lr, [r7, #20]
  407b5e:	f8c7 e010 	str.w	lr, [r7, #16]
  407b62:	f280 809d 	bge.w	407ca0 <_malloc_r+0x1d0>
  407b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407b6a:	f080 8161 	bcs.w	407e30 <_malloc_r+0x360>
  407b6e:	08db      	lsrs	r3, r3, #3
  407b70:	f103 0c01 	add.w	ip, r3, #1
  407b74:	1099      	asrs	r1, r3, #2
  407b76:	687a      	ldr	r2, [r7, #4]
  407b78:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  407b7c:	f8c4 8008 	str.w	r8, [r4, #8]
  407b80:	2301      	movs	r3, #1
  407b82:	408b      	lsls	r3, r1
  407b84:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  407b88:	4313      	orrs	r3, r2
  407b8a:	3908      	subs	r1, #8
  407b8c:	60e1      	str	r1, [r4, #12]
  407b8e:	607b      	str	r3, [r7, #4]
  407b90:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  407b94:	f8c8 400c 	str.w	r4, [r8, #12]
  407b98:	1082      	asrs	r2, r0, #2
  407b9a:	2401      	movs	r4, #1
  407b9c:	4094      	lsls	r4, r2
  407b9e:	429c      	cmp	r4, r3
  407ba0:	f200 808b 	bhi.w	407cba <_malloc_r+0x1ea>
  407ba4:	421c      	tst	r4, r3
  407ba6:	d106      	bne.n	407bb6 <_malloc_r+0xe6>
  407ba8:	f020 0003 	bic.w	r0, r0, #3
  407bac:	0064      	lsls	r4, r4, #1
  407bae:	421c      	tst	r4, r3
  407bb0:	f100 0004 	add.w	r0, r0, #4
  407bb4:	d0fa      	beq.n	407bac <_malloc_r+0xdc>
  407bb6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  407bba:	46cc      	mov	ip, r9
  407bbc:	4680      	mov	r8, r0
  407bbe:	f8dc 300c 	ldr.w	r3, [ip, #12]
  407bc2:	459c      	cmp	ip, r3
  407bc4:	d107      	bne.n	407bd6 <_malloc_r+0x106>
  407bc6:	e16d      	b.n	407ea4 <_malloc_r+0x3d4>
  407bc8:	2a00      	cmp	r2, #0
  407bca:	f280 817b 	bge.w	407ec4 <_malloc_r+0x3f4>
  407bce:	68db      	ldr	r3, [r3, #12]
  407bd0:	459c      	cmp	ip, r3
  407bd2:	f000 8167 	beq.w	407ea4 <_malloc_r+0x3d4>
  407bd6:	6859      	ldr	r1, [r3, #4]
  407bd8:	f021 0103 	bic.w	r1, r1, #3
  407bdc:	1b8a      	subs	r2, r1, r6
  407bde:	2a0f      	cmp	r2, #15
  407be0:	ddf2      	ble.n	407bc8 <_malloc_r+0xf8>
  407be2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  407be6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  407bea:	9300      	str	r3, [sp, #0]
  407bec:	199c      	adds	r4, r3, r6
  407bee:	4628      	mov	r0, r5
  407bf0:	f046 0601 	orr.w	r6, r6, #1
  407bf4:	f042 0501 	orr.w	r5, r2, #1
  407bf8:	605e      	str	r6, [r3, #4]
  407bfa:	f8c8 c00c 	str.w	ip, [r8, #12]
  407bfe:	f8cc 8008 	str.w	r8, [ip, #8]
  407c02:	617c      	str	r4, [r7, #20]
  407c04:	613c      	str	r4, [r7, #16]
  407c06:	f8c4 e00c 	str.w	lr, [r4, #12]
  407c0a:	f8c4 e008 	str.w	lr, [r4, #8]
  407c0e:	6065      	str	r5, [r4, #4]
  407c10:	505a      	str	r2, [r3, r1]
  407c12:	f000 fadf 	bl	4081d4 <__malloc_unlock>
  407c16:	9b00      	ldr	r3, [sp, #0]
  407c18:	f103 0408 	add.w	r4, r3, #8
  407c1c:	e01e      	b.n	407c5c <_malloc_r+0x18c>
  407c1e:	2910      	cmp	r1, #16
  407c20:	d820      	bhi.n	407c64 <_malloc_r+0x194>
  407c22:	f000 fad1 	bl	4081c8 <__malloc_lock>
  407c26:	2610      	movs	r6, #16
  407c28:	2318      	movs	r3, #24
  407c2a:	2002      	movs	r0, #2
  407c2c:	4f79      	ldr	r7, [pc, #484]	; (407e14 <_malloc_r+0x344>)
  407c2e:	443b      	add	r3, r7
  407c30:	f1a3 0208 	sub.w	r2, r3, #8
  407c34:	685c      	ldr	r4, [r3, #4]
  407c36:	4294      	cmp	r4, r2
  407c38:	f000 813d 	beq.w	407eb6 <_malloc_r+0x3e6>
  407c3c:	6863      	ldr	r3, [r4, #4]
  407c3e:	68e1      	ldr	r1, [r4, #12]
  407c40:	68a6      	ldr	r6, [r4, #8]
  407c42:	f023 0303 	bic.w	r3, r3, #3
  407c46:	4423      	add	r3, r4
  407c48:	4628      	mov	r0, r5
  407c4a:	685a      	ldr	r2, [r3, #4]
  407c4c:	60f1      	str	r1, [r6, #12]
  407c4e:	f042 0201 	orr.w	r2, r2, #1
  407c52:	608e      	str	r6, [r1, #8]
  407c54:	605a      	str	r2, [r3, #4]
  407c56:	f000 fabd 	bl	4081d4 <__malloc_unlock>
  407c5a:	3408      	adds	r4, #8
  407c5c:	4620      	mov	r0, r4
  407c5e:	b003      	add	sp, #12
  407c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c64:	2400      	movs	r4, #0
  407c66:	230c      	movs	r3, #12
  407c68:	4620      	mov	r0, r4
  407c6a:	602b      	str	r3, [r5, #0]
  407c6c:	b003      	add	sp, #12
  407c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c72:	2040      	movs	r0, #64	; 0x40
  407c74:	f44f 7300 	mov.w	r3, #512	; 0x200
  407c78:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  407c7c:	e74a      	b.n	407b14 <_malloc_r+0x44>
  407c7e:	4423      	add	r3, r4
  407c80:	68e1      	ldr	r1, [r4, #12]
  407c82:	685a      	ldr	r2, [r3, #4]
  407c84:	68a6      	ldr	r6, [r4, #8]
  407c86:	f042 0201 	orr.w	r2, r2, #1
  407c8a:	60f1      	str	r1, [r6, #12]
  407c8c:	4628      	mov	r0, r5
  407c8e:	608e      	str	r6, [r1, #8]
  407c90:	605a      	str	r2, [r3, #4]
  407c92:	f000 fa9f 	bl	4081d4 <__malloc_unlock>
  407c96:	3408      	adds	r4, #8
  407c98:	4620      	mov	r0, r4
  407c9a:	b003      	add	sp, #12
  407c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407ca0:	4423      	add	r3, r4
  407ca2:	4628      	mov	r0, r5
  407ca4:	685a      	ldr	r2, [r3, #4]
  407ca6:	f042 0201 	orr.w	r2, r2, #1
  407caa:	605a      	str	r2, [r3, #4]
  407cac:	f000 fa92 	bl	4081d4 <__malloc_unlock>
  407cb0:	3408      	adds	r4, #8
  407cb2:	4620      	mov	r0, r4
  407cb4:	b003      	add	sp, #12
  407cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407cba:	68bc      	ldr	r4, [r7, #8]
  407cbc:	6863      	ldr	r3, [r4, #4]
  407cbe:	f023 0803 	bic.w	r8, r3, #3
  407cc2:	45b0      	cmp	r8, r6
  407cc4:	d304      	bcc.n	407cd0 <_malloc_r+0x200>
  407cc6:	eba8 0306 	sub.w	r3, r8, r6
  407cca:	2b0f      	cmp	r3, #15
  407ccc:	f300 8085 	bgt.w	407dda <_malloc_r+0x30a>
  407cd0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 407e2c <_malloc_r+0x35c>
  407cd4:	4b50      	ldr	r3, [pc, #320]	; (407e18 <_malloc_r+0x348>)
  407cd6:	f8d9 2000 	ldr.w	r2, [r9]
  407cda:	681b      	ldr	r3, [r3, #0]
  407cdc:	3201      	adds	r2, #1
  407cde:	4433      	add	r3, r6
  407ce0:	eb04 0a08 	add.w	sl, r4, r8
  407ce4:	f000 8155 	beq.w	407f92 <_malloc_r+0x4c2>
  407ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  407cec:	330f      	adds	r3, #15
  407cee:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  407cf2:	f02b 0b0f 	bic.w	fp, fp, #15
  407cf6:	4659      	mov	r1, fp
  407cf8:	4628      	mov	r0, r5
  407cfa:	f000 fc17 	bl	40852c <_sbrk_r>
  407cfe:	1c41      	adds	r1, r0, #1
  407d00:	4602      	mov	r2, r0
  407d02:	f000 80fc 	beq.w	407efe <_malloc_r+0x42e>
  407d06:	4582      	cmp	sl, r0
  407d08:	f200 80f7 	bhi.w	407efa <_malloc_r+0x42a>
  407d0c:	4b43      	ldr	r3, [pc, #268]	; (407e1c <_malloc_r+0x34c>)
  407d0e:	6819      	ldr	r1, [r3, #0]
  407d10:	4459      	add	r1, fp
  407d12:	6019      	str	r1, [r3, #0]
  407d14:	f000 814d 	beq.w	407fb2 <_malloc_r+0x4e2>
  407d18:	f8d9 0000 	ldr.w	r0, [r9]
  407d1c:	3001      	adds	r0, #1
  407d1e:	bf1b      	ittet	ne
  407d20:	eba2 0a0a 	subne.w	sl, r2, sl
  407d24:	4451      	addne	r1, sl
  407d26:	f8c9 2000 	streq.w	r2, [r9]
  407d2a:	6019      	strne	r1, [r3, #0]
  407d2c:	f012 0107 	ands.w	r1, r2, #7
  407d30:	f000 8115 	beq.w	407f5e <_malloc_r+0x48e>
  407d34:	f1c1 0008 	rsb	r0, r1, #8
  407d38:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  407d3c:	4402      	add	r2, r0
  407d3e:	3108      	adds	r1, #8
  407d40:	eb02 090b 	add.w	r9, r2, fp
  407d44:	f3c9 090b 	ubfx	r9, r9, #0, #12
  407d48:	eba1 0909 	sub.w	r9, r1, r9
  407d4c:	4649      	mov	r1, r9
  407d4e:	4628      	mov	r0, r5
  407d50:	9301      	str	r3, [sp, #4]
  407d52:	9200      	str	r2, [sp, #0]
  407d54:	f000 fbea 	bl	40852c <_sbrk_r>
  407d58:	1c43      	adds	r3, r0, #1
  407d5a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407d5e:	f000 8143 	beq.w	407fe8 <_malloc_r+0x518>
  407d62:	1a80      	subs	r0, r0, r2
  407d64:	4448      	add	r0, r9
  407d66:	f040 0001 	orr.w	r0, r0, #1
  407d6a:	6819      	ldr	r1, [r3, #0]
  407d6c:	60ba      	str	r2, [r7, #8]
  407d6e:	4449      	add	r1, r9
  407d70:	42bc      	cmp	r4, r7
  407d72:	6050      	str	r0, [r2, #4]
  407d74:	6019      	str	r1, [r3, #0]
  407d76:	d017      	beq.n	407da8 <_malloc_r+0x2d8>
  407d78:	f1b8 0f0f 	cmp.w	r8, #15
  407d7c:	f240 80fb 	bls.w	407f76 <_malloc_r+0x4a6>
  407d80:	6860      	ldr	r0, [r4, #4]
  407d82:	f1a8 020c 	sub.w	r2, r8, #12
  407d86:	f022 0207 	bic.w	r2, r2, #7
  407d8a:	eb04 0e02 	add.w	lr, r4, r2
  407d8e:	f000 0001 	and.w	r0, r0, #1
  407d92:	f04f 0c05 	mov.w	ip, #5
  407d96:	4310      	orrs	r0, r2
  407d98:	2a0f      	cmp	r2, #15
  407d9a:	6060      	str	r0, [r4, #4]
  407d9c:	f8ce c004 	str.w	ip, [lr, #4]
  407da0:	f8ce c008 	str.w	ip, [lr, #8]
  407da4:	f200 8117 	bhi.w	407fd6 <_malloc_r+0x506>
  407da8:	4b1d      	ldr	r3, [pc, #116]	; (407e20 <_malloc_r+0x350>)
  407daa:	68bc      	ldr	r4, [r7, #8]
  407dac:	681a      	ldr	r2, [r3, #0]
  407dae:	4291      	cmp	r1, r2
  407db0:	bf88      	it	hi
  407db2:	6019      	strhi	r1, [r3, #0]
  407db4:	4b1b      	ldr	r3, [pc, #108]	; (407e24 <_malloc_r+0x354>)
  407db6:	681a      	ldr	r2, [r3, #0]
  407db8:	4291      	cmp	r1, r2
  407dba:	6862      	ldr	r2, [r4, #4]
  407dbc:	bf88      	it	hi
  407dbe:	6019      	strhi	r1, [r3, #0]
  407dc0:	f022 0203 	bic.w	r2, r2, #3
  407dc4:	4296      	cmp	r6, r2
  407dc6:	eba2 0306 	sub.w	r3, r2, r6
  407dca:	d801      	bhi.n	407dd0 <_malloc_r+0x300>
  407dcc:	2b0f      	cmp	r3, #15
  407dce:	dc04      	bgt.n	407dda <_malloc_r+0x30a>
  407dd0:	4628      	mov	r0, r5
  407dd2:	f000 f9ff 	bl	4081d4 <__malloc_unlock>
  407dd6:	2400      	movs	r4, #0
  407dd8:	e740      	b.n	407c5c <_malloc_r+0x18c>
  407dda:	19a2      	adds	r2, r4, r6
  407ddc:	f043 0301 	orr.w	r3, r3, #1
  407de0:	f046 0601 	orr.w	r6, r6, #1
  407de4:	6066      	str	r6, [r4, #4]
  407de6:	4628      	mov	r0, r5
  407de8:	60ba      	str	r2, [r7, #8]
  407dea:	6053      	str	r3, [r2, #4]
  407dec:	f000 f9f2 	bl	4081d4 <__malloc_unlock>
  407df0:	3408      	adds	r4, #8
  407df2:	4620      	mov	r0, r4
  407df4:	b003      	add	sp, #12
  407df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407dfa:	2b14      	cmp	r3, #20
  407dfc:	d971      	bls.n	407ee2 <_malloc_r+0x412>
  407dfe:	2b54      	cmp	r3, #84	; 0x54
  407e00:	f200 80a3 	bhi.w	407f4a <_malloc_r+0x47a>
  407e04:	0b33      	lsrs	r3, r6, #12
  407e06:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  407e0a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  407e0e:	00c3      	lsls	r3, r0, #3
  407e10:	e680      	b.n	407b14 <_malloc_r+0x44>
  407e12:	bf00      	nop
  407e14:	204005c8 	.word	0x204005c8
  407e18:	2040c99c 	.word	0x2040c99c
  407e1c:	2040c96c 	.word	0x2040c96c
  407e20:	2040c994 	.word	0x2040c994
  407e24:	2040c998 	.word	0x2040c998
  407e28:	204005d0 	.word	0x204005d0
  407e2c:	204009d0 	.word	0x204009d0
  407e30:	0a5a      	lsrs	r2, r3, #9
  407e32:	2a04      	cmp	r2, #4
  407e34:	d95b      	bls.n	407eee <_malloc_r+0x41e>
  407e36:	2a14      	cmp	r2, #20
  407e38:	f200 80ae 	bhi.w	407f98 <_malloc_r+0x4c8>
  407e3c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  407e40:	00c9      	lsls	r1, r1, #3
  407e42:	325b      	adds	r2, #91	; 0x5b
  407e44:	eb07 0c01 	add.w	ip, r7, r1
  407e48:	5879      	ldr	r1, [r7, r1]
  407e4a:	f1ac 0c08 	sub.w	ip, ip, #8
  407e4e:	458c      	cmp	ip, r1
  407e50:	f000 8088 	beq.w	407f64 <_malloc_r+0x494>
  407e54:	684a      	ldr	r2, [r1, #4]
  407e56:	f022 0203 	bic.w	r2, r2, #3
  407e5a:	4293      	cmp	r3, r2
  407e5c:	d273      	bcs.n	407f46 <_malloc_r+0x476>
  407e5e:	6889      	ldr	r1, [r1, #8]
  407e60:	458c      	cmp	ip, r1
  407e62:	d1f7      	bne.n	407e54 <_malloc_r+0x384>
  407e64:	f8dc 200c 	ldr.w	r2, [ip, #12]
  407e68:	687b      	ldr	r3, [r7, #4]
  407e6a:	60e2      	str	r2, [r4, #12]
  407e6c:	f8c4 c008 	str.w	ip, [r4, #8]
  407e70:	6094      	str	r4, [r2, #8]
  407e72:	f8cc 400c 	str.w	r4, [ip, #12]
  407e76:	e68f      	b.n	407b98 <_malloc_r+0xc8>
  407e78:	19a1      	adds	r1, r4, r6
  407e7a:	f046 0c01 	orr.w	ip, r6, #1
  407e7e:	f042 0601 	orr.w	r6, r2, #1
  407e82:	f8c4 c004 	str.w	ip, [r4, #4]
  407e86:	4628      	mov	r0, r5
  407e88:	6179      	str	r1, [r7, #20]
  407e8a:	6139      	str	r1, [r7, #16]
  407e8c:	f8c1 e00c 	str.w	lr, [r1, #12]
  407e90:	f8c1 e008 	str.w	lr, [r1, #8]
  407e94:	604e      	str	r6, [r1, #4]
  407e96:	50e2      	str	r2, [r4, r3]
  407e98:	f000 f99c 	bl	4081d4 <__malloc_unlock>
  407e9c:	3408      	adds	r4, #8
  407e9e:	e6dd      	b.n	407c5c <_malloc_r+0x18c>
  407ea0:	687b      	ldr	r3, [r7, #4]
  407ea2:	e679      	b.n	407b98 <_malloc_r+0xc8>
  407ea4:	f108 0801 	add.w	r8, r8, #1
  407ea8:	f018 0f03 	tst.w	r8, #3
  407eac:	f10c 0c08 	add.w	ip, ip, #8
  407eb0:	f47f ae85 	bne.w	407bbe <_malloc_r+0xee>
  407eb4:	e02d      	b.n	407f12 <_malloc_r+0x442>
  407eb6:	68dc      	ldr	r4, [r3, #12]
  407eb8:	42a3      	cmp	r3, r4
  407eba:	bf08      	it	eq
  407ebc:	3002      	addeq	r0, #2
  407ebe:	f43f ae3e 	beq.w	407b3e <_malloc_r+0x6e>
  407ec2:	e6bb      	b.n	407c3c <_malloc_r+0x16c>
  407ec4:	4419      	add	r1, r3
  407ec6:	461c      	mov	r4, r3
  407ec8:	684a      	ldr	r2, [r1, #4]
  407eca:	68db      	ldr	r3, [r3, #12]
  407ecc:	f854 6f08 	ldr.w	r6, [r4, #8]!
  407ed0:	f042 0201 	orr.w	r2, r2, #1
  407ed4:	604a      	str	r2, [r1, #4]
  407ed6:	4628      	mov	r0, r5
  407ed8:	60f3      	str	r3, [r6, #12]
  407eda:	609e      	str	r6, [r3, #8]
  407edc:	f000 f97a 	bl	4081d4 <__malloc_unlock>
  407ee0:	e6bc      	b.n	407c5c <_malloc_r+0x18c>
  407ee2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  407ee6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  407eea:	00c3      	lsls	r3, r0, #3
  407eec:	e612      	b.n	407b14 <_malloc_r+0x44>
  407eee:	099a      	lsrs	r2, r3, #6
  407ef0:	f102 0139 	add.w	r1, r2, #57	; 0x39
  407ef4:	00c9      	lsls	r1, r1, #3
  407ef6:	3238      	adds	r2, #56	; 0x38
  407ef8:	e7a4      	b.n	407e44 <_malloc_r+0x374>
  407efa:	42bc      	cmp	r4, r7
  407efc:	d054      	beq.n	407fa8 <_malloc_r+0x4d8>
  407efe:	68bc      	ldr	r4, [r7, #8]
  407f00:	6862      	ldr	r2, [r4, #4]
  407f02:	f022 0203 	bic.w	r2, r2, #3
  407f06:	e75d      	b.n	407dc4 <_malloc_r+0x2f4>
  407f08:	f859 3908 	ldr.w	r3, [r9], #-8
  407f0c:	4599      	cmp	r9, r3
  407f0e:	f040 8086 	bne.w	40801e <_malloc_r+0x54e>
  407f12:	f010 0f03 	tst.w	r0, #3
  407f16:	f100 30ff 	add.w	r0, r0, #4294967295
  407f1a:	d1f5      	bne.n	407f08 <_malloc_r+0x438>
  407f1c:	687b      	ldr	r3, [r7, #4]
  407f1e:	ea23 0304 	bic.w	r3, r3, r4
  407f22:	607b      	str	r3, [r7, #4]
  407f24:	0064      	lsls	r4, r4, #1
  407f26:	429c      	cmp	r4, r3
  407f28:	f63f aec7 	bhi.w	407cba <_malloc_r+0x1ea>
  407f2c:	2c00      	cmp	r4, #0
  407f2e:	f43f aec4 	beq.w	407cba <_malloc_r+0x1ea>
  407f32:	421c      	tst	r4, r3
  407f34:	4640      	mov	r0, r8
  407f36:	f47f ae3e 	bne.w	407bb6 <_malloc_r+0xe6>
  407f3a:	0064      	lsls	r4, r4, #1
  407f3c:	421c      	tst	r4, r3
  407f3e:	f100 0004 	add.w	r0, r0, #4
  407f42:	d0fa      	beq.n	407f3a <_malloc_r+0x46a>
  407f44:	e637      	b.n	407bb6 <_malloc_r+0xe6>
  407f46:	468c      	mov	ip, r1
  407f48:	e78c      	b.n	407e64 <_malloc_r+0x394>
  407f4a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  407f4e:	d815      	bhi.n	407f7c <_malloc_r+0x4ac>
  407f50:	0bf3      	lsrs	r3, r6, #15
  407f52:	f103 0078 	add.w	r0, r3, #120	; 0x78
  407f56:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  407f5a:	00c3      	lsls	r3, r0, #3
  407f5c:	e5da      	b.n	407b14 <_malloc_r+0x44>
  407f5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  407f62:	e6ed      	b.n	407d40 <_malloc_r+0x270>
  407f64:	687b      	ldr	r3, [r7, #4]
  407f66:	1092      	asrs	r2, r2, #2
  407f68:	2101      	movs	r1, #1
  407f6a:	fa01 f202 	lsl.w	r2, r1, r2
  407f6e:	4313      	orrs	r3, r2
  407f70:	607b      	str	r3, [r7, #4]
  407f72:	4662      	mov	r2, ip
  407f74:	e779      	b.n	407e6a <_malloc_r+0x39a>
  407f76:	2301      	movs	r3, #1
  407f78:	6053      	str	r3, [r2, #4]
  407f7a:	e729      	b.n	407dd0 <_malloc_r+0x300>
  407f7c:	f240 5254 	movw	r2, #1364	; 0x554
  407f80:	4293      	cmp	r3, r2
  407f82:	d822      	bhi.n	407fca <_malloc_r+0x4fa>
  407f84:	0cb3      	lsrs	r3, r6, #18
  407f86:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  407f8a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  407f8e:	00c3      	lsls	r3, r0, #3
  407f90:	e5c0      	b.n	407b14 <_malloc_r+0x44>
  407f92:	f103 0b10 	add.w	fp, r3, #16
  407f96:	e6ae      	b.n	407cf6 <_malloc_r+0x226>
  407f98:	2a54      	cmp	r2, #84	; 0x54
  407f9a:	d829      	bhi.n	407ff0 <_malloc_r+0x520>
  407f9c:	0b1a      	lsrs	r2, r3, #12
  407f9e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  407fa2:	00c9      	lsls	r1, r1, #3
  407fa4:	326e      	adds	r2, #110	; 0x6e
  407fa6:	e74d      	b.n	407e44 <_malloc_r+0x374>
  407fa8:	4b20      	ldr	r3, [pc, #128]	; (40802c <_malloc_r+0x55c>)
  407faa:	6819      	ldr	r1, [r3, #0]
  407fac:	4459      	add	r1, fp
  407fae:	6019      	str	r1, [r3, #0]
  407fb0:	e6b2      	b.n	407d18 <_malloc_r+0x248>
  407fb2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  407fb6:	2800      	cmp	r0, #0
  407fb8:	f47f aeae 	bne.w	407d18 <_malloc_r+0x248>
  407fbc:	eb08 030b 	add.w	r3, r8, fp
  407fc0:	68ba      	ldr	r2, [r7, #8]
  407fc2:	f043 0301 	orr.w	r3, r3, #1
  407fc6:	6053      	str	r3, [r2, #4]
  407fc8:	e6ee      	b.n	407da8 <_malloc_r+0x2d8>
  407fca:	207f      	movs	r0, #127	; 0x7f
  407fcc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  407fd0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  407fd4:	e59e      	b.n	407b14 <_malloc_r+0x44>
  407fd6:	f104 0108 	add.w	r1, r4, #8
  407fda:	4628      	mov	r0, r5
  407fdc:	9300      	str	r3, [sp, #0]
  407fde:	f7ff fa59 	bl	407494 <_free_r>
  407fe2:	9b00      	ldr	r3, [sp, #0]
  407fe4:	6819      	ldr	r1, [r3, #0]
  407fe6:	e6df      	b.n	407da8 <_malloc_r+0x2d8>
  407fe8:	2001      	movs	r0, #1
  407fea:	f04f 0900 	mov.w	r9, #0
  407fee:	e6bc      	b.n	407d6a <_malloc_r+0x29a>
  407ff0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407ff4:	d805      	bhi.n	408002 <_malloc_r+0x532>
  407ff6:	0bda      	lsrs	r2, r3, #15
  407ff8:	f102 0178 	add.w	r1, r2, #120	; 0x78
  407ffc:	00c9      	lsls	r1, r1, #3
  407ffe:	3277      	adds	r2, #119	; 0x77
  408000:	e720      	b.n	407e44 <_malloc_r+0x374>
  408002:	f240 5154 	movw	r1, #1364	; 0x554
  408006:	428a      	cmp	r2, r1
  408008:	d805      	bhi.n	408016 <_malloc_r+0x546>
  40800a:	0c9a      	lsrs	r2, r3, #18
  40800c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  408010:	00c9      	lsls	r1, r1, #3
  408012:	327c      	adds	r2, #124	; 0x7c
  408014:	e716      	b.n	407e44 <_malloc_r+0x374>
  408016:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40801a:	227e      	movs	r2, #126	; 0x7e
  40801c:	e712      	b.n	407e44 <_malloc_r+0x374>
  40801e:	687b      	ldr	r3, [r7, #4]
  408020:	e780      	b.n	407f24 <_malloc_r+0x454>
  408022:	08f0      	lsrs	r0, r6, #3
  408024:	f106 0308 	add.w	r3, r6, #8
  408028:	e600      	b.n	407c2c <_malloc_r+0x15c>
  40802a:	bf00      	nop
  40802c:	2040c96c 	.word	0x2040c96c

00408030 <__ascii_mbtowc>:
  408030:	b082      	sub	sp, #8
  408032:	b149      	cbz	r1, 408048 <__ascii_mbtowc+0x18>
  408034:	b15a      	cbz	r2, 40804e <__ascii_mbtowc+0x1e>
  408036:	b16b      	cbz	r3, 408054 <__ascii_mbtowc+0x24>
  408038:	7813      	ldrb	r3, [r2, #0]
  40803a:	600b      	str	r3, [r1, #0]
  40803c:	7812      	ldrb	r2, [r2, #0]
  40803e:	1c10      	adds	r0, r2, #0
  408040:	bf18      	it	ne
  408042:	2001      	movne	r0, #1
  408044:	b002      	add	sp, #8
  408046:	4770      	bx	lr
  408048:	a901      	add	r1, sp, #4
  40804a:	2a00      	cmp	r2, #0
  40804c:	d1f3      	bne.n	408036 <__ascii_mbtowc+0x6>
  40804e:	4610      	mov	r0, r2
  408050:	b002      	add	sp, #8
  408052:	4770      	bx	lr
  408054:	f06f 0001 	mvn.w	r0, #1
  408058:	e7f4      	b.n	408044 <__ascii_mbtowc+0x14>
  40805a:	bf00      	nop
  40805c:	0000      	movs	r0, r0
	...

00408060 <memchr>:
  408060:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408064:	2a10      	cmp	r2, #16
  408066:	db2b      	blt.n	4080c0 <memchr+0x60>
  408068:	f010 0f07 	tst.w	r0, #7
  40806c:	d008      	beq.n	408080 <memchr+0x20>
  40806e:	f810 3b01 	ldrb.w	r3, [r0], #1
  408072:	3a01      	subs	r2, #1
  408074:	428b      	cmp	r3, r1
  408076:	d02d      	beq.n	4080d4 <memchr+0x74>
  408078:	f010 0f07 	tst.w	r0, #7
  40807c:	b342      	cbz	r2, 4080d0 <memchr+0x70>
  40807e:	d1f6      	bne.n	40806e <memchr+0xe>
  408080:	b4f0      	push	{r4, r5, r6, r7}
  408082:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  408086:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40808a:	f022 0407 	bic.w	r4, r2, #7
  40808e:	f07f 0700 	mvns.w	r7, #0
  408092:	2300      	movs	r3, #0
  408094:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  408098:	3c08      	subs	r4, #8
  40809a:	ea85 0501 	eor.w	r5, r5, r1
  40809e:	ea86 0601 	eor.w	r6, r6, r1
  4080a2:	fa85 f547 	uadd8	r5, r5, r7
  4080a6:	faa3 f587 	sel	r5, r3, r7
  4080aa:	fa86 f647 	uadd8	r6, r6, r7
  4080ae:	faa5 f687 	sel	r6, r5, r7
  4080b2:	b98e      	cbnz	r6, 4080d8 <memchr+0x78>
  4080b4:	d1ee      	bne.n	408094 <memchr+0x34>
  4080b6:	bcf0      	pop	{r4, r5, r6, r7}
  4080b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4080bc:	f002 0207 	and.w	r2, r2, #7
  4080c0:	b132      	cbz	r2, 4080d0 <memchr+0x70>
  4080c2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4080c6:	3a01      	subs	r2, #1
  4080c8:	ea83 0301 	eor.w	r3, r3, r1
  4080cc:	b113      	cbz	r3, 4080d4 <memchr+0x74>
  4080ce:	d1f8      	bne.n	4080c2 <memchr+0x62>
  4080d0:	2000      	movs	r0, #0
  4080d2:	4770      	bx	lr
  4080d4:	3801      	subs	r0, #1
  4080d6:	4770      	bx	lr
  4080d8:	2d00      	cmp	r5, #0
  4080da:	bf06      	itte	eq
  4080dc:	4635      	moveq	r5, r6
  4080de:	3803      	subeq	r0, #3
  4080e0:	3807      	subne	r0, #7
  4080e2:	f015 0f01 	tst.w	r5, #1
  4080e6:	d107      	bne.n	4080f8 <memchr+0x98>
  4080e8:	3001      	adds	r0, #1
  4080ea:	f415 7f80 	tst.w	r5, #256	; 0x100
  4080ee:	bf02      	ittt	eq
  4080f0:	3001      	addeq	r0, #1
  4080f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4080f6:	3001      	addeq	r0, #1
  4080f8:	bcf0      	pop	{r4, r5, r6, r7}
  4080fa:	3801      	subs	r0, #1
  4080fc:	4770      	bx	lr
  4080fe:	bf00      	nop

00408100 <memmove>:
  408100:	4288      	cmp	r0, r1
  408102:	b5f0      	push	{r4, r5, r6, r7, lr}
  408104:	d90d      	bls.n	408122 <memmove+0x22>
  408106:	188b      	adds	r3, r1, r2
  408108:	4298      	cmp	r0, r3
  40810a:	d20a      	bcs.n	408122 <memmove+0x22>
  40810c:	1884      	adds	r4, r0, r2
  40810e:	2a00      	cmp	r2, #0
  408110:	d051      	beq.n	4081b6 <memmove+0xb6>
  408112:	4622      	mov	r2, r4
  408114:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  408118:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40811c:	4299      	cmp	r1, r3
  40811e:	d1f9      	bne.n	408114 <memmove+0x14>
  408120:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408122:	2a0f      	cmp	r2, #15
  408124:	d948      	bls.n	4081b8 <memmove+0xb8>
  408126:	ea41 0300 	orr.w	r3, r1, r0
  40812a:	079b      	lsls	r3, r3, #30
  40812c:	d146      	bne.n	4081bc <memmove+0xbc>
  40812e:	f100 0410 	add.w	r4, r0, #16
  408132:	f101 0310 	add.w	r3, r1, #16
  408136:	4615      	mov	r5, r2
  408138:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40813c:	f844 6c10 	str.w	r6, [r4, #-16]
  408140:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  408144:	f844 6c0c 	str.w	r6, [r4, #-12]
  408148:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40814c:	f844 6c08 	str.w	r6, [r4, #-8]
  408150:	3d10      	subs	r5, #16
  408152:	f853 6c04 	ldr.w	r6, [r3, #-4]
  408156:	f844 6c04 	str.w	r6, [r4, #-4]
  40815a:	2d0f      	cmp	r5, #15
  40815c:	f103 0310 	add.w	r3, r3, #16
  408160:	f104 0410 	add.w	r4, r4, #16
  408164:	d8e8      	bhi.n	408138 <memmove+0x38>
  408166:	f1a2 0310 	sub.w	r3, r2, #16
  40816a:	f023 030f 	bic.w	r3, r3, #15
  40816e:	f002 0e0f 	and.w	lr, r2, #15
  408172:	3310      	adds	r3, #16
  408174:	f1be 0f03 	cmp.w	lr, #3
  408178:	4419      	add	r1, r3
  40817a:	4403      	add	r3, r0
  40817c:	d921      	bls.n	4081c2 <memmove+0xc2>
  40817e:	1f1e      	subs	r6, r3, #4
  408180:	460d      	mov	r5, r1
  408182:	4674      	mov	r4, lr
  408184:	3c04      	subs	r4, #4
  408186:	f855 7b04 	ldr.w	r7, [r5], #4
  40818a:	f846 7f04 	str.w	r7, [r6, #4]!
  40818e:	2c03      	cmp	r4, #3
  408190:	d8f8      	bhi.n	408184 <memmove+0x84>
  408192:	f1ae 0404 	sub.w	r4, lr, #4
  408196:	f024 0403 	bic.w	r4, r4, #3
  40819a:	3404      	adds	r4, #4
  40819c:	4421      	add	r1, r4
  40819e:	4423      	add	r3, r4
  4081a0:	f002 0203 	and.w	r2, r2, #3
  4081a4:	b162      	cbz	r2, 4081c0 <memmove+0xc0>
  4081a6:	3b01      	subs	r3, #1
  4081a8:	440a      	add	r2, r1
  4081aa:	f811 4b01 	ldrb.w	r4, [r1], #1
  4081ae:	f803 4f01 	strb.w	r4, [r3, #1]!
  4081b2:	428a      	cmp	r2, r1
  4081b4:	d1f9      	bne.n	4081aa <memmove+0xaa>
  4081b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4081b8:	4603      	mov	r3, r0
  4081ba:	e7f3      	b.n	4081a4 <memmove+0xa4>
  4081bc:	4603      	mov	r3, r0
  4081be:	e7f2      	b.n	4081a6 <memmove+0xa6>
  4081c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4081c2:	4672      	mov	r2, lr
  4081c4:	e7ee      	b.n	4081a4 <memmove+0xa4>
  4081c6:	bf00      	nop

004081c8 <__malloc_lock>:
  4081c8:	4801      	ldr	r0, [pc, #4]	; (4081d0 <__malloc_lock+0x8>)
  4081ca:	f7ff bbfd 	b.w	4079c8 <__retarget_lock_acquire_recursive>
  4081ce:	bf00      	nop
  4081d0:	2040cabc 	.word	0x2040cabc

004081d4 <__malloc_unlock>:
  4081d4:	4801      	ldr	r0, [pc, #4]	; (4081dc <__malloc_unlock+0x8>)
  4081d6:	f7ff bbf9 	b.w	4079cc <__retarget_lock_release_recursive>
  4081da:	bf00      	nop
  4081dc:	2040cabc 	.word	0x2040cabc

004081e0 <_realloc_r>:
  4081e0:	2900      	cmp	r1, #0
  4081e2:	f000 8095 	beq.w	408310 <_realloc_r+0x130>
  4081e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4081ea:	460d      	mov	r5, r1
  4081ec:	4616      	mov	r6, r2
  4081ee:	b083      	sub	sp, #12
  4081f0:	4680      	mov	r8, r0
  4081f2:	f106 070b 	add.w	r7, r6, #11
  4081f6:	f7ff ffe7 	bl	4081c8 <__malloc_lock>
  4081fa:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4081fe:	2f16      	cmp	r7, #22
  408200:	f02e 0403 	bic.w	r4, lr, #3
  408204:	f1a5 0908 	sub.w	r9, r5, #8
  408208:	d83c      	bhi.n	408284 <_realloc_r+0xa4>
  40820a:	2210      	movs	r2, #16
  40820c:	4617      	mov	r7, r2
  40820e:	42be      	cmp	r6, r7
  408210:	d83d      	bhi.n	40828e <_realloc_r+0xae>
  408212:	4294      	cmp	r4, r2
  408214:	da43      	bge.n	40829e <_realloc_r+0xbe>
  408216:	4bc4      	ldr	r3, [pc, #784]	; (408528 <_realloc_r+0x348>)
  408218:	6899      	ldr	r1, [r3, #8]
  40821a:	eb09 0004 	add.w	r0, r9, r4
  40821e:	4288      	cmp	r0, r1
  408220:	f000 80b4 	beq.w	40838c <_realloc_r+0x1ac>
  408224:	6843      	ldr	r3, [r0, #4]
  408226:	f023 0101 	bic.w	r1, r3, #1
  40822a:	4401      	add	r1, r0
  40822c:	6849      	ldr	r1, [r1, #4]
  40822e:	07c9      	lsls	r1, r1, #31
  408230:	d54c      	bpl.n	4082cc <_realloc_r+0xec>
  408232:	f01e 0f01 	tst.w	lr, #1
  408236:	f000 809b 	beq.w	408370 <_realloc_r+0x190>
  40823a:	4631      	mov	r1, r6
  40823c:	4640      	mov	r0, r8
  40823e:	f7ff fc47 	bl	407ad0 <_malloc_r>
  408242:	4606      	mov	r6, r0
  408244:	2800      	cmp	r0, #0
  408246:	d03a      	beq.n	4082be <_realloc_r+0xde>
  408248:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40824c:	f023 0301 	bic.w	r3, r3, #1
  408250:	444b      	add	r3, r9
  408252:	f1a0 0208 	sub.w	r2, r0, #8
  408256:	429a      	cmp	r2, r3
  408258:	f000 8121 	beq.w	40849e <_realloc_r+0x2be>
  40825c:	1f22      	subs	r2, r4, #4
  40825e:	2a24      	cmp	r2, #36	; 0x24
  408260:	f200 8107 	bhi.w	408472 <_realloc_r+0x292>
  408264:	2a13      	cmp	r2, #19
  408266:	f200 80db 	bhi.w	408420 <_realloc_r+0x240>
  40826a:	4603      	mov	r3, r0
  40826c:	462a      	mov	r2, r5
  40826e:	6811      	ldr	r1, [r2, #0]
  408270:	6019      	str	r1, [r3, #0]
  408272:	6851      	ldr	r1, [r2, #4]
  408274:	6059      	str	r1, [r3, #4]
  408276:	6892      	ldr	r2, [r2, #8]
  408278:	609a      	str	r2, [r3, #8]
  40827a:	4629      	mov	r1, r5
  40827c:	4640      	mov	r0, r8
  40827e:	f7ff f909 	bl	407494 <_free_r>
  408282:	e01c      	b.n	4082be <_realloc_r+0xde>
  408284:	f027 0707 	bic.w	r7, r7, #7
  408288:	2f00      	cmp	r7, #0
  40828a:	463a      	mov	r2, r7
  40828c:	dabf      	bge.n	40820e <_realloc_r+0x2e>
  40828e:	2600      	movs	r6, #0
  408290:	230c      	movs	r3, #12
  408292:	4630      	mov	r0, r6
  408294:	f8c8 3000 	str.w	r3, [r8]
  408298:	b003      	add	sp, #12
  40829a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40829e:	462e      	mov	r6, r5
  4082a0:	1be3      	subs	r3, r4, r7
  4082a2:	2b0f      	cmp	r3, #15
  4082a4:	d81e      	bhi.n	4082e4 <_realloc_r+0x104>
  4082a6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4082aa:	f003 0301 	and.w	r3, r3, #1
  4082ae:	4323      	orrs	r3, r4
  4082b0:	444c      	add	r4, r9
  4082b2:	f8c9 3004 	str.w	r3, [r9, #4]
  4082b6:	6863      	ldr	r3, [r4, #4]
  4082b8:	f043 0301 	orr.w	r3, r3, #1
  4082bc:	6063      	str	r3, [r4, #4]
  4082be:	4640      	mov	r0, r8
  4082c0:	f7ff ff88 	bl	4081d4 <__malloc_unlock>
  4082c4:	4630      	mov	r0, r6
  4082c6:	b003      	add	sp, #12
  4082c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4082cc:	f023 0303 	bic.w	r3, r3, #3
  4082d0:	18e1      	adds	r1, r4, r3
  4082d2:	4291      	cmp	r1, r2
  4082d4:	db1f      	blt.n	408316 <_realloc_r+0x136>
  4082d6:	68c3      	ldr	r3, [r0, #12]
  4082d8:	6882      	ldr	r2, [r0, #8]
  4082da:	462e      	mov	r6, r5
  4082dc:	60d3      	str	r3, [r2, #12]
  4082de:	460c      	mov	r4, r1
  4082e0:	609a      	str	r2, [r3, #8]
  4082e2:	e7dd      	b.n	4082a0 <_realloc_r+0xc0>
  4082e4:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4082e8:	eb09 0107 	add.w	r1, r9, r7
  4082ec:	f002 0201 	and.w	r2, r2, #1
  4082f0:	444c      	add	r4, r9
  4082f2:	f043 0301 	orr.w	r3, r3, #1
  4082f6:	4317      	orrs	r7, r2
  4082f8:	f8c9 7004 	str.w	r7, [r9, #4]
  4082fc:	604b      	str	r3, [r1, #4]
  4082fe:	6863      	ldr	r3, [r4, #4]
  408300:	f043 0301 	orr.w	r3, r3, #1
  408304:	3108      	adds	r1, #8
  408306:	6063      	str	r3, [r4, #4]
  408308:	4640      	mov	r0, r8
  40830a:	f7ff f8c3 	bl	407494 <_free_r>
  40830e:	e7d6      	b.n	4082be <_realloc_r+0xde>
  408310:	4611      	mov	r1, r2
  408312:	f7ff bbdd 	b.w	407ad0 <_malloc_r>
  408316:	f01e 0f01 	tst.w	lr, #1
  40831a:	d18e      	bne.n	40823a <_realloc_r+0x5a>
  40831c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408320:	eba9 0a01 	sub.w	sl, r9, r1
  408324:	f8da 1004 	ldr.w	r1, [sl, #4]
  408328:	f021 0103 	bic.w	r1, r1, #3
  40832c:	440b      	add	r3, r1
  40832e:	4423      	add	r3, r4
  408330:	4293      	cmp	r3, r2
  408332:	db25      	blt.n	408380 <_realloc_r+0x1a0>
  408334:	68c2      	ldr	r2, [r0, #12]
  408336:	6881      	ldr	r1, [r0, #8]
  408338:	4656      	mov	r6, sl
  40833a:	60ca      	str	r2, [r1, #12]
  40833c:	6091      	str	r1, [r2, #8]
  40833e:	f8da 100c 	ldr.w	r1, [sl, #12]
  408342:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408346:	1f22      	subs	r2, r4, #4
  408348:	2a24      	cmp	r2, #36	; 0x24
  40834a:	60c1      	str	r1, [r0, #12]
  40834c:	6088      	str	r0, [r1, #8]
  40834e:	f200 8094 	bhi.w	40847a <_realloc_r+0x29a>
  408352:	2a13      	cmp	r2, #19
  408354:	d96f      	bls.n	408436 <_realloc_r+0x256>
  408356:	6829      	ldr	r1, [r5, #0]
  408358:	f8ca 1008 	str.w	r1, [sl, #8]
  40835c:	6869      	ldr	r1, [r5, #4]
  40835e:	f8ca 100c 	str.w	r1, [sl, #12]
  408362:	2a1b      	cmp	r2, #27
  408364:	f200 80a2 	bhi.w	4084ac <_realloc_r+0x2cc>
  408368:	3508      	adds	r5, #8
  40836a:	f10a 0210 	add.w	r2, sl, #16
  40836e:	e063      	b.n	408438 <_realloc_r+0x258>
  408370:	f855 3c08 	ldr.w	r3, [r5, #-8]
  408374:	eba9 0a03 	sub.w	sl, r9, r3
  408378:	f8da 1004 	ldr.w	r1, [sl, #4]
  40837c:	f021 0103 	bic.w	r1, r1, #3
  408380:	1863      	adds	r3, r4, r1
  408382:	4293      	cmp	r3, r2
  408384:	f6ff af59 	blt.w	40823a <_realloc_r+0x5a>
  408388:	4656      	mov	r6, sl
  40838a:	e7d8      	b.n	40833e <_realloc_r+0x15e>
  40838c:	6841      	ldr	r1, [r0, #4]
  40838e:	f021 0b03 	bic.w	fp, r1, #3
  408392:	44a3      	add	fp, r4
  408394:	f107 0010 	add.w	r0, r7, #16
  408398:	4583      	cmp	fp, r0
  40839a:	da56      	bge.n	40844a <_realloc_r+0x26a>
  40839c:	f01e 0f01 	tst.w	lr, #1
  4083a0:	f47f af4b 	bne.w	40823a <_realloc_r+0x5a>
  4083a4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4083a8:	eba9 0a01 	sub.w	sl, r9, r1
  4083ac:	f8da 1004 	ldr.w	r1, [sl, #4]
  4083b0:	f021 0103 	bic.w	r1, r1, #3
  4083b4:	448b      	add	fp, r1
  4083b6:	4558      	cmp	r0, fp
  4083b8:	dce2      	bgt.n	408380 <_realloc_r+0x1a0>
  4083ba:	4656      	mov	r6, sl
  4083bc:	f8da 100c 	ldr.w	r1, [sl, #12]
  4083c0:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4083c4:	1f22      	subs	r2, r4, #4
  4083c6:	2a24      	cmp	r2, #36	; 0x24
  4083c8:	60c1      	str	r1, [r0, #12]
  4083ca:	6088      	str	r0, [r1, #8]
  4083cc:	f200 808f 	bhi.w	4084ee <_realloc_r+0x30e>
  4083d0:	2a13      	cmp	r2, #19
  4083d2:	f240 808a 	bls.w	4084ea <_realloc_r+0x30a>
  4083d6:	6829      	ldr	r1, [r5, #0]
  4083d8:	f8ca 1008 	str.w	r1, [sl, #8]
  4083dc:	6869      	ldr	r1, [r5, #4]
  4083de:	f8ca 100c 	str.w	r1, [sl, #12]
  4083e2:	2a1b      	cmp	r2, #27
  4083e4:	f200 808a 	bhi.w	4084fc <_realloc_r+0x31c>
  4083e8:	3508      	adds	r5, #8
  4083ea:	f10a 0210 	add.w	r2, sl, #16
  4083ee:	6829      	ldr	r1, [r5, #0]
  4083f0:	6011      	str	r1, [r2, #0]
  4083f2:	6869      	ldr	r1, [r5, #4]
  4083f4:	6051      	str	r1, [r2, #4]
  4083f6:	68a9      	ldr	r1, [r5, #8]
  4083f8:	6091      	str	r1, [r2, #8]
  4083fa:	eb0a 0107 	add.w	r1, sl, r7
  4083fe:	ebab 0207 	sub.w	r2, fp, r7
  408402:	f042 0201 	orr.w	r2, r2, #1
  408406:	6099      	str	r1, [r3, #8]
  408408:	604a      	str	r2, [r1, #4]
  40840a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40840e:	f003 0301 	and.w	r3, r3, #1
  408412:	431f      	orrs	r7, r3
  408414:	4640      	mov	r0, r8
  408416:	f8ca 7004 	str.w	r7, [sl, #4]
  40841a:	f7ff fedb 	bl	4081d4 <__malloc_unlock>
  40841e:	e751      	b.n	4082c4 <_realloc_r+0xe4>
  408420:	682b      	ldr	r3, [r5, #0]
  408422:	6003      	str	r3, [r0, #0]
  408424:	686b      	ldr	r3, [r5, #4]
  408426:	6043      	str	r3, [r0, #4]
  408428:	2a1b      	cmp	r2, #27
  40842a:	d82d      	bhi.n	408488 <_realloc_r+0x2a8>
  40842c:	f100 0308 	add.w	r3, r0, #8
  408430:	f105 0208 	add.w	r2, r5, #8
  408434:	e71b      	b.n	40826e <_realloc_r+0x8e>
  408436:	4632      	mov	r2, r6
  408438:	6829      	ldr	r1, [r5, #0]
  40843a:	6011      	str	r1, [r2, #0]
  40843c:	6869      	ldr	r1, [r5, #4]
  40843e:	6051      	str	r1, [r2, #4]
  408440:	68a9      	ldr	r1, [r5, #8]
  408442:	6091      	str	r1, [r2, #8]
  408444:	461c      	mov	r4, r3
  408446:	46d1      	mov	r9, sl
  408448:	e72a      	b.n	4082a0 <_realloc_r+0xc0>
  40844a:	eb09 0107 	add.w	r1, r9, r7
  40844e:	ebab 0b07 	sub.w	fp, fp, r7
  408452:	f04b 0201 	orr.w	r2, fp, #1
  408456:	6099      	str	r1, [r3, #8]
  408458:	604a      	str	r2, [r1, #4]
  40845a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40845e:	f003 0301 	and.w	r3, r3, #1
  408462:	431f      	orrs	r7, r3
  408464:	4640      	mov	r0, r8
  408466:	f845 7c04 	str.w	r7, [r5, #-4]
  40846a:	f7ff feb3 	bl	4081d4 <__malloc_unlock>
  40846e:	462e      	mov	r6, r5
  408470:	e728      	b.n	4082c4 <_realloc_r+0xe4>
  408472:	4629      	mov	r1, r5
  408474:	f7ff fe44 	bl	408100 <memmove>
  408478:	e6ff      	b.n	40827a <_realloc_r+0x9a>
  40847a:	4629      	mov	r1, r5
  40847c:	4630      	mov	r0, r6
  40847e:	461c      	mov	r4, r3
  408480:	46d1      	mov	r9, sl
  408482:	f7ff fe3d 	bl	408100 <memmove>
  408486:	e70b      	b.n	4082a0 <_realloc_r+0xc0>
  408488:	68ab      	ldr	r3, [r5, #8]
  40848a:	6083      	str	r3, [r0, #8]
  40848c:	68eb      	ldr	r3, [r5, #12]
  40848e:	60c3      	str	r3, [r0, #12]
  408490:	2a24      	cmp	r2, #36	; 0x24
  408492:	d017      	beq.n	4084c4 <_realloc_r+0x2e4>
  408494:	f100 0310 	add.w	r3, r0, #16
  408498:	f105 0210 	add.w	r2, r5, #16
  40849c:	e6e7      	b.n	40826e <_realloc_r+0x8e>
  40849e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4084a2:	f023 0303 	bic.w	r3, r3, #3
  4084a6:	441c      	add	r4, r3
  4084a8:	462e      	mov	r6, r5
  4084aa:	e6f9      	b.n	4082a0 <_realloc_r+0xc0>
  4084ac:	68a9      	ldr	r1, [r5, #8]
  4084ae:	f8ca 1010 	str.w	r1, [sl, #16]
  4084b2:	68e9      	ldr	r1, [r5, #12]
  4084b4:	f8ca 1014 	str.w	r1, [sl, #20]
  4084b8:	2a24      	cmp	r2, #36	; 0x24
  4084ba:	d00c      	beq.n	4084d6 <_realloc_r+0x2f6>
  4084bc:	3510      	adds	r5, #16
  4084be:	f10a 0218 	add.w	r2, sl, #24
  4084c2:	e7b9      	b.n	408438 <_realloc_r+0x258>
  4084c4:	692b      	ldr	r3, [r5, #16]
  4084c6:	6103      	str	r3, [r0, #16]
  4084c8:	696b      	ldr	r3, [r5, #20]
  4084ca:	6143      	str	r3, [r0, #20]
  4084cc:	f105 0218 	add.w	r2, r5, #24
  4084d0:	f100 0318 	add.w	r3, r0, #24
  4084d4:	e6cb      	b.n	40826e <_realloc_r+0x8e>
  4084d6:	692a      	ldr	r2, [r5, #16]
  4084d8:	f8ca 2018 	str.w	r2, [sl, #24]
  4084dc:	696a      	ldr	r2, [r5, #20]
  4084de:	f8ca 201c 	str.w	r2, [sl, #28]
  4084e2:	3518      	adds	r5, #24
  4084e4:	f10a 0220 	add.w	r2, sl, #32
  4084e8:	e7a6      	b.n	408438 <_realloc_r+0x258>
  4084ea:	4632      	mov	r2, r6
  4084ec:	e77f      	b.n	4083ee <_realloc_r+0x20e>
  4084ee:	4629      	mov	r1, r5
  4084f0:	4630      	mov	r0, r6
  4084f2:	9301      	str	r3, [sp, #4]
  4084f4:	f7ff fe04 	bl	408100 <memmove>
  4084f8:	9b01      	ldr	r3, [sp, #4]
  4084fa:	e77e      	b.n	4083fa <_realloc_r+0x21a>
  4084fc:	68a9      	ldr	r1, [r5, #8]
  4084fe:	f8ca 1010 	str.w	r1, [sl, #16]
  408502:	68e9      	ldr	r1, [r5, #12]
  408504:	f8ca 1014 	str.w	r1, [sl, #20]
  408508:	2a24      	cmp	r2, #36	; 0x24
  40850a:	d003      	beq.n	408514 <_realloc_r+0x334>
  40850c:	3510      	adds	r5, #16
  40850e:	f10a 0218 	add.w	r2, sl, #24
  408512:	e76c      	b.n	4083ee <_realloc_r+0x20e>
  408514:	692a      	ldr	r2, [r5, #16]
  408516:	f8ca 2018 	str.w	r2, [sl, #24]
  40851a:	696a      	ldr	r2, [r5, #20]
  40851c:	f8ca 201c 	str.w	r2, [sl, #28]
  408520:	3518      	adds	r5, #24
  408522:	f10a 0220 	add.w	r2, sl, #32
  408526:	e762      	b.n	4083ee <_realloc_r+0x20e>
  408528:	204005c8 	.word	0x204005c8

0040852c <_sbrk_r>:
  40852c:	b538      	push	{r3, r4, r5, lr}
  40852e:	4c07      	ldr	r4, [pc, #28]	; (40854c <_sbrk_r+0x20>)
  408530:	2300      	movs	r3, #0
  408532:	4605      	mov	r5, r0
  408534:	4608      	mov	r0, r1
  408536:	6023      	str	r3, [r4, #0]
  408538:	f7fd f876 	bl	405628 <_sbrk>
  40853c:	1c43      	adds	r3, r0, #1
  40853e:	d000      	beq.n	408542 <_sbrk_r+0x16>
  408540:	bd38      	pop	{r3, r4, r5, pc}
  408542:	6823      	ldr	r3, [r4, #0]
  408544:	2b00      	cmp	r3, #0
  408546:	d0fb      	beq.n	408540 <_sbrk_r+0x14>
  408548:	602b      	str	r3, [r5, #0]
  40854a:	bd38      	pop	{r3, r4, r5, pc}
  40854c:	2040cad0 	.word	0x2040cad0

00408550 <__sread>:
  408550:	b510      	push	{r4, lr}
  408552:	460c      	mov	r4, r1
  408554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408558:	f000 f9f6 	bl	408948 <_read_r>
  40855c:	2800      	cmp	r0, #0
  40855e:	db03      	blt.n	408568 <__sread+0x18>
  408560:	6d23      	ldr	r3, [r4, #80]	; 0x50
  408562:	4403      	add	r3, r0
  408564:	6523      	str	r3, [r4, #80]	; 0x50
  408566:	bd10      	pop	{r4, pc}
  408568:	89a3      	ldrh	r3, [r4, #12]
  40856a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40856e:	81a3      	strh	r3, [r4, #12]
  408570:	bd10      	pop	{r4, pc}
  408572:	bf00      	nop

00408574 <__swrite>:
  408574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408578:	4616      	mov	r6, r2
  40857a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40857e:	461f      	mov	r7, r3
  408580:	05d3      	lsls	r3, r2, #23
  408582:	460c      	mov	r4, r1
  408584:	4605      	mov	r5, r0
  408586:	d507      	bpl.n	408598 <__swrite+0x24>
  408588:	2200      	movs	r2, #0
  40858a:	2302      	movs	r3, #2
  40858c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408590:	f000 f9c4 	bl	40891c <_lseek_r>
  408594:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40859c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4085a0:	81a2      	strh	r2, [r4, #12]
  4085a2:	463b      	mov	r3, r7
  4085a4:	4632      	mov	r2, r6
  4085a6:	4628      	mov	r0, r5
  4085a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4085ac:	f000 b8a4 	b.w	4086f8 <_write_r>

004085b0 <__sseek>:
  4085b0:	b510      	push	{r4, lr}
  4085b2:	460c      	mov	r4, r1
  4085b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4085b8:	f000 f9b0 	bl	40891c <_lseek_r>
  4085bc:	89a3      	ldrh	r3, [r4, #12]
  4085be:	1c42      	adds	r2, r0, #1
  4085c0:	bf0e      	itee	eq
  4085c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4085c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4085ca:	6520      	strne	r0, [r4, #80]	; 0x50
  4085cc:	81a3      	strh	r3, [r4, #12]
  4085ce:	bd10      	pop	{r4, pc}

004085d0 <__sclose>:
  4085d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4085d4:	f000 b908 	b.w	4087e8 <_close_r>

004085d8 <__swbuf_r>:
  4085d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4085da:	460d      	mov	r5, r1
  4085dc:	4614      	mov	r4, r2
  4085de:	4606      	mov	r6, r0
  4085e0:	b110      	cbz	r0, 4085e8 <__swbuf_r+0x10>
  4085e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4085e4:	2b00      	cmp	r3, #0
  4085e6:	d04b      	beq.n	408680 <__swbuf_r+0xa8>
  4085e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4085ec:	69a3      	ldr	r3, [r4, #24]
  4085ee:	60a3      	str	r3, [r4, #8]
  4085f0:	b291      	uxth	r1, r2
  4085f2:	0708      	lsls	r0, r1, #28
  4085f4:	d539      	bpl.n	40866a <__swbuf_r+0x92>
  4085f6:	6923      	ldr	r3, [r4, #16]
  4085f8:	2b00      	cmp	r3, #0
  4085fa:	d036      	beq.n	40866a <__swbuf_r+0x92>
  4085fc:	b2ed      	uxtb	r5, r5
  4085fe:	0489      	lsls	r1, r1, #18
  408600:	462f      	mov	r7, r5
  408602:	d515      	bpl.n	408630 <__swbuf_r+0x58>
  408604:	6822      	ldr	r2, [r4, #0]
  408606:	6961      	ldr	r1, [r4, #20]
  408608:	1ad3      	subs	r3, r2, r3
  40860a:	428b      	cmp	r3, r1
  40860c:	da1c      	bge.n	408648 <__swbuf_r+0x70>
  40860e:	3301      	adds	r3, #1
  408610:	68a1      	ldr	r1, [r4, #8]
  408612:	1c50      	adds	r0, r2, #1
  408614:	3901      	subs	r1, #1
  408616:	60a1      	str	r1, [r4, #8]
  408618:	6020      	str	r0, [r4, #0]
  40861a:	7015      	strb	r5, [r2, #0]
  40861c:	6962      	ldr	r2, [r4, #20]
  40861e:	429a      	cmp	r2, r3
  408620:	d01a      	beq.n	408658 <__swbuf_r+0x80>
  408622:	89a3      	ldrh	r3, [r4, #12]
  408624:	07db      	lsls	r3, r3, #31
  408626:	d501      	bpl.n	40862c <__swbuf_r+0x54>
  408628:	2d0a      	cmp	r5, #10
  40862a:	d015      	beq.n	408658 <__swbuf_r+0x80>
  40862c:	4638      	mov	r0, r7
  40862e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408630:	6e61      	ldr	r1, [r4, #100]	; 0x64
  408632:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408636:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40863a:	81a2      	strh	r2, [r4, #12]
  40863c:	6822      	ldr	r2, [r4, #0]
  40863e:	6661      	str	r1, [r4, #100]	; 0x64
  408640:	6961      	ldr	r1, [r4, #20]
  408642:	1ad3      	subs	r3, r2, r3
  408644:	428b      	cmp	r3, r1
  408646:	dbe2      	blt.n	40860e <__swbuf_r+0x36>
  408648:	4621      	mov	r1, r4
  40864a:	4630      	mov	r0, r6
  40864c:	f7fe fda4 	bl	407198 <_fflush_r>
  408650:	b940      	cbnz	r0, 408664 <__swbuf_r+0x8c>
  408652:	6822      	ldr	r2, [r4, #0]
  408654:	2301      	movs	r3, #1
  408656:	e7db      	b.n	408610 <__swbuf_r+0x38>
  408658:	4621      	mov	r1, r4
  40865a:	4630      	mov	r0, r6
  40865c:	f7fe fd9c 	bl	407198 <_fflush_r>
  408660:	2800      	cmp	r0, #0
  408662:	d0e3      	beq.n	40862c <__swbuf_r+0x54>
  408664:	f04f 37ff 	mov.w	r7, #4294967295
  408668:	e7e0      	b.n	40862c <__swbuf_r+0x54>
  40866a:	4621      	mov	r1, r4
  40866c:	4630      	mov	r0, r6
  40866e:	f7fe fc7f 	bl	406f70 <__swsetup_r>
  408672:	2800      	cmp	r0, #0
  408674:	d1f6      	bne.n	408664 <__swbuf_r+0x8c>
  408676:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40867a:	6923      	ldr	r3, [r4, #16]
  40867c:	b291      	uxth	r1, r2
  40867e:	e7bd      	b.n	4085fc <__swbuf_r+0x24>
  408680:	f7fe fde2 	bl	407248 <__sinit>
  408684:	e7b0      	b.n	4085e8 <__swbuf_r+0x10>
  408686:	bf00      	nop

00408688 <_wcrtomb_r>:
  408688:	b5f0      	push	{r4, r5, r6, r7, lr}
  40868a:	4606      	mov	r6, r0
  40868c:	b085      	sub	sp, #20
  40868e:	461f      	mov	r7, r3
  408690:	b189      	cbz	r1, 4086b6 <_wcrtomb_r+0x2e>
  408692:	4c10      	ldr	r4, [pc, #64]	; (4086d4 <_wcrtomb_r+0x4c>)
  408694:	4d10      	ldr	r5, [pc, #64]	; (4086d8 <_wcrtomb_r+0x50>)
  408696:	6824      	ldr	r4, [r4, #0]
  408698:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40869a:	2c00      	cmp	r4, #0
  40869c:	bf08      	it	eq
  40869e:	462c      	moveq	r4, r5
  4086a0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4086a4:	47a0      	blx	r4
  4086a6:	1c43      	adds	r3, r0, #1
  4086a8:	d103      	bne.n	4086b2 <_wcrtomb_r+0x2a>
  4086aa:	2200      	movs	r2, #0
  4086ac:	238a      	movs	r3, #138	; 0x8a
  4086ae:	603a      	str	r2, [r7, #0]
  4086b0:	6033      	str	r3, [r6, #0]
  4086b2:	b005      	add	sp, #20
  4086b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4086b6:	460c      	mov	r4, r1
  4086b8:	4906      	ldr	r1, [pc, #24]	; (4086d4 <_wcrtomb_r+0x4c>)
  4086ba:	4a07      	ldr	r2, [pc, #28]	; (4086d8 <_wcrtomb_r+0x50>)
  4086bc:	6809      	ldr	r1, [r1, #0]
  4086be:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4086c0:	2900      	cmp	r1, #0
  4086c2:	bf08      	it	eq
  4086c4:	4611      	moveq	r1, r2
  4086c6:	4622      	mov	r2, r4
  4086c8:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4086cc:	a901      	add	r1, sp, #4
  4086ce:	47a0      	blx	r4
  4086d0:	e7e9      	b.n	4086a6 <_wcrtomb_r+0x1e>
  4086d2:	bf00      	nop
  4086d4:	20400028 	.word	0x20400028
  4086d8:	2040045c 	.word	0x2040045c

004086dc <__ascii_wctomb>:
  4086dc:	b121      	cbz	r1, 4086e8 <__ascii_wctomb+0xc>
  4086de:	2aff      	cmp	r2, #255	; 0xff
  4086e0:	d804      	bhi.n	4086ec <__ascii_wctomb+0x10>
  4086e2:	700a      	strb	r2, [r1, #0]
  4086e4:	2001      	movs	r0, #1
  4086e6:	4770      	bx	lr
  4086e8:	4608      	mov	r0, r1
  4086ea:	4770      	bx	lr
  4086ec:	238a      	movs	r3, #138	; 0x8a
  4086ee:	6003      	str	r3, [r0, #0]
  4086f0:	f04f 30ff 	mov.w	r0, #4294967295
  4086f4:	4770      	bx	lr
  4086f6:	bf00      	nop

004086f8 <_write_r>:
  4086f8:	b570      	push	{r4, r5, r6, lr}
  4086fa:	460d      	mov	r5, r1
  4086fc:	4c08      	ldr	r4, [pc, #32]	; (408720 <_write_r+0x28>)
  4086fe:	4611      	mov	r1, r2
  408700:	4606      	mov	r6, r0
  408702:	461a      	mov	r2, r3
  408704:	4628      	mov	r0, r5
  408706:	2300      	movs	r3, #0
  408708:	6023      	str	r3, [r4, #0]
  40870a:	f7fc f96b 	bl	4049e4 <_write>
  40870e:	1c43      	adds	r3, r0, #1
  408710:	d000      	beq.n	408714 <_write_r+0x1c>
  408712:	bd70      	pop	{r4, r5, r6, pc}
  408714:	6823      	ldr	r3, [r4, #0]
  408716:	2b00      	cmp	r3, #0
  408718:	d0fb      	beq.n	408712 <_write_r+0x1a>
  40871a:	6033      	str	r3, [r6, #0]
  40871c:	bd70      	pop	{r4, r5, r6, pc}
  40871e:	bf00      	nop
  408720:	2040cad0 	.word	0x2040cad0

00408724 <__register_exitproc>:
  408724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408728:	4d2c      	ldr	r5, [pc, #176]	; (4087dc <__register_exitproc+0xb8>)
  40872a:	4606      	mov	r6, r0
  40872c:	6828      	ldr	r0, [r5, #0]
  40872e:	4698      	mov	r8, r3
  408730:	460f      	mov	r7, r1
  408732:	4691      	mov	r9, r2
  408734:	f7ff f948 	bl	4079c8 <__retarget_lock_acquire_recursive>
  408738:	4b29      	ldr	r3, [pc, #164]	; (4087e0 <__register_exitproc+0xbc>)
  40873a:	681c      	ldr	r4, [r3, #0]
  40873c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  408740:	2b00      	cmp	r3, #0
  408742:	d03e      	beq.n	4087c2 <__register_exitproc+0x9e>
  408744:	685a      	ldr	r2, [r3, #4]
  408746:	2a1f      	cmp	r2, #31
  408748:	dc1c      	bgt.n	408784 <__register_exitproc+0x60>
  40874a:	f102 0e01 	add.w	lr, r2, #1
  40874e:	b176      	cbz	r6, 40876e <__register_exitproc+0x4a>
  408750:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  408754:	2401      	movs	r4, #1
  408756:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40875a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40875e:	4094      	lsls	r4, r2
  408760:	4320      	orrs	r0, r4
  408762:	2e02      	cmp	r6, #2
  408764:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  408768:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40876c:	d023      	beq.n	4087b6 <__register_exitproc+0x92>
  40876e:	3202      	adds	r2, #2
  408770:	f8c3 e004 	str.w	lr, [r3, #4]
  408774:	6828      	ldr	r0, [r5, #0]
  408776:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40877a:	f7ff f927 	bl	4079cc <__retarget_lock_release_recursive>
  40877e:	2000      	movs	r0, #0
  408780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408784:	4b17      	ldr	r3, [pc, #92]	; (4087e4 <__register_exitproc+0xc0>)
  408786:	b30b      	cbz	r3, 4087cc <__register_exitproc+0xa8>
  408788:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40878c:	f7ff f998 	bl	407ac0 <malloc>
  408790:	4603      	mov	r3, r0
  408792:	b1d8      	cbz	r0, 4087cc <__register_exitproc+0xa8>
  408794:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  408798:	6002      	str	r2, [r0, #0]
  40879a:	2100      	movs	r1, #0
  40879c:	6041      	str	r1, [r0, #4]
  40879e:	460a      	mov	r2, r1
  4087a0:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4087a4:	f04f 0e01 	mov.w	lr, #1
  4087a8:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4087ac:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4087b0:	2e00      	cmp	r6, #0
  4087b2:	d0dc      	beq.n	40876e <__register_exitproc+0x4a>
  4087b4:	e7cc      	b.n	408750 <__register_exitproc+0x2c>
  4087b6:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4087ba:	430c      	orrs	r4, r1
  4087bc:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4087c0:	e7d5      	b.n	40876e <__register_exitproc+0x4a>
  4087c2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4087c6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4087ca:	e7bb      	b.n	408744 <__register_exitproc+0x20>
  4087cc:	6828      	ldr	r0, [r5, #0]
  4087ce:	f7ff f8fd 	bl	4079cc <__retarget_lock_release_recursive>
  4087d2:	f04f 30ff 	mov.w	r0, #4294967295
  4087d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4087da:	bf00      	nop
  4087dc:	20400458 	.word	0x20400458
  4087e0:	00409b70 	.word	0x00409b70
  4087e4:	00407ac1 	.word	0x00407ac1

004087e8 <_close_r>:
  4087e8:	b538      	push	{r3, r4, r5, lr}
  4087ea:	4c07      	ldr	r4, [pc, #28]	; (408808 <_close_r+0x20>)
  4087ec:	2300      	movs	r3, #0
  4087ee:	4605      	mov	r5, r0
  4087f0:	4608      	mov	r0, r1
  4087f2:	6023      	str	r3, [r4, #0]
  4087f4:	f7fc ff34 	bl	405660 <_close>
  4087f8:	1c43      	adds	r3, r0, #1
  4087fa:	d000      	beq.n	4087fe <_close_r+0x16>
  4087fc:	bd38      	pop	{r3, r4, r5, pc}
  4087fe:	6823      	ldr	r3, [r4, #0]
  408800:	2b00      	cmp	r3, #0
  408802:	d0fb      	beq.n	4087fc <_close_r+0x14>
  408804:	602b      	str	r3, [r5, #0]
  408806:	bd38      	pop	{r3, r4, r5, pc}
  408808:	2040cad0 	.word	0x2040cad0

0040880c <_fclose_r>:
  40880c:	b570      	push	{r4, r5, r6, lr}
  40880e:	b159      	cbz	r1, 408828 <_fclose_r+0x1c>
  408810:	4605      	mov	r5, r0
  408812:	460c      	mov	r4, r1
  408814:	b110      	cbz	r0, 40881c <_fclose_r+0x10>
  408816:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408818:	2b00      	cmp	r3, #0
  40881a:	d03c      	beq.n	408896 <_fclose_r+0x8a>
  40881c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40881e:	07d8      	lsls	r0, r3, #31
  408820:	d505      	bpl.n	40882e <_fclose_r+0x22>
  408822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408826:	b92b      	cbnz	r3, 408834 <_fclose_r+0x28>
  408828:	2600      	movs	r6, #0
  40882a:	4630      	mov	r0, r6
  40882c:	bd70      	pop	{r4, r5, r6, pc}
  40882e:	89a3      	ldrh	r3, [r4, #12]
  408830:	0599      	lsls	r1, r3, #22
  408832:	d53c      	bpl.n	4088ae <_fclose_r+0xa2>
  408834:	4621      	mov	r1, r4
  408836:	4628      	mov	r0, r5
  408838:	f7fe fc0e 	bl	407058 <__sflush_r>
  40883c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40883e:	4606      	mov	r6, r0
  408840:	b133      	cbz	r3, 408850 <_fclose_r+0x44>
  408842:	69e1      	ldr	r1, [r4, #28]
  408844:	4628      	mov	r0, r5
  408846:	4798      	blx	r3
  408848:	2800      	cmp	r0, #0
  40884a:	bfb8      	it	lt
  40884c:	f04f 36ff 	movlt.w	r6, #4294967295
  408850:	89a3      	ldrh	r3, [r4, #12]
  408852:	061a      	lsls	r2, r3, #24
  408854:	d422      	bmi.n	40889c <_fclose_r+0x90>
  408856:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408858:	b141      	cbz	r1, 40886c <_fclose_r+0x60>
  40885a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40885e:	4299      	cmp	r1, r3
  408860:	d002      	beq.n	408868 <_fclose_r+0x5c>
  408862:	4628      	mov	r0, r5
  408864:	f7fe fe16 	bl	407494 <_free_r>
  408868:	2300      	movs	r3, #0
  40886a:	6323      	str	r3, [r4, #48]	; 0x30
  40886c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40886e:	b121      	cbz	r1, 40887a <_fclose_r+0x6e>
  408870:	4628      	mov	r0, r5
  408872:	f7fe fe0f 	bl	407494 <_free_r>
  408876:	2300      	movs	r3, #0
  408878:	6463      	str	r3, [r4, #68]	; 0x44
  40887a:	f7fe fd11 	bl	4072a0 <__sfp_lock_acquire>
  40887e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408880:	2200      	movs	r2, #0
  408882:	07db      	lsls	r3, r3, #31
  408884:	81a2      	strh	r2, [r4, #12]
  408886:	d50e      	bpl.n	4088a6 <_fclose_r+0x9a>
  408888:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40888a:	f7ff f89b 	bl	4079c4 <__retarget_lock_close_recursive>
  40888e:	f7fe fd0d 	bl	4072ac <__sfp_lock_release>
  408892:	4630      	mov	r0, r6
  408894:	bd70      	pop	{r4, r5, r6, pc}
  408896:	f7fe fcd7 	bl	407248 <__sinit>
  40889a:	e7bf      	b.n	40881c <_fclose_r+0x10>
  40889c:	6921      	ldr	r1, [r4, #16]
  40889e:	4628      	mov	r0, r5
  4088a0:	f7fe fdf8 	bl	407494 <_free_r>
  4088a4:	e7d7      	b.n	408856 <_fclose_r+0x4a>
  4088a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4088a8:	f7ff f890 	bl	4079cc <__retarget_lock_release_recursive>
  4088ac:	e7ec      	b.n	408888 <_fclose_r+0x7c>
  4088ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4088b0:	f7ff f88a 	bl	4079c8 <__retarget_lock_acquire_recursive>
  4088b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4088b8:	2b00      	cmp	r3, #0
  4088ba:	d1bb      	bne.n	408834 <_fclose_r+0x28>
  4088bc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4088be:	f016 0601 	ands.w	r6, r6, #1
  4088c2:	d1b1      	bne.n	408828 <_fclose_r+0x1c>
  4088c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4088c6:	f7ff f881 	bl	4079cc <__retarget_lock_release_recursive>
  4088ca:	4630      	mov	r0, r6
  4088cc:	bd70      	pop	{r4, r5, r6, pc}
  4088ce:	bf00      	nop

004088d0 <_fstat_r>:
  4088d0:	b538      	push	{r3, r4, r5, lr}
  4088d2:	460b      	mov	r3, r1
  4088d4:	4c07      	ldr	r4, [pc, #28]	; (4088f4 <_fstat_r+0x24>)
  4088d6:	4605      	mov	r5, r0
  4088d8:	4611      	mov	r1, r2
  4088da:	4618      	mov	r0, r3
  4088dc:	2300      	movs	r3, #0
  4088de:	6023      	str	r3, [r4, #0]
  4088e0:	f7fc fec1 	bl	405666 <_fstat>
  4088e4:	1c43      	adds	r3, r0, #1
  4088e6:	d000      	beq.n	4088ea <_fstat_r+0x1a>
  4088e8:	bd38      	pop	{r3, r4, r5, pc}
  4088ea:	6823      	ldr	r3, [r4, #0]
  4088ec:	2b00      	cmp	r3, #0
  4088ee:	d0fb      	beq.n	4088e8 <_fstat_r+0x18>
  4088f0:	602b      	str	r3, [r5, #0]
  4088f2:	bd38      	pop	{r3, r4, r5, pc}
  4088f4:	2040cad0 	.word	0x2040cad0

004088f8 <_isatty_r>:
  4088f8:	b538      	push	{r3, r4, r5, lr}
  4088fa:	4c07      	ldr	r4, [pc, #28]	; (408918 <_isatty_r+0x20>)
  4088fc:	2300      	movs	r3, #0
  4088fe:	4605      	mov	r5, r0
  408900:	4608      	mov	r0, r1
  408902:	6023      	str	r3, [r4, #0]
  408904:	f7fc feb4 	bl	405670 <_isatty>
  408908:	1c43      	adds	r3, r0, #1
  40890a:	d000      	beq.n	40890e <_isatty_r+0x16>
  40890c:	bd38      	pop	{r3, r4, r5, pc}
  40890e:	6823      	ldr	r3, [r4, #0]
  408910:	2b00      	cmp	r3, #0
  408912:	d0fb      	beq.n	40890c <_isatty_r+0x14>
  408914:	602b      	str	r3, [r5, #0]
  408916:	bd38      	pop	{r3, r4, r5, pc}
  408918:	2040cad0 	.word	0x2040cad0

0040891c <_lseek_r>:
  40891c:	b570      	push	{r4, r5, r6, lr}
  40891e:	460d      	mov	r5, r1
  408920:	4c08      	ldr	r4, [pc, #32]	; (408944 <_lseek_r+0x28>)
  408922:	4611      	mov	r1, r2
  408924:	4606      	mov	r6, r0
  408926:	461a      	mov	r2, r3
  408928:	4628      	mov	r0, r5
  40892a:	2300      	movs	r3, #0
  40892c:	6023      	str	r3, [r4, #0]
  40892e:	f7fc fea1 	bl	405674 <_lseek>
  408932:	1c43      	adds	r3, r0, #1
  408934:	d000      	beq.n	408938 <_lseek_r+0x1c>
  408936:	bd70      	pop	{r4, r5, r6, pc}
  408938:	6823      	ldr	r3, [r4, #0]
  40893a:	2b00      	cmp	r3, #0
  40893c:	d0fb      	beq.n	408936 <_lseek_r+0x1a>
  40893e:	6033      	str	r3, [r6, #0]
  408940:	bd70      	pop	{r4, r5, r6, pc}
  408942:	bf00      	nop
  408944:	2040cad0 	.word	0x2040cad0

00408948 <_read_r>:
  408948:	b570      	push	{r4, r5, r6, lr}
  40894a:	460d      	mov	r5, r1
  40894c:	4c08      	ldr	r4, [pc, #32]	; (408970 <_read_r+0x28>)
  40894e:	4611      	mov	r1, r2
  408950:	4606      	mov	r6, r0
  408952:	461a      	mov	r2, r3
  408954:	4628      	mov	r0, r5
  408956:	2300      	movs	r3, #0
  408958:	6023      	str	r3, [r4, #0]
  40895a:	f7fc f825 	bl	4049a8 <_read>
  40895e:	1c43      	adds	r3, r0, #1
  408960:	d000      	beq.n	408964 <_read_r+0x1c>
  408962:	bd70      	pop	{r4, r5, r6, pc}
  408964:	6823      	ldr	r3, [r4, #0]
  408966:	2b00      	cmp	r3, #0
  408968:	d0fb      	beq.n	408962 <_read_r+0x1a>
  40896a:	6033      	str	r3, [r6, #0]
  40896c:	bd70      	pop	{r4, r5, r6, pc}
  40896e:	bf00      	nop
  408970:	2040cad0 	.word	0x2040cad0

00408974 <__aeabi_uldivmod>:
  408974:	b953      	cbnz	r3, 40898c <__aeabi_uldivmod+0x18>
  408976:	b94a      	cbnz	r2, 40898c <__aeabi_uldivmod+0x18>
  408978:	2900      	cmp	r1, #0
  40897a:	bf08      	it	eq
  40897c:	2800      	cmpeq	r0, #0
  40897e:	bf1c      	itt	ne
  408980:	f04f 31ff 	movne.w	r1, #4294967295
  408984:	f04f 30ff 	movne.w	r0, #4294967295
  408988:	f000 b97a 	b.w	408c80 <__aeabi_idiv0>
  40898c:	f1ad 0c08 	sub.w	ip, sp, #8
  408990:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  408994:	f000 f806 	bl	4089a4 <__udivmoddi4>
  408998:	f8dd e004 	ldr.w	lr, [sp, #4]
  40899c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4089a0:	b004      	add	sp, #16
  4089a2:	4770      	bx	lr

004089a4 <__udivmoddi4>:
  4089a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4089a8:	468c      	mov	ip, r1
  4089aa:	460d      	mov	r5, r1
  4089ac:	4604      	mov	r4, r0
  4089ae:	9e08      	ldr	r6, [sp, #32]
  4089b0:	2b00      	cmp	r3, #0
  4089b2:	d151      	bne.n	408a58 <__udivmoddi4+0xb4>
  4089b4:	428a      	cmp	r2, r1
  4089b6:	4617      	mov	r7, r2
  4089b8:	d96d      	bls.n	408a96 <__udivmoddi4+0xf2>
  4089ba:	fab2 fe82 	clz	lr, r2
  4089be:	f1be 0f00 	cmp.w	lr, #0
  4089c2:	d00b      	beq.n	4089dc <__udivmoddi4+0x38>
  4089c4:	f1ce 0c20 	rsb	ip, lr, #32
  4089c8:	fa01 f50e 	lsl.w	r5, r1, lr
  4089cc:	fa20 fc0c 	lsr.w	ip, r0, ip
  4089d0:	fa02 f70e 	lsl.w	r7, r2, lr
  4089d4:	ea4c 0c05 	orr.w	ip, ip, r5
  4089d8:	fa00 f40e 	lsl.w	r4, r0, lr
  4089dc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4089e0:	0c25      	lsrs	r5, r4, #16
  4089e2:	fbbc f8fa 	udiv	r8, ip, sl
  4089e6:	fa1f f987 	uxth.w	r9, r7
  4089ea:	fb0a cc18 	mls	ip, sl, r8, ip
  4089ee:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4089f2:	fb08 f309 	mul.w	r3, r8, r9
  4089f6:	42ab      	cmp	r3, r5
  4089f8:	d90a      	bls.n	408a10 <__udivmoddi4+0x6c>
  4089fa:	19ed      	adds	r5, r5, r7
  4089fc:	f108 32ff 	add.w	r2, r8, #4294967295
  408a00:	f080 8123 	bcs.w	408c4a <__udivmoddi4+0x2a6>
  408a04:	42ab      	cmp	r3, r5
  408a06:	f240 8120 	bls.w	408c4a <__udivmoddi4+0x2a6>
  408a0a:	f1a8 0802 	sub.w	r8, r8, #2
  408a0e:	443d      	add	r5, r7
  408a10:	1aed      	subs	r5, r5, r3
  408a12:	b2a4      	uxth	r4, r4
  408a14:	fbb5 f0fa 	udiv	r0, r5, sl
  408a18:	fb0a 5510 	mls	r5, sl, r0, r5
  408a1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  408a20:	fb00 f909 	mul.w	r9, r0, r9
  408a24:	45a1      	cmp	r9, r4
  408a26:	d909      	bls.n	408a3c <__udivmoddi4+0x98>
  408a28:	19e4      	adds	r4, r4, r7
  408a2a:	f100 33ff 	add.w	r3, r0, #4294967295
  408a2e:	f080 810a 	bcs.w	408c46 <__udivmoddi4+0x2a2>
  408a32:	45a1      	cmp	r9, r4
  408a34:	f240 8107 	bls.w	408c46 <__udivmoddi4+0x2a2>
  408a38:	3802      	subs	r0, #2
  408a3a:	443c      	add	r4, r7
  408a3c:	eba4 0409 	sub.w	r4, r4, r9
  408a40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408a44:	2100      	movs	r1, #0
  408a46:	2e00      	cmp	r6, #0
  408a48:	d061      	beq.n	408b0e <__udivmoddi4+0x16a>
  408a4a:	fa24 f40e 	lsr.w	r4, r4, lr
  408a4e:	2300      	movs	r3, #0
  408a50:	6034      	str	r4, [r6, #0]
  408a52:	6073      	str	r3, [r6, #4]
  408a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408a58:	428b      	cmp	r3, r1
  408a5a:	d907      	bls.n	408a6c <__udivmoddi4+0xc8>
  408a5c:	2e00      	cmp	r6, #0
  408a5e:	d054      	beq.n	408b0a <__udivmoddi4+0x166>
  408a60:	2100      	movs	r1, #0
  408a62:	e886 0021 	stmia.w	r6, {r0, r5}
  408a66:	4608      	mov	r0, r1
  408a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408a6c:	fab3 f183 	clz	r1, r3
  408a70:	2900      	cmp	r1, #0
  408a72:	f040 808e 	bne.w	408b92 <__udivmoddi4+0x1ee>
  408a76:	42ab      	cmp	r3, r5
  408a78:	d302      	bcc.n	408a80 <__udivmoddi4+0xdc>
  408a7a:	4282      	cmp	r2, r0
  408a7c:	f200 80fa 	bhi.w	408c74 <__udivmoddi4+0x2d0>
  408a80:	1a84      	subs	r4, r0, r2
  408a82:	eb65 0503 	sbc.w	r5, r5, r3
  408a86:	2001      	movs	r0, #1
  408a88:	46ac      	mov	ip, r5
  408a8a:	2e00      	cmp	r6, #0
  408a8c:	d03f      	beq.n	408b0e <__udivmoddi4+0x16a>
  408a8e:	e886 1010 	stmia.w	r6, {r4, ip}
  408a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408a96:	b912      	cbnz	r2, 408a9e <__udivmoddi4+0xfa>
  408a98:	2701      	movs	r7, #1
  408a9a:	fbb7 f7f2 	udiv	r7, r7, r2
  408a9e:	fab7 fe87 	clz	lr, r7
  408aa2:	f1be 0f00 	cmp.w	lr, #0
  408aa6:	d134      	bne.n	408b12 <__udivmoddi4+0x16e>
  408aa8:	1beb      	subs	r3, r5, r7
  408aaa:	0c3a      	lsrs	r2, r7, #16
  408aac:	fa1f fc87 	uxth.w	ip, r7
  408ab0:	2101      	movs	r1, #1
  408ab2:	fbb3 f8f2 	udiv	r8, r3, r2
  408ab6:	0c25      	lsrs	r5, r4, #16
  408ab8:	fb02 3318 	mls	r3, r2, r8, r3
  408abc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408ac0:	fb0c f308 	mul.w	r3, ip, r8
  408ac4:	42ab      	cmp	r3, r5
  408ac6:	d907      	bls.n	408ad8 <__udivmoddi4+0x134>
  408ac8:	19ed      	adds	r5, r5, r7
  408aca:	f108 30ff 	add.w	r0, r8, #4294967295
  408ace:	d202      	bcs.n	408ad6 <__udivmoddi4+0x132>
  408ad0:	42ab      	cmp	r3, r5
  408ad2:	f200 80d1 	bhi.w	408c78 <__udivmoddi4+0x2d4>
  408ad6:	4680      	mov	r8, r0
  408ad8:	1aed      	subs	r5, r5, r3
  408ada:	b2a3      	uxth	r3, r4
  408adc:	fbb5 f0f2 	udiv	r0, r5, r2
  408ae0:	fb02 5510 	mls	r5, r2, r0, r5
  408ae4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  408ae8:	fb0c fc00 	mul.w	ip, ip, r0
  408aec:	45a4      	cmp	ip, r4
  408aee:	d907      	bls.n	408b00 <__udivmoddi4+0x15c>
  408af0:	19e4      	adds	r4, r4, r7
  408af2:	f100 33ff 	add.w	r3, r0, #4294967295
  408af6:	d202      	bcs.n	408afe <__udivmoddi4+0x15a>
  408af8:	45a4      	cmp	ip, r4
  408afa:	f200 80b8 	bhi.w	408c6e <__udivmoddi4+0x2ca>
  408afe:	4618      	mov	r0, r3
  408b00:	eba4 040c 	sub.w	r4, r4, ip
  408b04:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408b08:	e79d      	b.n	408a46 <__udivmoddi4+0xa2>
  408b0a:	4631      	mov	r1, r6
  408b0c:	4630      	mov	r0, r6
  408b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408b12:	f1ce 0420 	rsb	r4, lr, #32
  408b16:	fa05 f30e 	lsl.w	r3, r5, lr
  408b1a:	fa07 f70e 	lsl.w	r7, r7, lr
  408b1e:	fa20 f804 	lsr.w	r8, r0, r4
  408b22:	0c3a      	lsrs	r2, r7, #16
  408b24:	fa25 f404 	lsr.w	r4, r5, r4
  408b28:	ea48 0803 	orr.w	r8, r8, r3
  408b2c:	fbb4 f1f2 	udiv	r1, r4, r2
  408b30:	ea4f 4518 	mov.w	r5, r8, lsr #16
  408b34:	fb02 4411 	mls	r4, r2, r1, r4
  408b38:	fa1f fc87 	uxth.w	ip, r7
  408b3c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  408b40:	fb01 f30c 	mul.w	r3, r1, ip
  408b44:	42ab      	cmp	r3, r5
  408b46:	fa00 f40e 	lsl.w	r4, r0, lr
  408b4a:	d909      	bls.n	408b60 <__udivmoddi4+0x1bc>
  408b4c:	19ed      	adds	r5, r5, r7
  408b4e:	f101 30ff 	add.w	r0, r1, #4294967295
  408b52:	f080 808a 	bcs.w	408c6a <__udivmoddi4+0x2c6>
  408b56:	42ab      	cmp	r3, r5
  408b58:	f240 8087 	bls.w	408c6a <__udivmoddi4+0x2c6>
  408b5c:	3902      	subs	r1, #2
  408b5e:	443d      	add	r5, r7
  408b60:	1aeb      	subs	r3, r5, r3
  408b62:	fa1f f588 	uxth.w	r5, r8
  408b66:	fbb3 f0f2 	udiv	r0, r3, r2
  408b6a:	fb02 3310 	mls	r3, r2, r0, r3
  408b6e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408b72:	fb00 f30c 	mul.w	r3, r0, ip
  408b76:	42ab      	cmp	r3, r5
  408b78:	d907      	bls.n	408b8a <__udivmoddi4+0x1e6>
  408b7a:	19ed      	adds	r5, r5, r7
  408b7c:	f100 38ff 	add.w	r8, r0, #4294967295
  408b80:	d26f      	bcs.n	408c62 <__udivmoddi4+0x2be>
  408b82:	42ab      	cmp	r3, r5
  408b84:	d96d      	bls.n	408c62 <__udivmoddi4+0x2be>
  408b86:	3802      	subs	r0, #2
  408b88:	443d      	add	r5, r7
  408b8a:	1aeb      	subs	r3, r5, r3
  408b8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  408b90:	e78f      	b.n	408ab2 <__udivmoddi4+0x10e>
  408b92:	f1c1 0720 	rsb	r7, r1, #32
  408b96:	fa22 f807 	lsr.w	r8, r2, r7
  408b9a:	408b      	lsls	r3, r1
  408b9c:	fa05 f401 	lsl.w	r4, r5, r1
  408ba0:	ea48 0303 	orr.w	r3, r8, r3
  408ba4:	fa20 fe07 	lsr.w	lr, r0, r7
  408ba8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  408bac:	40fd      	lsrs	r5, r7
  408bae:	ea4e 0e04 	orr.w	lr, lr, r4
  408bb2:	fbb5 f9fc 	udiv	r9, r5, ip
  408bb6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  408bba:	fb0c 5519 	mls	r5, ip, r9, r5
  408bbe:	fa1f f883 	uxth.w	r8, r3
  408bc2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  408bc6:	fb09 f408 	mul.w	r4, r9, r8
  408bca:	42ac      	cmp	r4, r5
  408bcc:	fa02 f201 	lsl.w	r2, r2, r1
  408bd0:	fa00 fa01 	lsl.w	sl, r0, r1
  408bd4:	d908      	bls.n	408be8 <__udivmoddi4+0x244>
  408bd6:	18ed      	adds	r5, r5, r3
  408bd8:	f109 30ff 	add.w	r0, r9, #4294967295
  408bdc:	d243      	bcs.n	408c66 <__udivmoddi4+0x2c2>
  408bde:	42ac      	cmp	r4, r5
  408be0:	d941      	bls.n	408c66 <__udivmoddi4+0x2c2>
  408be2:	f1a9 0902 	sub.w	r9, r9, #2
  408be6:	441d      	add	r5, r3
  408be8:	1b2d      	subs	r5, r5, r4
  408bea:	fa1f fe8e 	uxth.w	lr, lr
  408bee:	fbb5 f0fc 	udiv	r0, r5, ip
  408bf2:	fb0c 5510 	mls	r5, ip, r0, r5
  408bf6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  408bfa:	fb00 f808 	mul.w	r8, r0, r8
  408bfe:	45a0      	cmp	r8, r4
  408c00:	d907      	bls.n	408c12 <__udivmoddi4+0x26e>
  408c02:	18e4      	adds	r4, r4, r3
  408c04:	f100 35ff 	add.w	r5, r0, #4294967295
  408c08:	d229      	bcs.n	408c5e <__udivmoddi4+0x2ba>
  408c0a:	45a0      	cmp	r8, r4
  408c0c:	d927      	bls.n	408c5e <__udivmoddi4+0x2ba>
  408c0e:	3802      	subs	r0, #2
  408c10:	441c      	add	r4, r3
  408c12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  408c16:	eba4 0408 	sub.w	r4, r4, r8
  408c1a:	fba0 8902 	umull	r8, r9, r0, r2
  408c1e:	454c      	cmp	r4, r9
  408c20:	46c6      	mov	lr, r8
  408c22:	464d      	mov	r5, r9
  408c24:	d315      	bcc.n	408c52 <__udivmoddi4+0x2ae>
  408c26:	d012      	beq.n	408c4e <__udivmoddi4+0x2aa>
  408c28:	b156      	cbz	r6, 408c40 <__udivmoddi4+0x29c>
  408c2a:	ebba 030e 	subs.w	r3, sl, lr
  408c2e:	eb64 0405 	sbc.w	r4, r4, r5
  408c32:	fa04 f707 	lsl.w	r7, r4, r7
  408c36:	40cb      	lsrs	r3, r1
  408c38:	431f      	orrs	r7, r3
  408c3a:	40cc      	lsrs	r4, r1
  408c3c:	6037      	str	r7, [r6, #0]
  408c3e:	6074      	str	r4, [r6, #4]
  408c40:	2100      	movs	r1, #0
  408c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408c46:	4618      	mov	r0, r3
  408c48:	e6f8      	b.n	408a3c <__udivmoddi4+0x98>
  408c4a:	4690      	mov	r8, r2
  408c4c:	e6e0      	b.n	408a10 <__udivmoddi4+0x6c>
  408c4e:	45c2      	cmp	sl, r8
  408c50:	d2ea      	bcs.n	408c28 <__udivmoddi4+0x284>
  408c52:	ebb8 0e02 	subs.w	lr, r8, r2
  408c56:	eb69 0503 	sbc.w	r5, r9, r3
  408c5a:	3801      	subs	r0, #1
  408c5c:	e7e4      	b.n	408c28 <__udivmoddi4+0x284>
  408c5e:	4628      	mov	r0, r5
  408c60:	e7d7      	b.n	408c12 <__udivmoddi4+0x26e>
  408c62:	4640      	mov	r0, r8
  408c64:	e791      	b.n	408b8a <__udivmoddi4+0x1e6>
  408c66:	4681      	mov	r9, r0
  408c68:	e7be      	b.n	408be8 <__udivmoddi4+0x244>
  408c6a:	4601      	mov	r1, r0
  408c6c:	e778      	b.n	408b60 <__udivmoddi4+0x1bc>
  408c6e:	3802      	subs	r0, #2
  408c70:	443c      	add	r4, r7
  408c72:	e745      	b.n	408b00 <__udivmoddi4+0x15c>
  408c74:	4608      	mov	r0, r1
  408c76:	e708      	b.n	408a8a <__udivmoddi4+0xe6>
  408c78:	f1a8 0802 	sub.w	r8, r8, #2
  408c7c:	443d      	add	r5, r7
  408c7e:	e72b      	b.n	408ad8 <__udivmoddi4+0x134>

00408c80 <__aeabi_idiv0>:
  408c80:	4770      	bx	lr
  408c82:	bf00      	nop
  408c84:	454c4449 	.word	0x454c4449
  408c88:	00000000 	.word	0x00000000
  408c8c:	51726d54 	.word	0x51726d54
  408c90:	00000000 	.word	0x00000000
  408c94:	20726d54 	.word	0x20726d54
  408c98:	00637653 	.word	0x00637653

00408c9c <__FUNCTION__.11288>:
  408c9c:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
  408cac:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
  408cbc:	00005d64 61766e49 2064696c 54434f49     d]..Invalid IOCT
  408ccc:	6f63204c 6e616d6d 000a2164 0000000d     L command!......

00408cdc <__FUNCTION__.9901>:
  408cdc:	5f666968 646e6573 00000000              hif_send....

00408ce8 <__FUNCTION__.9911>:
  408ce8:	5f666968 00727369                       hif_isr.

00408cf0 <__FUNCTION__.9917>:
  408cf0:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00408d00 <__FUNCTION__.9932>:
  408d00:	5f666968 65636572 00657669              hif_receive.

00408d0c <__FUNCTION__.9947>:
  408d0c:	5f666968 69676572 72657473 0062635f     hif_register_cb.
  408d1c:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
  408d2c:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
  408d3c:	0a6c6961 00000000 66696828 64612029     ail.....(hif) ad
  408d4c:	73657264 75622073 61662073 000a6c69     dress bus fail..
  408d5c:	66696828 6f432029 70757272 20646574     (hif) Corrupted 
  408d6c:	6b636170 53207465 20657a69 7525203d     packet Size = %u
  408d7c:	204c3c20 7525203d 2047202c 7525203d      <L = %u, G = %u
  408d8c:	504f202c 25203d20 3e583230 0000000a     , OP = %02X>....
  408d9c:	66696828 6e692029 696c6176 72672064     (hif) invalid gr
  408dac:	2070756f 000a4449 66696828 6f682029     oup ID..(hif) ho
  408dbc:	61207473 64207070 276e6469 65732074     st app didn't se
  408dcc:	58522074 6e6f4420 00000a65 66696828     t RX Done...(hif
  408ddc:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
  408dec:	66696828 61462029 2065736c 65746e69     (hif) False inte
  408dfc:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
  408e0c:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
  408e1c:	7265746e 74707572 67657220 0000000a     nterrupt reg....
  408e2c:	66696828 41462029 74204c49 6177206f     (hif) FAIL to wa
  408e3c:	7075656b 65687420 69686320 00000a70     keup the chip...
  408e4c:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
  408e5c:	656c646e 746e6920 75727265 25207470     ndle interrupt %
  408e6c:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
  408e7c:	66696820 6365725f 65766965 6e49203a      hif_receive: In
  408e8c:	696c6176 72612064 656d7567 000a746e     valid argument..
  408e9c:	20505041 75716552 65747365 69532064     APP Requested Si
  408eac:	6920657a 616c2073 72656772 61687420     ze is larger tha
  408ebc:	6874206e 65722065 65766963 75622064     n the recived bu
  408ecc:	72656666 7a697320 253c2065 253c3e64     ffer size <%d><%
  408edc:	000a3e64 20505041 75716552 65747365     d>..APP Requeste
  408eec:	64412064 73657264 65622073 646e6f79     d Address beyond
  408efc:	65687420 63657220 64657669 66756220      the recived buf
  408f0c:	20726566 72646461 20737365 20646e61     fer address and 
  408f1c:	676e656c 000a6874 20705247 6425203f     length..GRp ? %d
  408f2c:	0000000a 46494828 69614629 6f74206c     ....(HIF)Fail to
  408f3c:	6b617720 74207075 63206568 0a706968      wakup the chip.
  408f4c:	00000000                                ....

00408f50 <__FUNCTION__.9874>:
  408f50:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00408f5c <__FUNCTION__.9898>:
  408f5c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00408f6c <__FUNCTION__.9926>:
  408f6c:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
  408f7c:	0063735f 50504128 4e492829 00294f46     _sc.(APP)(INFO).
  408f8c:	666e6f43 7463696c 49206465 20222050     Conflicted IP " 
  408f9c:	252e7525 75252e75 2075252e 000a2022     %u.%u.%u.%u " ..
  408fac:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
  408fbc:	000a6425 2079654b 6e207369 7620746f     %d..Key is not v
  408fcc:	64696c61 0000000a 61766e49 2064696c     alid....Invalid 
  408fdc:	0a79654b 00000000 44495353 4e454c20     Key.....SSID LEN
  408fec:	564e4920 44494c41 0000000a 49204843      INVALID....CH I
  408ffc:	4c41564e 000a4449 61766e49 2064696c     NVALID..Invalid 
  40900c:	20706557 2079656b 65646e69 64252078     Wep key index %d
  40901c:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
  40902c:	2079656b 676e656c 25206874 00000a64     key length %d...
  40903c:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
  40904c:	656c2079 6874676e 0000000a 65646e75     y length....unde
  40905c:	656e6966 65732064 79742063 000a6570     fined sec type..
  40906c:	6d726946 65726177 72657620 3a202020     Firmware ver   :
  40907c:	2e752520 252e7525 00000a75 206e694d      %u.%u.%u...Min 
  40908c:	76697264 76207265 3a207265 2e752520     driver ver : %u.
  40909c:	252e7525 00000a75 72727543 69726420     %u.%u...Curr dri
  4090ac:	20726576 3a726576 2e752520 252e7525     ver ver: %u.%u.%
  4090bc:	00000a75 6d73694d 68637461 72694620     u...Mismatch Fir
  4090cc:	7277616d 65562065 6f697372 00000a6e     mawre Version...

004090dc <__FUNCTION__.9711>:
  4090dc:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

004090ec <__FUNCTION__.9805>:
  4090ec:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
  4090fc:	74206465 6564206f 696e692d 6c616974     ed to de-initial
  40910c:	0a657a69 00000000 6f727245 68772072     ize.....Error wh
  40911c:	20656c69 74697277 20676e69 0a676572     ile writing reg.
  40912c:	00000000 6f727245 68772072 20656c69     ....Error while 
  40913c:	64616572 20676e69 0a676572 00000000     reading reg.....
  40914c:	20737542 6f727265 31282072 57202e29     Bus error (1). W
  40915c:	20656b61 66207075 656c6961 00000a64     ake up failed...
  40916c:	20737542 6f727265 32282072 57202e29     Bus error (2). W
  40917c:	20656b61 66207075 656c6961 00000a64     ake up failed...
  40918c:	636f6c63 7320736b 6c6c6974 46464f20     clocks still OFF
  40919c:	6157202e 7520656b 61662070 64656c69     . Wake up failed
  4091ac:	0000000a 3a676572 2f207825 20782520     ....reg:%x / %x 
  4091bc:	0000000a                                ....

004091c0 <__FUNCTION__.9792>:
  4091c0:	645f6d6e 695f7672 0074696e              nm_drv_init.

004091cc <__FUNCTION__.9799>:
  4091cc:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
  4091dc:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
  4091ec:	6965645f 2074696e 6c696166 0000000a     _deinit fail....
  4091fc:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
  40920c:	73616c66 69642068 6c626173 61662065     flash disable fa
  40921c:	000a6c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
  40922c:	6c696166 696e6920 75622074 00000a73     fail init bus...
  40923c:	6c696166 74206465 6e65206f 656c6261     failed to enable
  40924c:	746e6920 75727265 2e737470 00000a2e      interrupts.....
  40925c:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
  40926c:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
  40927c:	20444920 0a786c25 00000000               ID %lx.....

00409288 <__FUNCTION__.9176>:
  409288:	5f697073 00646d63                       spi_cmd.

00409290 <__FUNCTION__.9184>:
  409290:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0040929c <__FUNCTION__.9200>:
  40929c:	5f697073 61746164 6165725f 00000064     spi_data_read...

004092ac <__FUNCTION__.9215>:
  4092ac:	5f697073 61746164 6972775f 00006574     spi_data_write..

004092bc <__FUNCTION__.9225>:
  4092bc:	5f697073 74697277 65725f65 00000067     spi_write_reg...

004092cc <__FUNCTION__.9233>:
  4092cc:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

004092dc <__FUNCTION__.9242>:
  4092dc:	5f697073 64616572 6765725f 00000000     spi_read_reg....

004092ec <__FUNCTION__.9250>:
  4092ec:	735f6d6e 725f6970 00646165              nm_spi_read.

004092f8 <__FUNCTION__.9267>:
  4092f8:	735f6d6e 695f6970 0074696e              nm_spi_init.

00409304 <crc7_syndrome_table>:
  409304:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
  409314:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
  409324:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
  409334:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
  409344:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
  409354:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
  409364:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
  409374:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
  409384:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
  409394:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
  4093a4:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
  4093b4:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
  4093c4:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
  4093d4:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
  4093e4:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
  4093f4:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
  409404:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  409414:	6e692064 6e726574 72206c61 20646165     d internal read 
  409424:	746f7270 6c6f636f 74697720 52432068     protocol with CR
  409434:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
  409444:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
  409454:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  409464:	6e692064 6e726574 72206c61 20646165     d internal read 
  409474:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
  409484:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  409494:	6e692064 6e726574 77206c61 65746972     d internal write
  4094a4:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
  4094b4:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  4094c4:	206c6961 20646d63 64616572 69686320     ail cmd read chi
  4094d4:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
  4094e4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  4094f4:	72202c64 20646165 636f6c62 2528206b     d, read block (%
  409504:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
  409514:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  409524:	65722064 6e6f7073 202c6573 64616572     d response, read
  409534:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
  409544:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  409554:	656c6961 6c622064 206b636f 61746164     ailed block data
  409564:	61657220 2e2e2e64 0000000a 696d6e5b      read.......[nmi
  409574:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  409584:	77202c64 65746972 6f6c6220 28206b63     d, write block (
  409594:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
  4095a4:	69707320 203a5d20 6c696146 63206465      spi ]: Failed c
  4095b4:	7220646d 6f707365 2c65736e 69727720     md response, wri
  4095c4:	62206574 6b636f6c 30252820 2e297838     te block (%08x).
  4095d4:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  4095e4:	656c6961 61642064 62206174 6b636f6c     ailed data block
  4095f4:	646d6320 69727720 202c6574 20737562      cmd write, bus 
  409604:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
  409614:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
  409624:	62206174 6b636f6c 69727720 202c6574     ta block write, 
  409634:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
  409644:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  409654:	61642064 62206174 6b636f6c 63726320     d data block crc
  409664:	69727720 202c6574 20737562 6f727265      write, bus erro
  409674:	2e2e2e72 0000000a 696d6e5b 69707320     r.......[nmi spi
  409684:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
  409694:	61746164 69727720 2e2e6574 00000a2e     data write......
  4096a4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  4096b4:	6d632064 72772064 2c657469 73756220     d cmd write, bus
  4096c4:	72726520 2e2e726f 00000a2e 696d6e5b      error......[nmi
  4096d4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  4096e4:	65722064 6e6f7073 72206573 2c646165     d response read,
  4096f4:	73756220 72726520 2e2e726f 00000a2e      bus error......
  409704:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  409714:	61642064 72206174 6f707365 2065736e     d data response 
  409724:	64616572 7562202c 72652073 2e726f72     read, bus error.
  409734:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  409744:	656c6961 61642064 72206174 6f707365     ailed data respo
  409754:	2065736e 64616572 282e2e2e 78323025     nse read...(%02x
  409764:	00000a29 696d6e5b 69707320 46203a5d     )...[nmi spi]: F
  409774:	656c6961 61642064 62206174 6b636f6c     ailed data block
  409784:	61657220 62202c64 65207375 726f7272      read, bus error
  409794:	0a2e2e2e 00000000 696d6e5b 69707320     ........[nmi spi
  4097a4:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
  4097b4:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
  4097c4:	65207375 726f7272 0a2e2e2e 00000000     us error........
  4097d4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  4097e4:	6d632064 72202c64 20646165 20676572     d cmd, read reg 
  4097f4:	38302528 2e2e2978 00000a2e 696d6e5b     (%08x)......[nmi
  409804:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  409814:	65722064 6e6f7073 202c6573 64616572     d response, read
  409824:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
  409834:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  409844:	61642064 72206174 2e646165 000a2e2e     d data read.....
  409854:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  409864:	6d632064 77202c64 65746972 67657220     d cmd, write reg
  409874:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
  409884:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  409894:	65722064 6e6f7073 202c6573 74697277     d response, writ
  4098a4:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
  4098b4:	00000000 52524528 75432952 6e657272     ....(ERRR)Curren
  4098c4:	253c2074 000a3e64 57202d2d 31434e49     t <%d>..-- WINC1
  4098d4:	20303035 74616577 20726568 65696c63     500 weather clie
  4098e4:	6520746e 706d6178 2d20656c 2d0a0d2d     nt example --..-
  4098f4:	4153202d 3037454d 4c50582d 2d2d2044     - SAME70-XPLD --
  409904:	2d2d0a0d 6d6f4320 656c6970 4d203a64     ..-- Compiled: M
  409914:	32207961 30322038 31203931 31323a35     ay 28 2019 15:21
  409924:	2033313a 0a0d2d2d 00000000 69666957     :13 --......Wifi
  409934:	00000000 6c696146 74206465 7263206f     ....Failed to cr
  409944:	65746165 66695720 61742069 0a0d6b73     eate Wifi task..
  409954:	00000000 6f736572 5f65766c 203a6263     ....resolve_cb: 
  409964:	49207325 64612050 73657264 73692073     %s IP address is
  409974:	2e642520 252e6425 64252e64 0a0d0a0d      %d.%d.%d.%d....
  409984:	00000000 6b636f73 6d5f7465 635f6773     ....socket_msg_c
  409994:	656e6e6f 000a7463 20544547 7461642f     onnect..GET /dat
  4099a4:	30323d61 6d657426 35323d70 6d6f6e26     a=20&temp=25&nom
  4099b4:	696c3d65 54482075 312f5054 0a0d312e     e=liu HTTP/1.1..
  4099c4:	63634120 3a747065 2a2f2a20 0a0d0a0d      Accept: */*....
  4099d4:	00000000 646e6573 00000a20 6b636f73     ....send ...sock
  4099e4:	635f7465 63203a62 656e6e6f 65207463     et_cb: connect e
  4099f4:	726f7272 000a0d21 6b636f73 635f7465     rror!...socket_c
  409a04:	72203a62 20766365 6f727265 0a0d2172     b: recv error!..
  409a14:	00000000 6e69616d 326d203a 69775f6d     ....main: m2m_wi
  409a24:	695f6966 2074696e 6c6c6163 72726520     fi_init call err
  409a34:	2821726f 0d296425 0000000a 70736e49     or!(%d).....Insp
  409a44:	495f7265 0000546f 6e69616d 6f63203a     er_IoT..main: co
  409a54:	63656e6e 676e6974 206f7420 69466957     nnecting to WiFi
  409a64:	20504120 2e2e7325 000a0d2e 312e3031      AP %s......10.1
  409a74:	302e3330 0036342e 74656e49 6f746120     03.0.46.Inet ato
  409a84:	203a206e 00006425 6b636f73 69207465     n : %d..socket i
  409a94:	2074696e 0000000a 6e69616d 6166203a     nit ....main: fa
  409aa4:	64656c69 206f7420 61657263 54206574     iled to create T
  409ab4:	63205043 6e65696c 6f732074 74656b63     CP client socket
  409ac4:	72726520 0d21726f 0000000a 6b636f73      error!.....sock
  409ad4:	63207465 656e6e6f 6e697463 00000a67     et connecting...
  409ae4:	6f727265 00000a72 63617473 766f206b     error...stack ov
  409af4:	6c667265 2520776f 73252078 00000a0d     erflow %x %s....
  409b04:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
  409b14:	4f435f49 43454e4e 0d444554 0000000a     I_CONNECTED.....
  409b24:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
  409b34:	49445f49 4e4f4353 5443454e 0a0d4445     I_DISCONNECTED..
  409b44:	00000000 69666977 3a62635f 20504920     ....wifi_cb: IP 
  409b54:	72646461 20737365 25207369 75252e75     address is %u.%u
  409b64:	2e75252e 0a0d7525 00000000              .%u.%u......

00409b70 <_global_impure_ptr>:
  409b70:	20400030 33323130 37363534 42413938     0.@ 0123456789AB
  409b80:	46454443 00000000 33323130 37363534     CDEF....01234567
  409b90:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  409ba0:	0000296c                                l)..

00409ba4 <blanks.7217>:
  409ba4:	20202020 20202020 20202020 20202020                     

00409bb4 <zeroes.7218>:
  409bb4:	30303030 30303030 30303030 30303030     0000000000000000
  409bc4:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00409bd4 <_ctype_>:
  409bd4:	20202000 20202020 28282020 20282828     .         ((((( 
  409be4:	20202020 20202020 20202020 20202020                     
  409bf4:	10108820 10101010 10101010 10101010      ...............
  409c04:	04040410 04040404 10040404 10101010     ................
  409c14:	41411010 41414141 01010101 01010101     ..AAAAAA........
  409c24:	01010101 01010101 01010101 10101010     ................
  409c34:	42421010 42424242 02020202 02020202     ..BBBBBB........
  409c44:	02020202 02020202 02020202 10101010     ................
  409c54:	00000020 00000000 00000000 00000000      ...............
	...

00409cd8 <_init>:
  409cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409cda:	bf00      	nop
  409cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409cde:	bc08      	pop	{r3}
  409ce0:	469e      	mov	lr, r3
  409ce2:	4770      	bx	lr

00409ce4 <__init_array_start>:
  409ce4:	00407039 	.word	0x00407039

00409ce8 <__frame_dummy_init_array_entry>:
  409ce8:	00400165                                e.@.

00409cec <_fini>:
  409cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409cee:	bf00      	nop
  409cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409cf2:	bc08      	pop	{r3}
  409cf4:	469e      	mov	lr, r3
  409cf6:	4770      	bx	lr

00409cf8 <__fini_array_start>:
  409cf8:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <egstrNmBusCapabilities>:
20400010:	1000 0000                                   ....

20400014 <clk_status_reg_adr>:
20400014:	000f 0000                                   ....

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <gau8MacAddr>:
20400020:	0042 9661 6c2e                              B.a..l

20400026 <tcp_client_socket>:
20400026:	00ff                                        ..

20400028 <_impure_ptr>:
20400028:	0030 2040 0000 0000                         0.@ ....

20400030 <impure_data>:
20400030:	0000 0000 031c 2040 0384 2040 03ec 2040     ......@ ..@ ..@ 
	...
204000d8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400458 <__atexit_recursive_mutex>:
20400458:	caac 2040                                   ..@ 

2040045c <__global_locale>:
2040045c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040047c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040049c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040051c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040053c:	86dd 0040 8031 0040 0000 0000 9bd4 0040     ..@.1.@.......@.
2040054c:	9bd0 0040 99d4 0040 99d4 0040 99d4 0040     ..@...@...@...@.
2040055c:	99d4 0040 99d4 0040 99d4 0040 99d4 0040     ..@...@...@...@.
2040056c:	99d4 0040 99d4 0040 ffff ffff ffff ffff     ..@...@.........
2040057c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204005a4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005c8 <__malloc_av_>:
	...
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 
20400850:	0848 2040 0848 2040 0850 2040 0850 2040     H.@ H.@ P.@ P.@ 
20400860:	0858 2040 0858 2040 0860 2040 0860 2040     X.@ X.@ `.@ `.@ 
20400870:	0868 2040 0868 2040 0870 2040 0870 2040     h.@ h.@ p.@ p.@ 
20400880:	0878 2040 0878 2040 0880 2040 0880 2040     x.@ x.@ ..@ ..@ 
20400890:	0888 2040 0888 2040 0890 2040 0890 2040     ..@ ..@ ..@ ..@ 
204008a0:	0898 2040 0898 2040 08a0 2040 08a0 2040     ..@ ..@ ..@ ..@ 
204008b0:	08a8 2040 08a8 2040 08b0 2040 08b0 2040     ..@ ..@ ..@ ..@ 
204008c0:	08b8 2040 08b8 2040 08c0 2040 08c0 2040     ..@ ..@ ..@ ..@ 
204008d0:	08c8 2040 08c8 2040 08d0 2040 08d0 2040     ..@ ..@ ..@ ..@ 
204008e0:	08d8 2040 08d8 2040 08e0 2040 08e0 2040     ..@ ..@ ..@ ..@ 
204008f0:	08e8 2040 08e8 2040 08f0 2040 08f0 2040     ..@ ..@ ..@ ..@ 
20400900:	08f8 2040 08f8 2040 0900 2040 0900 2040     ..@ ..@ ..@ ..@ 
20400910:	0908 2040 0908 2040 0910 2040 0910 2040     ..@ ..@ ..@ ..@ 
20400920:	0918 2040 0918 2040 0920 2040 0920 2040     ..@ ..@  .@  .@ 
20400930:	0928 2040 0928 2040 0930 2040 0930 2040     (.@ (.@ 0.@ 0.@ 
20400940:	0938 2040 0938 2040 0940 2040 0940 2040     8.@ 8.@ @.@ @.@ 
20400950:	0948 2040 0948 2040 0950 2040 0950 2040     H.@ H.@ P.@ P.@ 
20400960:	0958 2040 0958 2040 0960 2040 0960 2040     X.@ X.@ `.@ `.@ 
20400970:	0968 2040 0968 2040 0970 2040 0970 2040     h.@ h.@ p.@ p.@ 
20400980:	0978 2040 0978 2040 0980 2040 0980 2040     x.@ x.@ ..@ ..@ 
20400990:	0988 2040 0988 2040 0990 2040 0990 2040     ..@ ..@ ..@ ..@ 
204009a0:	0998 2040 0998 2040 09a0 2040 09a0 2040     ..@ ..@ ..@ ..@ 
204009b0:	09a8 2040 09a8 2040 09b0 2040 09b0 2040     ..@ ..@ ..@ ..@ 
204009c0:	09b8 2040 09b8 2040 09c0 2040 09c0 2040     ..@ ..@ ..@ ..@ 

204009d0 <__malloc_sbrk_base>:
204009d0:	ffff ffff                                   ....

204009d4 <__malloc_trim_threshold>:
204009d4:	0000 0002                                   ....
